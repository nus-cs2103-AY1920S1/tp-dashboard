[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W12-2/main[image:https://img.shields.io/travis/AY1920S1-CS2103T-W12-2/main/master.svg?logo\u003dtravis-ci\u0026logoColor\u003dwhite\u0026cacheSeconds\u003d0[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://ci.appveyor.com/project/lightz96/main[image:https://img.shields.io/appveyor/ci/lightz96/main/master.svg?logo\u003dAppveyor\u0026cacheSeconds\u003d0[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W12-2/main?branch\u003dmaster[image:https://img.shields.io/coveralls/github/AY1920S1-CS2103T-W12-2/main.svg?cacheSeconds\u003d0[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "https://app.netlify.com/sites/thrift/deploys[image:https://img.shields.io/netlify/fbb1dc07-179d-412c-a5cc-52c34f58a42c?logo\u003dnetlify\u0026cacheSeconds\u003d0[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-W12-2/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* This is a desktop finance tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* It is intended for money-conscious NUS students who wish to track their spendings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* This application was modified from the base application: AddressBook-Level3, created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "lightz96": 6,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "mainClassName \u003d \u0027thrift.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    archiveName \u003d \u0027thrift.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u0027site-name\u0027: \u0027THRIFT\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W12-2/main\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    dependsOn(\u0027asciidoctor\u0027)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": "task buildJar(type: GradleBuild) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    tasks \u003d [\u0027clean\u0027, \u0027deployOfflineDocs\u0027, \u0027shadowJar\u0027]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "limerencee": 18,
      "lightz96": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT was developed by the https://github.com/AY1920S1-CS2103T-W12-2[CS2103T-W12-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Poh Jia Hao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::limerencee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "{empty}[https://github.com/limerencee[github]] [\u003c\u003climerencee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Role: Project Manager/Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Lee Bo Qiang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::lightz96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "{empty}[https://github.com/lightz96[github]] [\u003c\u003clightz96#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Role: User Experience Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Oen Qi Han, Kenson"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "image::kensonoenqh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "{empty}[https://github.com/kensonoenqh[github]] [\u003c\u003ckensonoenqh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Role: Process Analyst/ Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Responsibilities: Business use-case modeling"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Lye Jian Wen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::lye-jw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "link:https://github.com/lye-jw[[github]] [\u003c\u003clye-jw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Role: Quality Assurance Manager/Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Responsibilities: Meeting of user needs and Proper function of app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Ang Chin Guan, Melvin"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::krusagiz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "{empty}[https://github.com/krusagiz[github]] [\u003c\u003ckrusagiz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Role: Software Architect/Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "lightz96": 4,
      "krusagiz": 6,
      "lye-jw": 5,
      "kensonoenqh": 5,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W12-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* *Email us* : You can also reach us at `THRIFT [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::logo/logo.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "By: `Team THRIFT`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003c\u003cthrift, THRIFT\u003e\u003e is an application for money-conscious NUS students who wish to track their spending, in order to make better informed decisions when it comes to saving money."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It maintain records of your daily incoming and outgoing transactions and constantly keep track of the user\u0027s spending and income."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "THRIFT is optimized for those who prefer to work with a Command Line Interface (CLI) while still enjoying the benefits of having a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "It is a simple, no-frills finance tracker made for the target user group."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "This developer guide aims to communicate to the developers working on THRIFT the design and architecture of the implementation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It also includes non-technical details to give the developers an idea of the direction THRIFT intends to take on both current and future features."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "A developer should be able to understand the design, architecture and goals of THRIFT after reading this guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Scope"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "This developer guide specifies the technical and non-technical details of THRIFT."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "The technical aspects include the design and architecture while the non-technical aspects include the user stories, use cases and \u003c\u003cnfr, NFRs\u003e\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d About the document"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*add_expense n/Laksa v/4*:: Bold text indicates user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`Description`:: Text with grey highlight (called a mark-up) indicates that it is a method/variable name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`**THRIFT**`:: Bold text with mark-up indicates a class/package name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The architecture diagram given above explains the high-level design of the application. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/thrift/Main.java[`Main`] and link:{repoURL}/src/main/java/thrift/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* At application launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `**LogsCenter**` : Used by many classes to write log messages to the application\u0027s log file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The rest of the application consists of four components."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Displays the UI of the application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes the various commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the application in-memory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Defines its _API_ in an interface with the same name as the component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Exposes its functionality using a `**{Component Name}Manager**` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "For example, the `**Logic**` component (see the class diagram given below) defines it\u0027s API in the _Logic.java_ interface and exposes its functionality using the _LogicManager.java_ class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::LogicClassDiagramv1.png[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command **delete i/1**."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".Component interactions for **delete i/1** command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*API* : link:{repoURL}/src/main/java/thrift/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The UI consists of a `**MainWindow**` that is made up of parts e.g.`**BalanceBar**`, `**CommandBox**`, `**ResultDisplay**`, `**TransactionListPanel**`, `**StatusBarFooter**` etc. All these, including the `**MainWindow**`, inherit from the abstract `**UiPart**` class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The `**UI**` component uses JavaFx UI framework. The layout of these UI parts are defined in matching _.fxml_ files that are in the _src/main/resources/view_ folder. For example, the layout of the link:{repoURL}/src/main/java/thrift/ui/MainWindow.java[**`MainWindow`**] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`**MainWindow.fxml**`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The `**UI**` component,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Executes user commands using the `**Logic**` component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Listens for changes to `**Model**` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::LogicClassDiagramv1.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "link:{repoURL}/src/main/java/thrift/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".  `**Logic**` uses the `**ThriftParser**` class to parse the user command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".  This results in a `**Command**` object which is executed by the `**LogicManager**`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".  The command execution can affect the `**Model**` (e.g. adding a `**Transaction**`)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".  The result of the command execution is encapsulated as a `**CommandResult**` object which is passed back to the `**Ui**`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".  In addition, the `**CommandResult**` object can also instruct the `**Ui**` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `**Logic**` component for the **execute(\"delete i/1\")** API call."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".Interactions Inside the Logic Component for the `delete i/1` Command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::ModelClassDiagram.png[628, 600]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*API* : link:{repoURL}/src/main/java/thrift/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The `**Model**`,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* stores a `**UserPref**` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* stores `**THRIFT**` data."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* stores `**BudgetList**` which contains budget set for different months by the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* stores `**PastUndoableCommands**` which keeps track of undoable commands for future undo and redo operation."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* exposes an unmodifiable `**ObservableList\u003cTransaction\u003e**` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `**THRIFT**`, which `**Transaction**` can reference. This would allow `**THRIFT**` to only require one `**Tag**` object per unique `Tag`, instead of each `**Transaction**` needing their own `**Tag**` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*API* : link:{repoURL}/src/main/java/thrift/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* can save `**UserPref**` objects in json format and read it back."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* can save the `**THRIFT**` data in json format and read it back:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** `**JsonAdaptedTransaction**` stores `**Transaction**` objects in `JSON` format."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** `**JsonAdaptedTag**` stores `**Tag**` objects in `JSON` format, nested under `**JsonAdaptedTransaction**`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** `**JsonAdaptedBudget**` stores `**Budget**` objects in `JSON` format."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Classes used by multiple components are in the `**thrift.commons**` package."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "// tag::budget[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Adding transactions"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The **add_expense**/**add_income** feature is implemented through polymorphism. `**Expense**` and `**Income**` are both subclasses of the abstract class `Transaction`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Each `**Transaction**` contains the following mandatory fields: `Description`, `TransactionDate` and `Value`; as well as optional fields: `Remark`,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": "and `Set\u003cTag\u003e`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/Polymorphism.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Because of this polymorphism relation, many of the driver functions in `THRIFT` simply references `Transaction` and it will work for both `Expense`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": "and `Income` transaction objects. For example, when inserting a new `Expense`/`Income`, the `AddTransactionCommandParser` will determine"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "which object to initialize:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".Sequence diagram of how adding a new `Transaction` is processed with polymorphism"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/PolymorphismCalling.png[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limerencee"
        },
        "content": "`**Expense**` and `**Income**` are normally instantiated by either `ExpenseCommandParser#parse(String args)` or `IncomeCommandParser#parse(String args)`, which"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "attempts to parse the various parameters supplied in `args` and return either a `**Expense**` or `**Income**` object. The following conditions will cause a `**ParseException**`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limerencee"
        },
        "content": "to be thrown by the parser:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Missing parameters"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Incorrect syntax (i.e. missing prefix, if it is required)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Illegal values in parameters (i.e. special characters and symbols entered for a integer-only field)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Multiple occurrences of parameters which only expects a single entry"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": "If the user input is incorrect due to any of the reasons above, the usage syntax will be shown."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Below is a given example on how a `**Transaction**` is added into `**THRIFT**` and how the back-end handles each step of the process:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Step 1. The user launches the application for the first time. THRIFT does not contain any other `**Transaction**` and the user is"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limerencee"
        },
        "content": "about to add their own. An empty transaction list is initialized."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/AddTransaction0.png[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Step 2. The user executes **add_expense n/Laksa v/3.50** to insert an `**Expense**` with `**Description**` set to \"Laksa\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limerencee"
        },
        "content": "and `**Value**` set to \"3.50\". The `**TransactionDate**` is set to the user\u0027s current system date in the form \"dd/mm/yyyy\"."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The input is now checked and an attempt to parse each parameter occurs:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `**Description**` is parsed by `AddTransactionCommandParser#parseTransactionDescription(ArgumentMultimap)`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `**Value**` is parsed by `AddTransactionCommandParser#parseTransactionValue(ArgumentMultimap)`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `**TransactionDate**` is instantiated by `AddTransactionCommandParser#parseTransactionDate()`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TIP: `**ArgumentMultimap**` is a class that stores all the parsed parameters taken from the user input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Since the user input is valid, the `**Expense**` is successfully created and inserted into the transaction list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The transaction list now contains 1 `**Transaction**` object."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/AddTransaction1.png[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Step 3. The user executes **add_income n/Bursary v/500 r/Awarded for doing well in school** to insert an `**Income**` with"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": "the `**Description**` set to \"Bursary\", `**Value**` set to \"500\" and `**Remark**` set to \"Awarded for doing well in school\"."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The `**TransactionDate**` is set to the user\u0027s current system date in the form \"dd/mm/yyyy\". The input is now checked in"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limerencee"
        },
        "content": "a similar fashion as in Step 2 except for:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `**Remark**` is parsed by `AddTransactionCommandParser#parseTransactionRemark(ArgumentMultimap)`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Again, since the input is valid, the `**Income**` is successfully added into the transaction list. The transaction list"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limerencee"
        },
        "content": "now contains 2 `**Transaction**` objects."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/AddTransaction2.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limerencee"
        },
        "content": "The following activity diagram summarizes what happens when the user executes a command to add a new `**Transaction**`:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".Activity diagram of adding a transaction into the transaction list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limerencee"
        },
        "content": "image::add-transaction/AddTransactionSequence.png[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Differentiating between `**Expense**` and `**Income**`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* **Alternative 1: (current choice):** Introduce a `**Transaction**` parent class which both `**Expense**` and `**Income**`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limerencee"
        },
        "content": "extends from."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Pros: Introduces polymorphism, easing references to either classes by simply referencing the `**Transaction**` object."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limerencee"
        },
        "content": "For example, using a single `**List\u003cTransaction\u003e**` instead of needing 2 separate lists `**List\u003cExpense\u003e**` and `**List\u003cIncome\u003e**`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Cons: Reduces the readability of the program as polymorphism can be confusing."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* **Alternative 2:** Keep `**Expense**` and `**Income**` classes separate, with each having their own specialized methods."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Pros: Maintains an intuitive design: `**Expense**` deducts money and `**Income**` increases money."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Cons: Incurs significant overhead and duplicated codes since it is likely that both `**Expense**` and `**Income**` will"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limerencee"
        },
        "content": "have very similar methods."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Managing how `**Value**` is stored and handled in `**Expense**` and `**Income**`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* **Alternative 1: (current choice):** Disallow negative `**Value**` in `**Expense**` object, only using positive amount"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limerencee"
        },
        "content": "for both `**Expense**` and `**Income**`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Pros: Removes the need to implement support for inserting negative `**Value**`. This is due to how `**Value**` constraints"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limerencee"
        },
        "content": "are applied when restoring `**THRIFT**` data from the data file."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Cons: Requires the developer to negate the `**Value**` whenever calculations are done with a `**Expense**` object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* **Alternative 2:** Allow only negative amount in `**Expense**` object and only positive amount in `**Income**` object"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Pros: Calculations become trivial: to get balance, sum up the entire `**List\u003cTransaction\u003e**`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** Cons: Overhead to parse user input to allow only a single negative symbol and no other symbols."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// tag::taguntag[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Tag/Untag feature"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "The **tag**/**untag** command performs modifications on existing `**Transaction**` entries. Due to polymorphism, both **Expense**` and `**Income**` objects extends the abstract class `**Transaction**`, and are treated the same way in the context of the **tag**/**untag** command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".A Class Diagram illustrating the implementation of Tags inside a Transaction"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/Polymorphism.png[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Due to the usage of  polymorphism, many of the driver functions in `THRIFT` uses `Transaction` for both `Expense`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "and `Income` objects. For example, when tagging a new `Expense`/`Income`, the `TagCommandParser` will treat them as the same object:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".An Sequence Diagram showing how the TagCommandParser is called"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/TagSequence.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "When a user enters a **tag**/**untag** command, it is parsed by the respective `TagCommandParser#parse(String args)` and `UntagCommandParser#parse(String args)` parsers and returns a `**TagCommand**` command object or a `**UntagCommand**` command object  respectively, which will be executed. For both commands, the following conditions will cause a `**ParseException**` to be thrown by their respective parsers:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Missing parameters"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Incorrect syntax (i.e. missing prefix, if it is required)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Illegal values in parameters (i.e. special characters and symbols entered for an integer-only field)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Multiple occurrences of parameters which only expects a single entry"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "If the user input is incorrect due to any of the reasons above, the corresponding usage syntax will be shown."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "The following is an example on how a `**Tag**` is added and removed from a `**Transaction**`, with details on the processes in the backend."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Step 1. The user launches the application with data from previous sessions. THRIFT contains only one `**Transaction**` containing no tags and the user is going to perform tagging and un-tagging operations on it."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/TagUntagTransactionWoTag.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Step 2. The user executes the command **tag i/1 t/Delicious** to tag the `**Transaction**` at `**Index**` 1 with the `**Tag**` \"Delicious\". The input is checked with a `**TagCommandParser**` parser and an attempt to parse each parameter occurs:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `**Index**` is parsed by `ParserUtil#parseIndex(String)`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `**Tag**` strings are parsed by `ParserUtil#parseTags(Collection\u003cString\u003e)` which calls `ParserUtil#parseTag(String)` iteratively for every string in the collection"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "TIP: `**ParserUtil**` is a class that contains useful functions for parsing the inputs from the user."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Tags that already exist inside the specified `**Transaction**` will be ignored, and if that results in no tags being updated, an error will be shown to the user."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Since the user input is valid, a `**TagCommand**` command object is created and executed. As a result, a copy of the `**Transaction**` object with the specified `**Tag**` inside replaces the original in the `**TransactionList**` at the same position."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/TagUntagTransactionWTag.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Step 3. The user realises that the `**Tag**` added was not appropriate. The user then executes the command **untag i/1 t/Delicious** to untag the `**Tag**` \"Delicious\" from the `**Transaction**` at `**Index**` 1. The input is now checked with a `**UntagCommandParser**` parser and similarly, an attempt to parse each parameter occurs."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `**Index**` is parsed by `ParserUtil#parseIndex(String)`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `**Tag**` strings are parsed by `ParserUtil#parseTags(Collection\u003cString\u003e)` which calls `ParserUtil#parseTag(String)` iteratively for every string in the collection"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Tags that do not exist inside the specified `**Transaction**` will be ignored, and if that results in no tags being updated, an error will be shown to the user."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Again, since the user input is valid, a `**UntagCommand**` command object is created and executed. As a result, a copy of the `**Transaction**` object without the specified `**Tag**` replaces the original in the `**TransactionList**` at the same position."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/TagUntagTransactionWoTag.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "The following activity diagrams summarises what happens when the user executes a command to **tag** or **untag** a `**Transaction**`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".Activity Diagram of the Tagging process"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/TagActivity.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".Activity Diagram of the Un-tagging process"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::tag-untag/UntagActivity.png[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Mutability of `**Transaction**` objects"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* **Alternative 1: (current choice)**: Create a copy of the `**Transaction**` object with modified tags and replace the original in the `**TransactionList**`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Pros: Adheres to the Open-Closed principle of the SOLID design principles, guarantees the resultant `**Transaction**` to be as expected and not modified incorrectly during the **tag**/**untag** process."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Cons: Creates a copy of the `**Transaction**` during the **tag**/**untag** process and increases the space complexity of the process."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* **Alternative 2**: Modify the `**Transaction**` object directly to modify tags."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Pros: Modifies the `**Transaction**` object in place, thus the space complexity of the process is constant."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Cons: Violates the Open-Closed principle of the SOLID design principles, the `**Transaction**` object can be modified incorrectly during the **tag**/**untag** process."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Alternative 1 was chosen as we want to ensure the correctness of the **tag**/**untag** process."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Uniqueness of `**Tag**` objects within a `**Transaction**`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* **Alternative 1:** Do not check if the `**Tag**` objects exist(s) within a `**Transaction**` when adding `**Tag**` objects and implicitly allow duplicates."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Pros: Results in a simpler implementation of **tag** command, as there is no need to check for potential duplicates."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Cons: Makes each tag less meaningful as they are not longer unique."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* **Alternative 2: (current choice)** Check if the `**Tag**` objects exist(s) within a `**Transaction**` when adding `**Tag**` objects, explicitly prevent duplicates."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Pros: Makes each tag more meaningful as they are unique."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** Cons: Results in a more complex implementation of the **tag** command, as there is a need to check for potential duplicates."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end:taguntag[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Updating transactions"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The **update **functionality modifies details of a specified `**Transaction**` in the existing list and saves modifications to the external storage file."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "**Update** mechanism utilizes \u003c\u003cDesign-Logic, *Logic*\u003e\u003e operations with the `**UpdateCommand**` class in place of `**Command**`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The following methods are concrete implementations for **update** operations:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* `UpdateCommandParser#parse()` - Parses the user\u0027s input and creates an `**UpdateCommand**` to execute the command."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* `UpdateCommand#execute()` - Modifies the `**Transaction**` in `**Model**` with new details and returns a `**CommandResult**` (\u003c\u003cDesign-Logic, Step 4 of Logic\u003e\u003e)."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* `TransactionList#setTransactionWithIndex()` - Sets the modified `**Transaction**` to its correct position in the existing `**TransactionList**`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- This `**TransactionList**` is wrapped in `**Thrift**` and its `setTransactionWithIndex()` is called through `Thrift#setTransactionWithIndex()`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- `Thrift#setTransactionWithIndex()` is exposed in the `**Model**` interface as `Model#setTransactionWithIndex()`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The following Object Diagram illustrates objects involved in the execution of **update** command:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Existing objects when executing **update** on an `**Income**`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateObjectDiagram.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Example of usage"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Given next is an example usage scenario for updating a transaction and explanation of how the **update** mechanism behaves at each step:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Step 1. The user starts up the application with an initial list loaded from external storage file. The diagram here depicts the example list used throughout this scenario."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":figure-caption!:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Example list on startup"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep1.png[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Step 2. The user inputs **update i/1 n/Government Bursary v/600** to update the 1st transaction\u0027s name to \"Government Bursary\" and value to \"600\". Input is parsed by `UpdateCommandParser#parse` which creates an `**UpdateCommand**`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "NOTE: The 1st transaction specified here is an `**Income**`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Example user input for update command"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep2.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Step 3. `UpdateCommand#execute` creates a new transaction that reflects the changes and gets the index of current transaction to be updated."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Creation of new updated transaction in `UpdateCommand#execute()`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep3.png[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Step 4. `UpdateCommand#execute` replaces original transaction in the list with the updated transaction."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep4Part1.png[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep4Part2.png[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Replacement of original transaction with updated transaction in `UpdateCommand#execute()`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateCommandDiagrams/UpdateStep4Part3.png[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution observed by user"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "The following activity diagram gives an overview of what the user observes when executing **update** comnand"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":figure-caption: Figure"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".Activity Diagram for execution of update command"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "image::UpdateActivityDiagram.png[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Modifying details of a transaction"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* **Alternative 1 (current choice)**: Replace the original transaction with a new updated transaction."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Pros: Easy to implement."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Cons: Incurs overhead when creating new instance of `**Transaction**`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* **Alternative 2**: Modify the transaction directly using setter methods."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Pros: Easy to implement and highly efficient."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "- Cons: Allowing modification of transactions violates immutability principle."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "**Alternative 1 chosen** to maintain better coding practices and keep transactions immutable for the entire project."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Undo/Redoing undoable commands"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*Undo* command allows the user to revert `**THRIFT**` to its previous state when they have made a mistake. *Redo* command does"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lightz96"
        },
        "content": "the opposite of *undo* command, useful for when the user wishes to execute the command instead."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The underlying data structure of the undo and redo feature is implemented in `**PastUndoableCommands**`. It consists of two stacks:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`UndoStack` and `RedoStack`. It provides the following methods:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `PastUndoableCommands#addPastCommand(Undoable undoable)` -- Keeps track of the undoable commands."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `PastUndoableCommands#getCommandToUndo()` -- Retrieves undoable commands from `UndoStack` for user to perform undo."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `PastUndoableCommands#hasUndoable()` -- Checks if there are any commands to perform undo."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `PastUndoableCommands#getCommandToRedo()` -- Retrieves undone commands from `RedoStack` for user to perform redo."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `PastUndoableCommands#hasRedoCommand()` -- Checks if there are any commands to perform redo."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The function wrappers to these methods are `Model#keepTrackCommands(Undoable command)`, `Model#getPreviousUndoableCommand()`, `Model#hasUndoableCommand()`,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`Model#getUndoneCommand()` and `Model#hasUndoneCommand()` respectively."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lightz96"
        },
        "content": "NOTE: Undoable commands are *add_expense*, *add_income*, *clone*, *delete*, *tag*, *untag*, *update*."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Every undoable command will be stored in the `UndoStack` once it is executed. It will only be stored in `RedoStack` when the user executed"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*undo*."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The below scenario illustrates how undo and redo feature works:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 1. The application is launched with an empty transaction list. Both `UndoStack` and `RedoStack` are empty upon initializing `**PastUndoableCommands**`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/initialUndoRedo.PNG[338, 300]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 2. The user executes *add_expense n/Laksa v/4* to add Laksa to the `**TransactionList**`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The `**LogicManager**` invokes the method `Model#keepTrackCommands(Undoable undoable)` to keep track of the `**AddExpenseCommand**` object"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lightz96"
        },
        "content": "that was used to add Laksa. This `**AddExpenseCommand**` object is pushed into `UndoStack`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/addExpense.PNG[357, 300]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 3. The user executes *update i/1 v/3.50* to update the cost of the Laksa to $3.50."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The `**LogicManager**` calls the method `Model#keepTrackCommands(Undoable undoable)` to keep track of the `**UpdateCommand**` object"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lightz96"
        },
        "content": "that was used to update the cost of the Laksa. This `**UpdateCommand**` object is pushed into `UndoStack`."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/updateExpense.PNG[341, 300]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 4. The user executes *undo* to revert the cost of the Laksa to $4.00."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The `**UndoCommand**` invokes the method `Model#getPreviousUndoableCommand()` to retrieve the `**UpdateCommand**` object."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`**UpdateCommand**` is popped from `UndoStack` and pushed into `RedoStack` before being returned to the callee."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/undo.PNG[320, 300]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 5. The user executes *undo* to remove Laksa from `**TransactionList**`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The `**UndoCommand**` invokes the method `Model#getPreviousUndoableCommand()` to retrieve the `**AddExpenseCommand**` object."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`**AddExpenseCommand**` is popped from `UndoStack` and pushed into `RedoStack` before being returned to the callee."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/undo2.PNG[326, 300]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The sequence diagram shows how *undo* work for *add_expense* command:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".Sequence diagram of how *undo* command is applied at the back-end"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/UndoAddExpenseSequenceDiagram.png[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Step 6. The user executes *redo* to add Laksa back to `**TransactionList**`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The `**RedoCommand**` invokes the method `Model#getUndoneCommand()` to retrieve the `**AddExpenseCommand**` object."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lightz96"
        },
        "content": "`**AddExpenseCommand**` is popped from `RedoStack` and pushed into `UndoStack` before being returned to the callee."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/redo.PNG[325, 300]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lightz96"
        },
        "content": "NOTE: All commands stored in `RedoStack` are purged when the user executes another undoable command."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The sequence diagram shows how *redo* work for *add_expense* command:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".Sequence diagram of how *redo* command is applied at the back-end"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/RedoAddExpenseSequenceDiagram.png[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lightz96"
        },
        "content": "The following activity diagram shows what happens if the user executes a command:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".Activity diagram of the command execution."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::UndoAndRedo/RunCommandActivityDiagrams.png[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure used to keep track of undoable command"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* **Alternative 1 (current choice):** Use two stacks. One stack stores the command to undo while the other stack stores the command to redo."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lightz96"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lightz96"
        },
        "content": "** Cons: Need to carefully manage the two stacks. For example, you need to pop the command from one stack and push it into another stack."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* **Alternative 2:** Use an arraylist and a pointer to indicate the next command to undo."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lightz96"
        },
        "content": "** Cons: Need to carefully manage the pointer. For example, you need to ensure that the pointer stays within the size of an arraylist."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "// tag::Filtering transactions[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Filtering transactions"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "The *List* command allows the user to bring up a list of `**Transactions**`, and filter it by month or by its tags."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "This feature is implemented by using a `**Predicate\u003cTransaction\u003e**` to filter the `**Transactions**` by month or tags."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "`**ListCommand**` is instantiated by `ListCommandParser#parse(String args)`,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "which attempts to parse the various parameters supplied in `args` and return a `**ListCommand**` object."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "The following conditions will cause a `**ParseException**` to be thrown by the parser:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ". Incorrect syntax (i.e. having a prefix that does not refer to month nor tag)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ". Illegal values in parameters (i.e. special characters and symbols entered for a integer-only field)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "If the user input is incorrect due to any of the reasons above, the usage syntax will be shown."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "The scenario below shows an example of how the feature works:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Step 1. The user executes *list m/jan* to filter the list to bring up transactions of January."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Step 2. The `**ListCommandParser**` will parse the arguments using the method `ListCommandParser#parse(String args)`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Step 3. Since user input is correct and the arguments have been parsed, a new `**ListCommand**` object will be created by the"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "`**ListCommandParser**`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Step 4. This `**ListCommand**` object will contain a `**Predicate**` which is used to filter through each `**Transaction**`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Step 5. The final list of filtered transactions will be brought up."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "The activity diagram below will give an overview of what is happening when the command is executed."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".Activity diagram of the command execution."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lightz96"
        },
        "content": "image::list/ListActivityDiagram.png[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using `**Predicate**` to improve extendability of the feature in the future"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* **Alternative 1 (current choice):** Create a new `**Predicate**` based on the arguments each time."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** Pros: The filter feature could be easily improved in the future to further accommodate new arguments other than month and tag."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** Cons: Not as easy to implement."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* **Alternative 2:** Use a fixed `**Predicate**` written beforehand to filter the list for each argument."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** Pros: Straightforward to implement, a specific `**Predicate**` can be used for the specific argument."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** Cons: Not easily extendable as in the future if we want to filter by new arguments, we will have to write a new `**Predicate**` for each argument."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "// end::Filtering transactions[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//\u003d\u003d\u003d [Proposed] Data encryption"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "limerencee"
        },
        "content": "We are using `**java.util.logging**` package for logging. The `**LogsCenter**` class is used to manage the logging levels and logging destinations:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* The `**Logger**` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* The log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `SEVERE` : Detected a critical problem which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `WARNING` : Exercise caution if continuing"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `INFO` : Display information showing the noteworthy actions by the application"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `FINE` : Display details that are usually not noteworthy but may be useful in debugging e.g. print the actual list"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "limerencee"
        },
        "content": "instead of just its size"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: _config.json_)."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Dev ops"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Product scope"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* money-conscious NUS students"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* number of transactions are significant and needs to be managed"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* apps are preferred on desktop over other platforms"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* typists that type quickly and prefers typing over mouse input"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* CLI usage does not pose any discomfort"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* provides a more effective financial management compared to typical mouse/GUI driven app"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* plans for future spending are made easier"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* congregates all info regarding fees and costs in a single location"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d User stories"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,\u003c25%,\u003c30%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my spending"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances better"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|movie addict who watches every movie that comes out"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of my movie ticket and snack expenses"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|have enough money to watch the movies I want."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|computing student who has many software subscriptions"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the recurring expenses tracker"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my subscription payments"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student staying in the Halls with many expenses"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see all my expenses in a central spot"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of all the different expenses"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS international student"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of my travelling and spending expenses"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|have enough money when I travel around Singapore"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|someone who loves travelling"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the tracker to help me plan for my travelling budgets"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|fully enjoy my time on vacation"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|SOC student always on my laptop"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|write down my expenses"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|really quickly due to the command-line nature"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who uses both PayLah and cash interchangeably"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|tag my expenses"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of both expenses"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student who loans money to a lot of friends"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the debt tracker to track and collect my interest"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student accepting financial aid"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker report"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep within my budget"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who borrows money frequently from other people"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the debt tracker to remember who I owe money to"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS international student"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to keep track of recurring utility expenses such as phone bills"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|plan a suitable budget"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|phone junkie"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|set aside enough money for purchasing the latest phones and accessories"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is conscious about money"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to view my monthly expenditure"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|know how much I had spent this month"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|female buying clothes frequently"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track exactly how much I spend on clothes each month using the tracker and filter"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|don’t exceed my clothes budget"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who likes to buy games online"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker funds left"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see if I am able to pay my school fees"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|mobile game addict who makes a lot of in-app purchases"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expenses tracker report"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances and to sustain my essential expenses"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that frequently takes on part-time jobs"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use finance planner to track my income"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|frugal NUS student"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the expense tracker report"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|optimise my finances"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|social animal frequently going to clubs and bars"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|plan out my expenses"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|moderate my spending on social activities and keep up my balanced lifestyle"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that stays in Hall"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|add my expenses to the expense tracker"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track funds contributed to hall activities"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who wants to save more money"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to compare my past expenditure with my current expenditure"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|know if I had spent more money or saved money this month"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|hall resident who eats supper daily"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep track of what I have been eating and how much I usually spend on supper"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|don\u0027t overspend on each supper"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|child of wealthy parent"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|easily delete previous expenses"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|properly count my expenditure should my parents decide to help cover some parts of it"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|careless student"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|make some changes to the information"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|ensure that the application displays the correct information"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who loves to keep track of finance"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|view all the possible commands"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|fully utilize the functionalities offered by the application"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student that wants to allocate less money to material goods and more to food"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|analyse the spending by category and adjust accordingly"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|on-campus resident who likes to cook my own food"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my grocery bills"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|moderate the cost and frequency of grocery shopping"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|motor enthusiast"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the planner to set aside funds"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|keep purchasing vehicle parts, modifications and accessories and keep pursuing my hobby"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who has a bad habit of spending a lot on material goods"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|see which goods are taking up most of my monthly budget"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|better manage my finances"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|Hypebeast that spends a lot of money on branded goods"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|look at my recent spending percentage"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|manage my finances and keep my budget"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is going for exchange"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|make sure that I bring enough foreign currency"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|avoid using my credit card"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who is currently in a relationship"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|the tracker to help me set aside enough money for both my partner and I"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|get married soon"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|student who always lends money to people"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be able to send receipt to my loanee"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|claim back my money"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|dota addict who always buy arcanas and battle pass levels"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|track my spending"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|afford to buy more battle pass levels"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|active youth in need of sustenance within a limited budget"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|get recommendations for food prices"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|be healthy physically and financially"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|shopaholic"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|use the finance planner to find discounts"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|spend less on my shopping"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|NUS student with stingy and over-controlling parents"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|send my expense report for the month to my parents to view easily"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lightz96"
        },
        "content": "|avoid them asking me what I have been spending on all the time"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|NUS student whose transaction details may be inaccurate in retrospect due to cashbacks or receipt discrepancies"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|modify transactions in my list"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|transactions have the most updated and accurate information"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|NUS student with completely or almost identical repeated transactions"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|make copies of such transactions"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|more convenient to add them instead of having to type them out fully each time"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Use cases"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lightz96"
        },
        "content": "(For all use cases below, the *System* is the `THRIFT` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Setting monthly budget"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to set their monthly budget to a certain amount."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes the request and sets the amount as the monthly budget."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "limerencee"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the monthly budget is not updated."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "limerencee"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Add an expense/income transaction"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to add a new expense or income into the records."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes the request and adds the expense/income into the transactions list."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transactions list is not updated."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a transaction"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to delete an existing transaction from the records."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes the request and removes the transaction from the transactions list."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "limerencee"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* 1a. The command or transaction specified by the user is not valid."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "limerencee"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transactions list is not updated."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Use case: Update a transaction\u0027s details"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. User requests to update a transaction\u0027s name, cost or tags."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "2. THRIFT processes the request, updates the specified details in the transactions list and informs user of what has been changed."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* 1a. Some parameters specified by the user are not valid."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and does not update details for invalid parameters."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Clone a transaction"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "1. User requests to clone a transaction."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "2. THRIFT processes the request and adds an identical transaction to the transactions list."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* 1a. The index parameter specified by the user is not valid."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and does not update the transactions list."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Show help window"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lightz96"
        },
        "content": "1. User requests to view to syntax of a specific command."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "lightz96"
        },
        "content": "2. THRIFT displays the syntax of the requested command."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* 1a. The command specified by the user is not valid."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lightz96"
        },
        "content": "** 1a1. THRIFT displays an invalid command error to user."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Use case: List monthly transactions"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "1. User requests to view list of transactions for a specific month."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "2. THRIFT displays transactions of that month."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Tag a transaction"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d *Extensions*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to tag a specific transaction."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and adds the tag to the specific transaction."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* 1a. The command specified by the user is not valid."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "** 1a1. THRIFT displays an invalid command error to user."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Untag a transaction"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to untag a specific transaction."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and removes the tag from the specific transaction."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transaction is not updated."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Use case: Convert a transaction"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to convert the currency of a specific transaction to a new currency."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and updates specific transaction with the new value in the new currency."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user and the transaction is not updated."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Use case: Convert a value"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. User requests to convert a value in SGD to a specific currency."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. THRIFT processes the request and displays the new value in the new currency."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* 1a. The parameters specified by the user are not valid."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "** 1a1. THRIFT displays an invalid parameter error to the user."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Use case: Find a keyword in `**Transaction\u0027s  Remark**` and `**Description**` field"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. User requests to search for a keyword in THRIFT."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. THRIFT processes its currently saved entire transaction list to look for matches."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "limerencee"
        },
        "content": "3. THRIFT found matches and display the results at the `**TransactionListPanel**` screen."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "limerencee"
        },
        "content": "_Use case ends_"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Non functional requirements"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". THRIFT should be able to run on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has `Java 11` installed."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". THRIFT should be able to hold up to 250 transactions without a noticeable drop in performance for typical usage."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". A user with above average typing speed for \u003c\u003cregular-english-text, regular English text\u003e\u003e (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should be able to run with or without internet connection."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should work for a single user only."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". THRIFT should not require user to install."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Features implemented should be testable using manual testing and automated testing."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[horizontal]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[thrift]] THRIFT::"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for \"Terminal-input Human Readable Interactive Finance Tracker\". It is the application this developer guide is for."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[nfr]] NFR::"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for \"Non-functional Requirement\""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for commonly used Operating Systems (OS) such as Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[regular-english-text]] Regular English Text::"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for text with ordinary english grammar structures and vocabulary generally used by the public."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "It excludes syntax related to programming and \u003c\u003csystem-administration, system administration\u003e\u003e."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[system-administration]] System Administration::"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Stands for the field of work in which someone manages one or more systems, be they software, hardware, servers or workstations"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "with the goal of ensuring the systems are running efficiently and effectively."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Instructions for manual testing"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Launching and shutting down"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Setting the monthly budget"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Setting the monthly budget to be a certain amount."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `budget v/1000 d/10/2019` +"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: The monthly budget for `10/2019` is now set to $`1000`. Details of the new monthly budget is shown in the status message. The monthly balance in the GUI is re-calculated to reflect the updated budget."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `budget` +"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: The monthly budget is not updated. Error details shown in the status message (missing `d/MONTH` and `v/VALUE` parameters). Status bar remains the same."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `budget v/10000000 d/10/2019` +"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: The monthly budget is not updated. Error details shown in the status message (`v/VALUE` input exceeds constraint of 1 million). Status bar remains the same."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding a transaction"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Adding a transaction, be it income or expense."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_expense n/Bought a pair of Apple Earpods v/350` +"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: A new expense transaction is added into the list. Details of the expense transaction shown in the status message. The date string is automatically saved into the transaction list."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_income n/Awarded bursary prize v/500` +"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: A new income transaction is added into the list. Details of the income transaction shown in the status message. The date string is automatically saved into the transactions list."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `add_expense n/Lunch in school` +"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: No transaction is added. Error details shown in the status message (missing `v/VALUE` parameter). Status bar remains the same."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Deleting a transaction while all transactions are listed"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. Multiple transactions in the list."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `delete i/1` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "   Expected: First transaction is deleted from the list. Details of the deleted transaction shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `delete i/0` +"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "   Expected: No transaction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Updating a transaction\u0027s details"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ". Updating a transaction\u0027s details and reflecting changes in the list."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/1 n/Fried Rice` +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: Details of the updated transaction and original transaction shown in status message. Displayed list scrolls to updated item which reflects the changes."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `update i/1 v/20` +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: Details of the updated transaction and original transaction shown in status message. Displayed list scrolls to updated item which reflects the changes."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `update i/1 n/Fried Rice v/20 t/Lunch t/Food` +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: Details of the updated transaction and original transaction shown in status message. Displayed list scrolls to updated item which reflects the changes."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update i/1 z/Calamari` +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update firstTransaction` +"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `update` +"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d\u003d Cloning a transaction"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ". Creating a duplicate of a transaction."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. At least one transaction in the list."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone i/1` +"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: New transaction identical to first transaction in the list added to the bottom of the list. Details of the cloned transaction shown in the status message. Date string for new transaction is automatically saved into the transaction list."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No transaction is cloned. Error details shown in status message."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone firstTransaction` +"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ".. Test case: `clone` +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d Listing the transactions"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ". Listing out transactions by month or by tag."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Prerequisites: At least one transaction in the list."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list` +"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The entire list of transactions will be shown."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list m/Jan` +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The list of transactions for January will be shown."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ".. Test case: `list m/Jan t/Food` +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "   Expected: The list of transactions related to food for January will be shown."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Tagging a transaction"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Tagging a transaction and reflecting changes in the list."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `tag i/1 t/EXPENSIVE` +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the tagged transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag i/INVALID_INDEX` t/VALID_TAG` where `INVALID_INDEX` is a number less than 1 or more than list size and VALID_TAG is a valid tag. +"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag firstTransaction` +"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `tag` +"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Untagging a transaction"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Untagging a transaction and reflecting changes in the list."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/1 t/FOOD` +"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the untagged transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/INVALID_INDEX t/VALID_TAG` where `INVALID_INDEX` is a number less than 1 or more than list size and VALID_TAG is a valid tag. +"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag i/VALID_INDEX t/NOT_INSIDE_TAG` where `VALID_INDEX` is a valid transaction index and NOT_INSIDE_TAG is not inside the transaction specified. +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag firstTransaction` +"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `untag` +"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Converting a transaction"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Converting a transaction\u0027s currency and reflecting changes in the list."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command. The first transaction is `1. [-] Laksa ($10.50) [Lunch][Food]`."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/USD i/1` +"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Details of the converted transaction shown in status message. Listing the transaction reflects changes."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/USD i/INVALID_INDEX` where `INVALID_INDEX` is a number less than 1 or more than list size. +"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert to/INVALID_CURRENCY i/VALID_INDEX` where `INVALID_CURRENCY` is not a supported currency and `VALID_INDEX` is a valid transaction index. +"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert firstTransaction` +"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ".. Test case: `convert` +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: No changes. Error details shown in status message."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d Converting a value"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ". Converting a values\u0027s currency and displaying it"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `convert from/SGD to/USD v/VALUE`. +"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Original value and converted value displayed to the user."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `convert from/SGD to/INVALID_CURRENCY v/VALUE` where `INVALID_CURRENCY` is not a supported currency. +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Error details shown in status message."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `convert from/INVALID_CURRENCY to/USD v/VALUE` where `INVALID_CURRENCY` is not a supported currency. +"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "   Expected: Error details shown in status message."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Finding a transaction"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "limerencee"
        },
        "content": ". Looking up transactions that have the supplied keywords in its `**Remark**` and `**Description**` fields."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Test case: `find Apple`. +"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Expected: Transactions with the word \u0027Apple\u0027 in its `**Remark**` or `**Description**` field will be displayed to the user."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Undoing the previous command"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Undoing previous command and reflecting changes in the list"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "limerencee"
        },
        "content": "... `add expense n/Chicken rice v/3`"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the expense spent on chicken rice is removed from the list."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "limerencee"
        },
        "content": "... `add income n/Salary v/2500`"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the income received from salary is removed from the list."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `delete 1`"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: First transaction removed from the list is restored back to its original position."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: (Assuming that the first transaction is `1. [-] Chicken rice ($3.00)`)"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "... `update i/1 n/Fried Rice`"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: The description of the first transaction is changed back to chicken rice."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Newly cloned transaction is removed from the list."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `tag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Lunch tag is removed from the first transaction in the list."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Lunch tag is added back to the first transaction in the list."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `list`"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to undo."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Redoing the undone command"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "lightz96"
        },
        "content": ". Redoing undone command and reflecting changes in the list"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Prerequisites: List all transactions using the `list` command"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "limerencee"
        },
        "content": "... `add expense n/Laksa v/3`"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the expense spent on Laksa is added back to the list."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "limerencee"
        },
        "content": "... `add income n/bursary v/2500`"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Transaction regarding to the income received from bursary is added back to the list."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `delete i/1`"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: First transaction removed from the list."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: (Assume that the first transaction is `1. [-] Chicken rice ($3.00)`)"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "... `update i/1 n/Fried Rice`"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: The description of the first transaction remains as fried rice."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Newly cloned transaction is added back to the list."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `tag i/1 t/FOOD`"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Food tag is added back to the first transaction in the list."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/FOOD`"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: Food tag is removed from the first transaction in the list."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `untag i/1 t/LUNCH`"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `undo`"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `clone i/1`"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to redo."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `list`"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "lightz96"
        },
        "content": "... `redo`"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "lightz96"
        },
        "content": "--"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "lightz96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected: No changes. Message shown in the status message indicating that there are no available commands for user to redo."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Showing help window"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   Expected: A new pop-up help window is displayed."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".. Test case: `help delete` +"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   Expected: Syntax of the `delete` command is shown in the status message."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".. Delete the data file at `.\\data\\thrift.json`."
      }
    ],
    "authorContributionMap": {
      "limerencee": 232,
      "lightz96": 465,
      "krusagiz": 239,
      "lye-jw": 153,
      "kensonoenqh": 67,
      "-": 277
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d THRIFT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "image::logo/logo.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "By: `Team THRIFT`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT is for money-conscious NUS students who wish to track their spending, in order to make better informed decisions when it comes to saving money. Maintain records of your daily incoming and outgoing transactions and constantly keep track of your spending and income! THRIFT is optimized for those who prefer to work with a Command Line Interface (CLI) while still enjoying the benefits of having a Graphical User Interface (GUI). If you want a simple, no-frills finance tracker, look no further than THRIFT!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "2. Download the latest THRIFT.jar https://github.com/AY1920S1-CS2103T-W12-2/main/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your THRIFT application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "4. Double-click the file to start the app, the GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it. e.g. typing `help` and pressing `Enter` will open the help window."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "6. Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Apple Airpods v/200`: adds an expense called `Apple Airpods` which cost $`200`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_income n/Bursary Award v/350`: adds an income called `Bursary Award` which incremented your budget by $`350`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `delete i/1`: deletes the 1st transaction in the current list shown in the UI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d Features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Command format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Words in `UPPER_CASE` are parameters to be supplied by the user e.g. `expense n/EXPENSE_NAME v/VALUE`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items in square brackets `[ ]` are optional e.g. `n/EXPENSE_NAME [t/TAG]` can be used as `n/Laksa`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items in round brackets `( )` with `|` are mandatory parameters where a selection is needed e.g. `tag (add | delete)` means you need to input either `tag add` or `tag delete`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Items with `...` after them can be used multiple times including zero times e.g. `[t/TAG] …` can be used as ` ` (i.e. 0 times), `t/Food t/Dinner` etc."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   Parameters can be in any order e.g. if the command specifies `n/EXPENSE_NAME v/VALUE`, `v/VALUE n/EXPENSE_NAME` will achieve the same outcome."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[[BudgetTag]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Setting monthly budget: `budget`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `budget v/VALUE d/MONTH`, where `MONTH` are digits in `MM/YYYY`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `budget v/1000 d/10/2019`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New budget: +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Amount: $1,000.00 +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Month: 10/2019`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[ExpenseTag]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `add_expense`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `add_expense n/EXPENSE_NAME v/VALUE [r/REMARKS] [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TIP: The default currency is in Singapore Dollars (SGD). You are recommended to `convert` foreign currencies to SGD before adding the value as the `VALUE`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Laksa v/10.50 t/Lunch t/Food`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_expense n/Travel v/53 r/Went to Johor Bahru t/Travel`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New expense added: [-] Laksa ($10.50) Date: 12/10/2019 Remarks:  Tags: [Lunch][Food]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New expense added: [-] Travel ($53.00) Date: 12/10/2019 Remarks: Went to Johor Bahru Tags: [Travel]`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[IncomeTag]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Adding an income: `add_income`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `add_income n/INCOME_NAME v/VALUE [r/REMARKS] [t/TAG]...`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_income n/Allowance v/1000 t/Monthly`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `add_income n/Bursary v/500 r/Did well in previous semester. t/Award`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New income added: [+] Allowance ($1,000.00) Date: 12/10/2019 Remarks:  Tags: [Monthly]`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `New income added: [+] Bursary ($500.00) Date: 12/10/2019 Remarks: Did well in previous semester. Tags: [Award]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[DeleteTag]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction: `delete`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Format: `delete i/INDEX`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Deletes the transaction at the specified `INDEX`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `delete i/1`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `Deleted Transaction: [-] Laksa ($10.50) Date: 12/10/2019 Remarks:  Tags: [Lunch][Food]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[UpdateTag]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Updating a transaction’s details: `update`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Format: `update i/INDEX PREFIX_LETTER/UPDATED_DETAILS ...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Updates the transaction\u0027s details at the specified `INDEX`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** `INDEX` refers to the index number currently shown in the UI, and must be a *positive integer*."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* `PREFIX_LETTER` specifies type of detail to be updated, e.g. `n/` for name."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `UPDATED_DETAILS` are the new details of type corresponding to `PREFIX_LETTER` that the transaction is to be updated with."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* Multiple detail types can be updated at once."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `update i/1 n/Curry Laksa`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `update i/1 n/Asam Laksa v/11 r/My first time trying! t/Dinner t/Food`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Expected output: +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "NOTE: Assume 2nd command occurs after 1st"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `Updated Transaction: [-] Curry Laksa ($10.50) Date: 12/10/2019 Remarks:  Tags: [Lunch][Food]` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "`Original: [-] Laksa ($10.50) Date: 12/10/2019 Remarks:  Tags: [Lunch][Food]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*   `Updated Transaction: [-] Asam Laksa ($11.00) Date: 12/10/2019 Remarks: My first time trying! Tags: [Dinner][Food]` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "+"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "`Original: [-] Curry Laksa ($10.50) Date: 12/10/2019 Remarks:  Tags: [Lunch][Food]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "//tag::tag[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[TagTag]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Tagging a transaction: `tag`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Command Syntax:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`tag i/INDEX t/TAG_NAME...`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Tags the transaction at the specified `INDEX` with `TAG_NAME` (can be more than one)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. You want to tag the entry displayed at index 8 with the tag _Debt_."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. You run `tag i/8 t/Debt`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "NOTE: Assume entry at index 8 of the list displayed on the GUI is +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`[-] Student Loan ($12,000.00) Date: 10/10/2019 Remarks:  Tags:`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Updated Transaction: [-] Student Loan ($12,000.00) Date: 10/10/2019 Remarks:  Tags: [Debt]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Original: [-] Student Loan ($12,000.00) Date: 10/10/2019 Remarks:  Tags:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::tag[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// tag::untag[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[UntagTag]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Untagging a transaction: `untag`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Command Syntax:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`untag i/INDEX t/TAG_NAME...`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Untags `TAG_NAME` (can be more than one) from the transaction at the specified `INDEX`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` refers to the index number currently shown in the UI (after filtering, if any)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Example:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. You want to untag the tag _Important_ from the entry displayed at index 7."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. You run `untag i/7 t/Important`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "**Expected output:**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "NOTE: Assume entry at index 7 of the list displayed on the GUI is +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`[-]  DoTA Arcanas ($49.00) Date: 10/10/2019 Remarks:  Tags: [Game][Important]`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Updated Transaction: [-]  DoTA Arcanas ($49.00) Date: 10/10/2019 Remarks:  Tags: [Game]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Original: [-]  DoTA Arcanas ($49.00) Date: 10/10/2019 Remarks:  Tags: [Game][Important]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::untag[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// tag::convert[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[[ConvertTag]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Converting currency: `convert`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d  Command Syntax"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "`convert [v/VALUE] c/CURRENCY...`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* Converts the `VALUE` to `CURRENCY` if one of each is specified."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* If no `VALUE` is specified, the value of 1.00 with be used."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* If more than one `CURRENCY` is present, the first one will be used as a base and the rest as target currencies"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* `VALUE` must be positive."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "1. You want to convert SGD1000 to USD."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "2. You run `convert v/1000 c/USD`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "**Expected output:**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Converting from SGD1,000.00"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "To USD: USD726.28"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "...."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "// end::convert[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// tag::clone[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[CloneTag]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d Cloning a transaction: `clone`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Format: `clone i/INDEX`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* Clones (creates a duplicate of) a `Transaction` entry."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* Clone produced is added to a new index at the bottom of the list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `clone i/1`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Expected output: +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "NOTE: Assume entry at index 1 is `[-] Laksa ($10.50) Date: 18/10/2019 Remarks: Unique taste Tags: [Lunch][Food]` and there are no other entries."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "*   `Cloned transaction: [-] Laksa ($10.50) Date: 18/10/2019 Remarks: Unique taste Tags: [Lunch][Food]`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "// end::clone[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[UndoTag]]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Undoing the previous undoable command: `undo`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lightz96"
        },
        "content": "NOTE: Undoable commands are commands that modify the data of THRIFT application."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".List of undoable commands[[Undoable]]:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cExpenseTag, add_expense\u003e\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cIncomeTag, add_income\u003e\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cDeleteTag, delete\u003e\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cUpdateTag, update\u003e\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cCloneTag, clone\u003e\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cTagTag, tag\u003e\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* \u003c\u003cUntagTag, untag\u003e\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_expense n/Laksa v/10.50 t/Lunch t/Food` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_income n/Allowance v/1000 t/Monthly` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `list` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Deletes the expense spent on Laksa from THRIFT."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Deletes the allowance income from THRIFT."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[RedoTag]]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Redoing the undone command: `redo`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Redo the \u003c\u003cUndoable, undoable command\u003e\u003e that was previously undone by the user."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* `add_expense n/Laksa v/10.50 t/Lunch t/Food` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `undo` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  `redo`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Adds the expense spent on Laksa back to THRIFT."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "[[ListTag]]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d\u003d List expenses for the month: `list`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Format: `list [m/MONTH] [t/TAG]`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*  `list`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "*  `list m/Jan t/Food`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* Returns a list of all expenses for the current month."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* Returns a list of all food expenses for the specified month."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[HelpTag]]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Displaying help page: `help`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* `help delete`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Displays a detailed list of information regarding all the THRIFT commands."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lightz96"
        },
        "content": "* Returns syntax of `delete` command."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[[ExitTag]]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Exiting THRIFT application: `exit`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Generating an external report `[coming in v2.0]`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limerencee"
        },
        "content": "With this feature, you will be able to save your monthly budget report into an external file for your record purposes. The report will clearly state your expenditure, income and remaining budget for the month."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Recommending dining options based on budget `[coming in v2.0]`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Depending on your remaining budget and the remaining days to the end of the month, THRIFT will recommend you dining places in NUS which will suit your budget. For example, if you are running low on funds, you might get recommended to travel to the Arts canteen to eat since there are really cheap options there."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d\u003d Encrypting THRIFT data `[coming in v2.0]`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limerencee"
        },
        "content": "If you are especially conscious about having your data spied on, this function will definitely ease your worries. With encryption enabled, your data will not be known to the intruder should they steal your THRIFT application data."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limerencee"
        },
        "content": "*Q*: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lightz96"
        },
        "content": "*A*: Runs the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous THRIFT application."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d Command summary"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cBudgetTag, *Budget*\u003e\u003e: `budget v/VALUE d/MONTH` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `budget v/1000 d/10/2019`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cExpenseTag, *Expense*\u003e\u003e:  `add_expense n/EXPENSE_NAME v/VALUE [r/REMARKS] [t/TAG]...` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `add_expense n/Laksa v/10.50 r/At Hougang t/Lunch t/Food`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cIncomeTag, *Income*\u003e\u003e: `add_income n/INCOME_NAME v/VALUE [t/TAG]...` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `add_income n/Allowance v/1000 r/From my parents t/Monthly`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cDeleteTag, *Delete*\u003e\u003e: `delete i/INDEX` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `delete i/1`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cUpdateTag, *Update*\u003e\u003e: `update i/INDEX PREFIX_LETTER/UPDATED_DETAILS ...` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Example: `update i/1 n/Curry Laksa v/5 t/Lunch t/Dinner`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cCloneTag, *Clone*\u003e\u003e: `clone i/INDEX` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Example: `clone i/1`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "* \u003c\u003cListTag, *List*\u003e\u003e: `list [m/MONTH] [t/TAG]` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "Example: `list m/Jan t/Food`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cTagTag,*Tag*\u003e\u003e: `tag i/INDEX t/TAG_NAME` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Example: `tag i/8 t/Debt`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cUntagTag, *Untag*\u003e\u003e: `untag i/INDEX t/TAG_NAME` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Example: `untag i/7 t/Important`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limerencee"
        },
        "content": "* \u003c\u003cConvertTag, *Convert*\u003e\u003e: `convert to/TARGET_CURRENCY (v/VALUE|i/INDEX)` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limerencee"
        },
        "content": " `convert v/USD v/1000` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limerencee"
        },
        "content": " `convert v/JPY i/8`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cUndoTag, *Undo*\u003e\u003e: `undo`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cRedoTag, *Redo*\u003e\u003e: `redo`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "* \u003c\u003cHelpTag, *Help*\u003e\u003e: `help [COMMAND]` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Example: `help delete`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* \u003c\u003cExitTag, *Exit*\u003e\u003e: `exit`"
      }
    ],
    "authorContributionMap": {
      "limerencee": 89,
      "lightz96": 60,
      "krusagiz": 94,
      "lye-jw": 43,
      "kensonoenqh": 17,
      "-": 86
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete i/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete i/1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteTransaction(t)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveThrift(thrift)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT *-right-\u003e \"1\" TransactionList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "UniqueTagList -[hidden]down- TransactionList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "UniqueTagList -[hidden]down- TransactionList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionList o-right-\u003e Transaction"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e Description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e Value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e TransactionDate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 10,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "participant \":ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[-\u003e LogicManager : execute(\"delete i/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager -\u003e ThriftParser : parseCommand(\"delete i/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "DeleteCommandParser --\u003e ThriftParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser -\u003e DeleteCommandParser : parse(\"i/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "DeleteCommandParser --\u003e ThriftParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ThriftParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "DeleteCommand -\u003e Model : deleteTransaction(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 12,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class ThriftParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class ABCCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "note left: ABCCommand \u003d \\nFindCommand, \\nListCommand, \\nBudgetCommand, etc"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "note left: XYZCommand \u003d \\nAddExpenseCommand, \\nAddIncomeCommand, \\nUndoCommand, etc"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "class \"\u003c\u003cInterface\u003e\u003e\\nUndoable\" as Undoable"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class \"{abstract}\\nScrollableCommand\" as ScrollableCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class \"{abstract}\\nUnscrollableCommand\" as UnscrollableCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package Storage{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package UI{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager --\u003e\"1\" ThriftParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "XYZCommandParser ..\u003e ABCCommand : creates \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ScrollableCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UnscrollableCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "XYZCommand .up.|\u003e Undoable"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "XYZCommand -up-|\u003e ScrollableCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ABCCommand -up-|\u003eUnscrollableCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ScrollableCommand ..\u003e UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "LogicManager -right-\u003e Storage"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ScrollableCommand -[hidden]left- UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ThriftParser -[hidden]up- Logic"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Undoable -[hidden]right- ThriftParser"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "XYZCommand -[hidden]right- ParserUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "lightz96": 29,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Interface ReadOnlyThrift \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class Thrift"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class ReadOnlyThrift"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Class PastUndoableCommands"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Package Transaction {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "abstract Class Transaction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class TransactionDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class Value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class TransactionList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class FilteredTransactionList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Package Budget {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class Budget"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class BudgetDate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class BudgetValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class BudgetList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Thrift .up.|\u003e ReadOnlyThrift"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ModelManager o--\u003e \"1\" Thrift"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ModelManager o-right-\u003e \"1\" PastUndoableCommands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Thrift *--\u003e \"1\" TransactionList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Thrift *--\u003e \"1\" BudgetList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "FilteredTransactionList o--\u003e \"*\" Transaction"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionList o--\u003e \"*\" Transaction"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionList *--\u003e \"1\" FilteredTransactionList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e \"1\" Value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e \"1\" TransactionDate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e \"0..1\" Remark"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "BudgetList o--\u003e \"*\" Budget"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Budget *--\u003e \"1\" BudgetDate"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Budget *--\u003e \"1\" BudgetValue"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Description -[hidden]right-\u003e Value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Value -[hidden]right-\u003e Remark"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Remark -[hidden]right-\u003e TransactionDate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ModelManager --\u003e\"1\" FilteredTransactionList : filtered list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 37,
      "lightz96": 2,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Interface ThriftStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class JsonThriftStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class JsonAdaptedBudget"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class JsonAdaptedTransaction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "StorageManager o--\u003e ThriftStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "JsonThriftStorage .left.|\u003e ThriftStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "JsonThriftStorage .down.\u003e JsonSerializableThrift"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "JsonSerializableThrift .right.\u003e JsonAdaptedTransaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "JsonSerializableThrift ..\u003e JsonAdaptedBudget"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "JsonAdaptedTransaction .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class BalanceBar"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class TransactionListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "class IncomeCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "MainWindow *-down-\u003e \"1\" CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "MainWindow *-down-\u003e \"1\" ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "MainWindow *-down-\u003e \"1\" TransactionListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "MainWindow *-down-\u003e \"1\" BalanceBar"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "MainWindow *-down-\u003e \"1\" StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionListPanel *-down-\u003e \"*\" ExpenseCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionListPanel *-down-\u003e \"*\" IncomeCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "IncomeCard --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "TransactionListPanel ..\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "BalanceBar -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ExpenseCard -[hidden]left- UiManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Model -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 18,
      "-": 49
    }
  },
  {
    "path": "docs/diagrams/UndoAndRedo/RedoAddExpenseSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"r:RedoCommand\" as RedoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"a:AddExpenseCommand\" as AddExpenseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"PastUndoableCommand\" as PastUndoableCommand MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"Thrift\" as Thrift MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"TransactionList\" as TransactionList MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[-\u003e LogicManager : execute(\"redo\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "LogicManager -\u003e ThriftParser : parseCommand(\"redo\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "create RedoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ThriftParser -\u003e RedoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate RedoCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "RedoCommand --\u003e ThriftParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate RedoCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ThriftParser --\u003e LogicManager : r"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "LogicManager -\u003e RedoCommand : execute(model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate RedoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "RedoCommand -\u003e Model : getUndoneCommand()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model -\u003e PastUndoableCommand : getCommandToRedo()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate PastUndoableCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "PastUndoableCommand --\u003e Model : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate PastUndoableCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model --\u003e RedoCommand : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "RedoCommand -\u003e AddExpenseCommand : redo(model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate AddExpenseCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "AddExpenseCommand -\u003e Model : addExpense(transaction)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model -\u003e Thrift : addTransaction(transaction)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Thrift"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Thrift -\u003e TransactionList : add(transaction)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate TransactionList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "TransactionList --\u003e Thrift"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate TransactionList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Thrift --\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Thrift"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model --\u003e AddExpenseCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "AddExpenseCommand --\u003e RedoCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate AddExpenseCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "RedoCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "CommandResult --\u003e RedoCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "RedoCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate RedoCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "destroy RedoCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lightz96": 87
    }
  },
  {
    "path": "docs/diagrams/UndoAndRedo/RunCommandActivityDiagrams.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "if () then ([UndoCommand or RedoCommand])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    if () then ([UndoCommand])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Purge the RedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Pop command from UndoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Push command to RedoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Undo the command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    else ([RedoCommand])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Pop command from RedoStack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Push command to UndoStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        :Redo the command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "if () then ([is undoable])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    :Adds command to UndoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lightz96": 24
    }
  },
  {
    "path": "docs/diagrams/UndoAndRedo/UndoAddExpenseSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"a:AddExpenseCommand\" as AddExpenseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"PastUndoableCommand\" as PastUndoableCommand MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"Thrift\" as Thrift MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "participant \"TransactionList\" as TransactionList MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[-\u003e LogicManager : execute(\"undo\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "LogicManager -\u003e ThriftParser : parseCommand(\"undo\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ThriftParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UndoCommand --\u003e ThriftParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "ThriftParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "LogicManager -\u003e UndoCommand : execute(model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UndoCommand -\u003e Model : getPreviousUndoableCommand()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model -\u003e PastUndoableCommand : getCommandToUndo()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate PastUndoableCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "PastUndoableCommand --\u003e Model : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate PastUndoableCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model --\u003e UndoCommand : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UndoCommand -\u003e AddExpenseCommand : undo(model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate AddExpenseCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "AddExpenseCommand -\u003e Model : deleteLastTransaction()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model -\u003e Thrift : removeLastTransaction()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate Thrift"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Thrift -\u003e TransactionList : removeLast()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate TransactionList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "TransactionList --\u003e Thrift"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate TransactionList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Thrift --\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Thrift"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "Model --\u003e AddExpenseCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "AddExpenseCommand --\u003e UndoCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate AddExpenseCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UndoCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "CommandResult --\u003e UndoCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "UndoCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lightz96": 87
    }
  },
  {
    "path": "docs/diagrams/UpdateActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":User inputs Update command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "if () then ("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "[command has"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "  valid syntax]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    :Update details of the transaction in Model and UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    :Scroll to the updated transaction in UI\u0027s displayed list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    :Display feedback status message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "else(             [else]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    :Return and display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    Exception message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 22
    }
  },
  {
    "path": "docs/diagrams/UpdateObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package Logic LOGIC_COLOR_T1 {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003ethriftParser:ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:UpdateCommandParser\" as UpdateCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:CliSyntax\" as CliSyntax LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003eargMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003ePrefix\" as Prefix LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003ecommand:UpdateCommand\" as UpdateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003ecommandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package Model MODEL_COLOR_T1 {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003emodel:ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003ethrift:Thrift\" as Thrift MODEL_COLOR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003etransactionList:TransactionList\" as TransactionList MODEL_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:Income\" as Income MODEL_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:Description\" as Description MODEL_COLOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:TransactionDate\" as TransactionDate MODEL_COLOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:Value\" as Value MODEL_COLOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:Remark\" as Remark MODEL_COLOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package Storage STORAGE_COLOR_T1 {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class \"\u003cu\u003e:StorageManager\" as StorageManager STORAGE_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "HiddenOutside ..\u003e LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "LogicManager --\u003e ThriftParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "ThriftParser .down.\u003e UpdateCommandParser: creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommandParser .right.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommandParser .left.\u003e UpdateCommand : creates \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommand .up[MODEL_COLOR].\u003e ModelManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommand .[MODEL_COLOR].\u003e Income"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Income *-[MODEL_COLOR]-\u003e Description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Income *-right[MODEL_COLOR]-\u003e TransactionDate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Income *-[MODEL_COLOR]-\u003e Value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Income *-[MODEL_COLOR]-\u003e Remark"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "ModelManager .[MODEL_COLOR].\u003e Income"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "ModelManager -[MODEL_COLOR]-\u003e Thrift"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Thrift -[MODEL_COLOR]-\u003e TransactionList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "UpdateCommand .up.\u003e CommandResult : \u003e creates"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "TransactionList -[hidden]-\u003e Income"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "LogicManager -up[MODEL_COLOR]-\u003e ModelManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "LogicManager -up[STORAGE_COLOR]-\u003e StorageManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "LogicManager ..\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 72
    }
  },
  {
    "path": "docs/diagrams/add-transaction/AddTransaction0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package \"Transactions List\" {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction1 as \"__:Income__\" {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description: \"Bursary\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value: 500"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Remark: \"Awarded for doing well in school\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction2 as \"__:Expense__\" {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description: \"Laksa\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value: 3.50"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date: dd/mm/yyyy"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "transaction1 -[hidden]left- transaction2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "show members"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "hide transaction1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "hide transaction2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 26
    }
  },
  {
    "path": "docs/diagrams/add-transaction/AddTransaction1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package \"Transactions List\" {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction1 as \"__:Income__\" {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDescription: \"Bursary\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eValue: 500"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eRemark: \"Awarded for doing well in school\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction2 as \"__:Expense__\" {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDescription: \"Laksa\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eValue: 3.50"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDate: dd/mm/yyyy"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "transaction1 -[hidden]left- transaction2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "show members"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "hide transaction1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 25
    }
  },
  {
    "path": "docs/diagrams/add-transaction/AddTransaction2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package \"Transactions List\" {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction1 as \"__:Income__\" {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDescription: \"Bursary\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eValue: 500"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eRemark: \"Awarded for doing well in school\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class transaction2 as \"__:Expense__\" {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDescription: \"Laksa\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eValue: 3.50"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolor:#white\u003eDate: dd/mm/yyyy"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "transaction1 -[hidden]left- transaction2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "show members"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 24
    }
  },
  {
    "path": "docs/diagrams/add-transaction/AddTransactionSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":User executes add transaction command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "if (Check input validity with AddTransactionCommandParser) then ([Invalid, throws ParseException])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "else"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    if (Check input type) then ([Transaction is an Expense])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize AddExpenseCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    else ([Transaction is an Income])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize AddIncomeCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize Income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Initialize AddIncomeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        :Add to transaction list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 19
    }
  },
  {
    "path": "docs/diagrams/add-transaction/Polymorphism.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "show members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "abstract class Transaction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolor:#white\u003eDescription"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolor:#white\u003eTransactionDate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolor:#white\u003eValue"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolor:#white\u003eRemark"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolor:#white\u003eSet\u003cTag\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction \u003c|-- Income"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "Transaction \u003c|-- Expense"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 17
    }
  },
  {
    "path": "docs/diagrams/add-transaction/PolymorphismCalling.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "box"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "participant \":ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "participant \":AddTransactionCommandParser\" as AddTransactionCommandParser MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[-\u003e LogicManager : execute(\"add_expense\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager -\u003e ThriftParser : parseCommand(\"add_expense\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "create AddTransactionCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser -\u003e AddTransactionCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate AddTransactionCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser \u003c-- AddTransactionCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate AddTransactionCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "destroy AddTransactionCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager \u003c-- ThriftParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[-\u003e LogicManager : execute(\"add_income\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager -\u003e ThriftParser : parseCommand(\"add_income\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "create AddTransactionCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser -\u003e AddTransactionCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "activate AddTransactionCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "ThriftParser \u003c-- AddTransactionCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate AddTransactionCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "destroy AddTransactionCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "LogicManager \u003c-- ThriftParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "limerencee": 51
    }
  },
  {
    "path": "docs/diagrams/list/ListActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":ListCommandParser parses the arguments;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "if () then ([Syntax error] )"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    :Show UsageSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "else ( [correct input])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    :Create new ListCommand object;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    :Show filtered list of Transactions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kensonoenqh": 12
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam defaultFontName Segoe UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 7,
      "-": 67
    }
  },
  {
    "path": "docs/diagrams/tag-untag/Polymorphism.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "abstract class Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    TransactionDate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Value"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Remark"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Set\u003cTag\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Transaction \u003c|-- Income"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "Transaction \u003c|-- Expense"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 20
    }
  },
  {
    "path": "docs/diagrams/tag-untag/TagActivity.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":User executes tag command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if () then ([Invalid, throws ParseException])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "else ([Valid])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    :Initialise TagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    if () then ([Some Tag(s) don\u0027t exist])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        while ()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            -\u003e [Some Tag(s) unchecked];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if () then ([Tag doesn\u0027t exist])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                :            Add specified Tag to Tag set            ;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            else ([Tag exist])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        endwhile"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        -\u003e [All tags checked];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if () then ([Transaction is an Expense])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            :Initialise Expense with updated Tag set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        else ([Transaction is an Income])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            :Initialise Income with updated Tag set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        :Replace original in transaction list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    else ([All Tag(s) exist])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 28
    }
  },
  {
    "path": "docs/diagrams/tag-untag/TagSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "box"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "participant \":ThriftParser\" as ThriftParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "participant \":TagCommandParser\" as TagCommandParser MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[-\u003e LogicManager : execute(\"tag\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "LogicManager -\u003e ThriftParser : execute(\"tag\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "activate ThriftParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "ThriftParser -\u003e TagCommandParser: parse(args)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "activate TagCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "ThriftParser \u003c-- TagCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "destroy TagCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "LogicManager \u003c-- ThriftParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "deactivate ThriftParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 28
    }
  },
  {
    "path": "docs/diagrams/tag-untag/TagUntagTransactionWTag.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package \"TransactionsList\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class transaction as \"__:Expense__\" {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Description: \"Laksa\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Value: 3.50"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Date: 21/03/2019"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Remarks: Penang Laksa"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Tags: [Delicious]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class blank as \"hidden\" {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        PLACEHOLDER TEXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class blank1 as \"hidden2\" {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        PLACEHOLDER TEXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "transaction -right- blank"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "blank -right- blank1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "show members"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "hide blank"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "hide blank1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 33
    }
  },
  {
    "path": "docs/diagrams/tag-untag/TagUntagTransactionWoTag.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package \"TransactionsList\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class transaction as \"__:Expense__\" {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Description: \"Laksa\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Value: 3.50"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Date: 21/03/2019"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Remarks: Penang Laksa"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class blank as \"hidden\" {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        PLACEHOLDER TEXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    class blank1 as \"hidden2\" {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        PLACEHOLDER TEXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "transaction -right- blank"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "blank -right- blank1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "show members"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "hide blank"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "hide blank1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 32
    }
  },
  {
    "path": "docs/diagrams/tag-untag/UntagActivity.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":User executes untag command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "if () then ([Invalid, throws ParseException])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "else ([Valid])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    :Initialise UntagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    if () then ([Some Tag(s) exist])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        while ()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            -\u003e [Some Tag(s) unchecked];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if () then ([Tag exist])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                :            Remove specified Tag from Tag set            ;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            else ([Tag doesn\u0027t exist])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        endwhile"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        -\u003e [All tags checked];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if () then ([Transaction is an Expense])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            :Initialise Expense with updated Tag set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        else ([Transaction is an Income])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            :Initialise Income with updated Tag set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        :Replace original in transaction list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    else ([All Tag(s) don\u0027t exist])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 28
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Participant \":UpdateCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "Participant \"command:UpdateCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "ecp -\u003e ec ++: index, updateTransactionDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 3,
      "-": 18
    }
  },
  {
    "path": "docs/team/kensonoenqh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d Oen Qi Han, Kenson - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "\u003d\u003d Project: THRIFT"
      }
    ],
    "authorContributionMap": {
      "kensonoenqh": 6
    }
  },
  {
    "path": "docs/team/krusagiz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d Ang Chin Guan Melvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "\u003d\u003d PROJECT: THRIFT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "krusagiz": 7
    }
  },
  {
    "path": "docs/team/lightz96.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d Lee Bo Qiang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W12-2/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003d\u003d Project: THRIFT"
      }
    ],
    "authorContributionMap": {
      "lightz96": 7
    }
  },
  {
    "path": "docs/team/limerencee.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d Poh Jia Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d 1. Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 1.1 Purpose"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "This portfolio serves as a showcase of my roles and contributions to the team project THRIFT. This project was part of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "the requirements of a year two software engineering module that I have taken as an undergraduate in NUS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 1.2 Project: THRIFT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "THRIFT is a finance tracking desktop application that was morphed from the original AddressBook-Level3 desktop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "application. In the original project, the application acts as a contacts list where the user could add contacts into"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "their personalized list. My team and I have since morphed the application to better suit our purposes, which allow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "users to easily track their incoming and outgoing transactions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 1.3 Background"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "In this project, I was the team lead and was primarily in charge of spearing the direction of the THRIFT application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "This meant that managing project milestones, deadlines and delegating work to different team members were part of my"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "responsibilities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "My team members took on the roles of ___"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 1.4 Legend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d 2. Summary of Contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 2.1 Enhancements made"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 2.2 Code contributed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 2.3 Other contributions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d 3. Contributions to the User Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 3.1 Current enhancement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 3.2 Proposed enhancement for v2.0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d 4. Contributions to the Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 4.1 Current enhancement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003d\u003d\u003d 4.2 Proposed enhancement for v2.0"
      }
    ],
    "authorContributionMap": {
      "limerencee": 44
    }
  },
  {
    "path": "docs/team/lye-jw.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d Lye Jian Wen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d PROJECT: THRIFT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdate]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclone]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003d]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003d]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "---"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 53
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limerencee"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limerencee"
        },
        "content": "----"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 423
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "[source, JSON]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "----"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 114
    }
  },
  {
    "path": "src/main/java/thrift/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/thrift/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/thrift/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.util.CurrencyUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.storage.CurrencyMappingsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.storage.JsonCurrencyMappingsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.JsonThriftStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.ThriftStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing THRIFT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ThriftStorage thriftStorage \u003d new JsonThriftStorage(userPrefs.getThriftFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CurrencyMappingsStorage currencyMappingsStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new JsonCurrencyMappingsStorage(userPrefs.getCurrencyMappingsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        storage \u003d new StorageManager(thriftStorage, userPrefsStorage, currencyMappingsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        PastUndoableCommands pastUndoableCommands \u003d new PastUndoableCommands();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        initCurrencyMappings(storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, pastUndoableCommands);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s thrift and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * The data from the sample thrift will be used instead if {@code storage}\u0027s thrift is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * or an empty thrift will be used instead if errors occur when reading {@code storage}\u0027s thrift."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            PastUndoableCommands pastUndoableCommands) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Optional\u003cReadOnlyThrift\u003e thriftOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftOptional \u003d storage.readThrift();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            if (!thriftOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample THRIFT\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            initialData \u003d thriftOptional.orElseGet(Thrift::new);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            initialData \u003d new Thrift();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            initialData \u003d new Thrift();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return new ModelManager(initialData, userPrefs, pastUndoableCommands);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Initialises currencyMappings at CurrencyUtil using the file at {@code storage}\u0027s Currency Mappings file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * or does nothing (to use default) if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    protected void initCurrencyMappings(Storage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Path currencyMappingsFilePath \u003d storage.getCurrencyMappingsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        logger.info(\"Using currency file : \" + currencyMappingsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            HashMap\u003cString, Double\u003e currencyMappings \u003d storage.readCurrencyMappings().get();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            CurrencyUtil.setCurrencyMap(currencyMappings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            logger.warning(\"Currency Mappings file at \" + currencyMappingsFilePath"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    + \"Using default currency mappings\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (IOException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Using default currency mappings\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty THRIFT\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Starting THRIFT \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping THRIFT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 20,
      "krusagiz": 32,
      "lightz96": 27,
      "-": 137
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final String LOG_FILE \u003d \"thrift.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "lightz96": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE \u003d \"Invalid command format! %2$s\\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14,
      "krusagiz": 1
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/thrift/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/thrift/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/thrift/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/DateUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A class to ease Date comparisons. Some methods are removed as they are not used within our app\u0027s context."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Source: http://www.java2s.com/Code/Java/Data-Type/Checksifacalendardateistoday.htm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DateUtils {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if two dates are on the same day ignoring time.\u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date1  the first date, not altered, not null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date2  the second date, not altered, not null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if they represent the same day"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if either date is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isSameDay(Date date1, Date date2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (date1 \u003d\u003d null || date2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The dates must not be null\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        cal1.setTime(date1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        cal2.setTime(date2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return isSameDay(cal1, cal2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if two calendars represent the same day ignoring time.\u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal1  the first calendar, not altered, not null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal2  the second calendar, not altered, not null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if they represent the same day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if either calendar is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isSameDay(Calendar cal1, Calendar cal2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1 \u003d\u003d null || cal2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The dates must not be null\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return (cal1.get(Calendar.ERA) \u003d\u003d cal2.get(Calendar.ERA)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 cal1.get(Calendar.YEAR) \u003d\u003d cal2.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 cal1.get(Calendar.DAY_OF_YEAR) \u003d\u003d cal2.get(Calendar.DAY_OF_YEAR));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if a date is today.\u003c/p\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date the date, not altered, not null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the date is today."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isToday(Date date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return isSameDay(date, Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if a calendar date is today.\u003c/p\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal  the calendar, not altered, not null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if cal date is today"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if the calendar is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isToday(Calendar cal) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return isSameDay(cal, Calendar.getInstance());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if the first date is after the second date ignoring time.\u003c/p\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date1 the first date, not altered, not null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date2 the second date, not altered, not null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the first date day is after the second date day."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isAfterDay(Date date1, Date date2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (date1 \u003d\u003d null || date2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The dates must not be null\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        cal1.setTime(date1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        cal2.setTime(date2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return isAfterDay(cal1, cal2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if the first calendar date is after the second calendar date ignoring time.\u003c/p\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal1 the first calendar, not altered, not null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal2 the second calendar, not altered, not null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if cal1 date is after cal2 date ignoring time."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if either of the calendars are \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isAfterDay(Calendar cal1, Calendar cal2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1 \u003d\u003d null || cal2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The dates must not be null\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1.get(Calendar.ERA) \u003c cal2.get(Calendar.ERA)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1.get(Calendar.ERA) \u003e cal2.get(Calendar.ERA)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1.get(Calendar.YEAR) \u003c cal2.get(Calendar.YEAR)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal1.get(Calendar.YEAR) \u003e cal2.get(Calendar.YEAR)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return cal1.get(Calendar.DAY_OF_YEAR) \u003e cal2.get(Calendar.DAY_OF_YEAR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if a date is after today and within a number of days in the future.\u003c/p\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date the date to check, not altered, not null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param days the number of days."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the date day is after today and within days in the future ."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if the date is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isWithinDaysFuture(Date date, int days) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The date must not be null\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return isWithinDaysFuture(cal, days);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * \u003cp\u003eChecks if a calendar date is after today and within a number of days in the future.\u003c/p\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param cal the calendar, not altered, not null"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param days the number of days."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the calendar date day is after today and within days in the future ."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalArgumentException if the calendar is \u003ccode\u003enull\u003c/code\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isWithinDaysFuture(Calendar cal, int days) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (cal \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalArgumentException(\"The date must not be null\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar today \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar future \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        future.add(Calendar.DAY_OF_YEAR, days);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return (isAfterDay(cal, today) \u0026\u0026 !isAfterDay(cal, future));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 150
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/StreamUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.StreamSupport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A class to ease converting an {@code Iterator} object into a {@code Stream} object. This will be useful when"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * converting a specified {@code Collections.List} object into a pure {@code Stream} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Source: https://stackoverflow.com/a/28118885"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class StreamUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Takes the specified {@code Iterator\u003cT\u003e} object and converts it into {@code Stream\u003cT\u003e} to return."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static \u003cT\u003e Stream\u003cT\u003e asStream(Iterator\u003cT\u003e sourceIterator) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(sourceIterator);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return asStream(sourceIterator, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Takes the specified {@code Iterator\u003cT\u003e} object and converts it into {@code Stream\u003cT\u003e} to return."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * This method allows for specifying if the {@code Stream} will support parallelism."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static \u003cT\u003e Stream\u003cT\u003e asStream(Iterator\u003cT\u003e sourceIterator, boolean parallel) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(sourceIterator);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Iterable\u003cT\u003e iterable \u003d () -\u003e sourceIterator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return StreamSupport.stream(iterable.spliterator(), parallel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 33
    }
  },
  {
    "path": "src/main/java/thrift/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 15,
      "-": 66
    }
  },
  {
    "path": "src/main/java/thrift/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.BalanceBar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.ui.FilteredBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param transactionListPanel The TransactionListPanel to be manipulated by execution of certain commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param balanceBar The BalanceBar that displays the current month, budget and balance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param filteredBar The FilteredBar that displays the meaning of the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    CommandResult execute(String commandText, TransactionListPanel transactionListPanel, BalanceBar balanceBar,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            FilteredBar filteredBar) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the Thrift."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see Model#getThrift()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    ReadOnlyThrift getThrift();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Processes the parsed command, checking if it requires scrolling the view, updating the balancebar, or record"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * keeping for possible undo/redo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param command processed command that is ready to execute."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param commandText raw user input for the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param transactionListPanel transaction list pane that houses the transactions displayed to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param balanceBar GUI object that displays the current balance, budget and month to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param filteredBar GUI object that displays the meaning of the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code CommandResult} object that is created as a result from executing the command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws CommandException if the command encounters any runtime errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    CommandResult processParsedCommand(Command command, String commandText, TransactionListPanel transactionListPanel,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                                       BalanceBar balanceBar, FilteredBar filteredBar) throws CommandException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Takes the given command and executes it, checking if the command requires scrolling the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code transactionListPanel} into view."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param command processed command that is ready to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param transactionListPanel transaction list pane that houses the transactions displayed to the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code CommandResult} object that is created as a result from executing the command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws CommandException if the command encounters any runtime errors."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    CommandResult parseScrollable(Command command, TransactionListPanel transactionListPanel)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throws CommandException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Checks if the given command requires the {@code BalanceBar} to be refreshed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param command processed command that is ready to execute."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param balanceBar GUI object that displays the current balance, budget and month to the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void parseRefreshable(Command command, BalanceBar balanceBar);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Checks if the given command requires to update {@code filteredBar}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param input user input to the command box."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param command processed command that is ready to execute."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param filteredBar GUI object that displays the meaning of the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void parseFilterable(String input, Command command, FilteredBar filteredBar);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Checks if the given command requires to be record-kept for possible undo/redo in the future."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param command processed command that is ready to execute."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param commandText raw user input for the command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void parseUndoable(Command command, String commandText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Updates the various components of the {@code BalnaceBar}. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void updateBalanceBar(BalanceBar balanceBar);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns if the given command requires a refresh of the {@code filteredList}. */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    boolean isRefreshingFilteredList(Command command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns the current month and year in MMM yyyy format. */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    String getCurrentMonthYear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns the current month\u0027s budget. */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    double getCurrentMonthBudget();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns the current month\u0027s balance. */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    double getCurrentMonthBalance();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Returns the current month\u0027s expense. */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    double getCurrentMonthExpense();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Computes the current month\u0027s initial expense. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void computeInitialMonthExpense();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Returns the current month\u0027s income. */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    double getCurrentMonthIncome();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Computes the current month\u0027s initial income. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void computeInitialMonthIncome();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions. */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Filters the view of the transaction list to only show transactions that occur in the current month. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void setFilteredTransactionListToCurrentMonth();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the user prefs\u0027 thrift file path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 71,
      "lightz96": 33,
      "lye-jw": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/thrift/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.NonScrollingCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.ScrollingCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.Undoable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.parser.ThriftParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.BalanceBar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.ui.FilteredBar;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final ThriftParser thriftParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thriftParser \u003d new ThriftParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public CommandResult execute(String commandText, TransactionListPanel transactionListPanel, BalanceBar balanceBar,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            FilteredBar filteredBar) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Command command \u003d thriftParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        CommandResult commandResult \u003d processParsedCommand(command, commandText, transactionListPanel, balanceBar,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                filteredBar);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            storage.saveThrift(model.getThrift());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getThrift();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult processParsedCommand(Command command, String commandText,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                              TransactionListPanel transactionListPanel,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                                              BalanceBar balanceBar, FilteredBar filteredBar) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(command, commandText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult commandResult \u003d parseScrollable(command, transactionListPanel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        parseRefreshable(command, balanceBar);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        parseFilterable(commandText, command, filteredBar);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        parseUndoable(command, commandText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult parseScrollable(Command command, TransactionListPanel transactionListPanel)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (command instanceof ScrollingCommand) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            commandResult \u003d ((ScrollingCommand) command).execute(model, transactionListPanel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            commandResult \u003d ((NonScrollingCommand) command).execute(model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseRefreshable(Command command, BalanceBar balanceBar) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (isRefreshingFilteredList(command)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            model.updateBalanceForCurrentMonth();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.updateExpenseForCurrentMonth();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.updateIncomeForCurrentMonth();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            updateBalanceBar(balanceBar);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parseFilterable(String input, Command command, FilteredBar filteredBar) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(input, command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            String arguments \u003d thriftParser.getArguments(input).trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            if (command instanceof ListCommand) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    filteredBar.setFiltered(\"All\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    String monthYear \u003d model.getCurrentMonthYear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    filteredBar.setFiltered(monthYear);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            } else if (command instanceof FindCommand) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                String filteredString \u003d formatFindCommandArguments(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                filteredBar.setFiltered(filteredString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.severe(\"Unable to parse the user input at LogicManager#parseFilterable\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Formats arguments for find command into human-readable format. \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Note: arguments should not be empty."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param arguments is the arguments to find command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return a human-readable string for find command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private String formatFindCommandArguments(String arguments) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assert !arguments.equals(\"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String[] keywords \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            if (i \u003d\u003d keywords.length - 2) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                sb.append(\"\\\"\").append(keywords[i]).append(\"\\\"\").append(\" or \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            } else if (i \u003d\u003d keywords.length - 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                sb.append(\"\\\"\").append(keywords[i]).append(\"\\\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                sb.append(\"\\\"\").append(keywords[i]).append(\"\\\"\").append(\", \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseUndoable(Command command, String commandText) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(command, commandText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (command instanceof Undoable) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.keepTrackCommands((Undoable) command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            logger.info(\"[UNDOABLE COMMAND][\" + commandText + \"] is tracked\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateBalanceBar(BalanceBar balanceBar) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balanceBar.setMonthYear(getCurrentMonthYear());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balanceBar.setMonthBudget(getCurrentMonthBudget());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balanceBar.setMonthBalance(getCurrentMonthBalance());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        balanceBar.setMonthExpense(getCurrentMonthExpense());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        balanceBar.setMonthIncome(getCurrentMonthIncome());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isRefreshingFilteredList(Command command) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (command instanceof AddIncomeCommand"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof AddExpenseCommand"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof BudgetCommand"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof CloneCommand"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof DeleteCommand"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof RedoCommand"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof UpdateCommand"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || command instanceof UndoCommand) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            logger.info(\"[PREPARING TO UPDATE MONTHLY BALANCE OR BUDGET]\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getCurrentMonthBudget() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getCurrentMonthBudget();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String getCurrentMonthYear() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getCurrentMonthYear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getCurrentMonthBalance() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getBalance();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public double getCurrentMonthExpense() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return model.getExpense();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void computeInitialMonthExpense() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.updateExpenseForCurrentMonth();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public double getCurrentMonthIncome() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return model.getIncome();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void computeInitialMonthIncome() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.updateIncomeForCurrentMonth();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setFilteredTransactionListToCurrentMonth() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionListToCurrentMonth();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return model.getThriftFilePath();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 107,
      "lightz96": 88,
      "lye-jw": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Adds an expense transaction to the THRIFT."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommand extends ScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_expense\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Adds an expense transaction to THRIFT.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"VALUE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an expense: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Laksa \" + CliSyntax.PREFIX_VALUE + \"4\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an expense with remark: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Laksa \" + CliSyntax.PREFIX_VALUE + \"4 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"One of my favourite\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an expense with tag: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Laksa \" + CliSyntax.PREFIX_VALUE + \"4 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Food\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an expense with remark and tag: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Laksa \" + CliSyntax.PREFIX_VALUE + \"4 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"One of my favourite \" + CliSyntax.PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense transaction to THRIFT.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"VALUE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Laksa \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"4.50 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"Ate at Changi Village \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Lunch \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Meal \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model, TransactionListPanel transactionListPanel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Use null comparison instead of requireNonNull(transactionListPanel) as current JUnit tests are unable to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // handle JavaFX initialization"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (model.isInView(toAdd) \u0026\u0026 transactionListPanel !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionListPanel.getTransactionListView().scrollTo(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.deleteLastTransaction();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 59,
      "lightz96": 35
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/AddIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Adds an expense transaction to the THRIFT."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommand extends ScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_income\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Adds an income transaction to THRIFT.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"VALUE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an income: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Bursary \" + CliSyntax.PREFIX_VALUE + \"1000\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an income with remark: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Bursary \" + CliSyntax.PREFIX_VALUE + \"1000 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"From SDCC\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an income with tags: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Bursary \" + CliSyntax.PREFIX_VALUE + \"1000 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"SDCC \" + CliSyntax.PREFIX_TAG + \"School\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add an income with remark and tag: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Bursary \" + CliSyntax.PREFIX_VALUE + \"1000 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"From SDCC \" + CliSyntax.PREFIX_TAG + \"School\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an income transaction to THRIFT.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"VALUE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Bursary \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"500 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_REMARK + \"For studying well \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Award \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New income added: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Income toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates an AddIncomeCommand to add the specified {@code Income}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(income);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        toAdd \u003d income;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model, TransactionListPanel transactionListPanel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.addIncome(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Use null comparison instead of requireNonNull(transactionListPanel) as current JUnit tests are unable to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // handle JavaFX initialization"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (model.isInView(toAdd) \u0026\u0026 transactionListPanel !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionListPanel.getTransactionListView().scrollTo(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof AddIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddIncomeCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.deleteLastTransaction();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addIncome(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 58,
      "lightz96": 35
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Sets the monthly budget."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class BudgetCommand extends NonScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Sets your monthly budget to the specified amount.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"AMOUNT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"MM/YYYY\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To set budget for this month (assuming this month is October 2019): \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_VALUE + \"500 \" + CliSyntax.PREFIX_DATE + \"10/2019\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To forecast your budget for a particular month: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_VALUE + \"1000 \" + CliSyntax.PREFIX_DATE + \"11/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets your monthly budget to the specified amount.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"AMOUNT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"MM/YYYY\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"1000 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"10/2019 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Budget oldBudget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates a BudgetCommand with the specified {@code Value}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.oldBudget \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        oldBudget \u003d model.setBudget(budget).orElse(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, budget));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, budget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (oldBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.resetBudgetForThatMonth(budget);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.setBudget(oldBudget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, budget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setBudget(budget);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 37,
      "lightz96": 34
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/CloneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.model.transaction.TransactionDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Clones a transaction specified by its index in THRIFT."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class CloneCommand extends ScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clone\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Clones the transaction specified by its index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usage of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To clone the transaction at index 8 in the displayed transaction list: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"8\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            + \": Clones the transaction specified by its index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_CLONE_TRANSACTION_SUCCESS \u003d \"Cloned transaction: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Transaction clonedTransaction;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Creates a CloneCommand instance to clone an {@code Expense} or {@code Income}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param targetIndex from the displayed list of the transaction to be cloned"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public CloneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.clonedTransaction \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public CommandResult execute(Model model, TransactionListPanel transactionListPanel) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Transaction transactionToClone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        clonedTransaction \u003d createClonedTransaction(transactionToClone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (clonedTransaction instanceof Expense) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            model.addExpense((Expense) clonedTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else if (clonedTransaction instanceof Income) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            model.addIncome((Income) clonedTransaction);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Use null comparison instead of requireNonNull(transactionListPanel) as current JUnit tests are unable to"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // handle JavaFX initialization"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (model.isInView(clonedTransaction) \u0026\u0026 transactionListPanel !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            transactionListPanel.getTransactionListView().scrollTo(clonedTransaction);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLONE_TRANSACTION_SUCCESS, clonedTransaction));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Creates a clone of the transaction at {@link #targetIndex} of the displayed list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param transactionToClone {@link Transaction} that a clone should be created of, with current Date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return {@link Expense} or {@link Income} clone of {@code transactionToClone} containing current Date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Transaction createClonedTransaction(Transaction transactionToClone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Description clonedDescription \u003d transactionToClone.getDescription();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Value clonedValue \u003d transactionToClone.getValue();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Remark clonedRemark \u003d transactionToClone.getRemark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Set\u003cTag\u003e clonedTags \u003d transactionToClone.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        TransactionDate currentDate \u003d new TransactionDate(DATE_FORMATTER.format(new Date()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (transactionToClone instanceof Expense) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new Expense(clonedDescription, clonedValue, clonedRemark, currentDate, clonedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new Income(clonedDescription, clonedValue, clonedRemark, currentDate, clonedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                || (other instanceof CloneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CloneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        model.deleteLastTransaction();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, clonedTransaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (clonedTransaction instanceof Expense) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            model.addExpense((Expense) clonedTransaction);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else if (clonedTransaction instanceof Income) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            model.addIncome((Income) clonedTransaction);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 120,
      "lightz96": 10
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ConvertCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.model.transaction.Value.DECIMAL_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.util.CurrencyUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Converts currencies"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class ConvertCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"convert\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"1.00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Converts amount \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"from the first specified currency to the rest of the specified currencies.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"If no value is specified, it converts with a value of \" + DEFAULT_VALUE + \".\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"If only one currency is specified, it converts from \" + DEFAULT_CURRENCY + \" to that currency.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Parameters: [\" + CliSyntax.PREFIX_VALUE + \"AMOUNT] (up to 2 decimal places) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_CURRENCY + \"CURRENCIES...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"1000 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_CURRENCY + \"SGD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_CURRENCY + \"MYR\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String CURRENCY_SOURCE_URL \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \"https://www.ecb.europa.eu/\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    + \"stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String CURRENCY_SOURCE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \"European Central Bank (\" + CURRENCY_SOURCE_URL + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_CREDITS \u003d \"\\nExchange rates sourced from \" + CURRENCY_SOURCE + \".\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_BASE_CURRENCY_FORMAT \u003d \"Converting from %1$S%2$s\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_TARGET_CURRENCY_FORMAT \u003d \"To %1$S: %1$S%2$s\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Converts amount from the first specified currency to the rest of the specified currencies.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"If no value is specified, it converts with a value of \" + DEFAULT_VALUE + \".\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"If only one currency is specified, it converts from \" + DEFAULT_CURRENCY + \" to that currency.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + \"[\" + CliSyntax.PREFIX_VALUE + \"AMOUNT] (up to 2 decimal places) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_CURRENCY + \"CURRENCIES...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To convert 500 USD to MYR: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_VALUE + \"500 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_CURRENCY + \"USD \" + CliSyntax.PREFIX_CURRENCY + \"MYR\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To view the conversion rate from USD to MYR: \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_CURRENCY + \"USD \" + CliSyntax.PREFIX_CURRENCY + \"MYR\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To convert a value from \" + DEFAULT_CURRENCY + \" to USD: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_VALUE + \"100 \" + CliSyntax.PREFIX_CURRENCY + \"USD\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + MESSAGE_CREDITS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private List\u003cString\u003e currencies;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public ConvertCommand(double amount, List\u003cString\u003e currencies) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.currencies \u003d currencies;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new CommandResult(generateConvertResult());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                || (other instanceof ConvertCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d (((ConvertCommand) other).amount)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 currencies.equals(((ConvertCommand) other).currencies));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Generates the result message for conversions using instance variables"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Result message for conversions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private String generateConvertResult() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return generateConvertResult(amount, currencies);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Generates the result message for conversions"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Result message for conversions"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static String generateConvertResult(double amount, List\u003cString\u003e currencies) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        StringBuilder convertResultMsgSb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String baseCurrency \u003d currencies.get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        convertResultMsgSb.append(String.format(MESSAGE_BASE_CURRENCY_FORMAT, baseCurrency,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                DECIMAL_FORMATTER.format(amount)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (int i \u003d 1; i \u003c currencies.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Map\u003cString, Double\u003e currencyMap \u003d CurrencyUtil.getCurrencyMap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            String targetCurrency \u003d currencies.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            double convertedValue \u003d CurrencyUtil.convert(currencyMap, amount, baseCurrency, targetCurrency);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            convertResultMsgSb.append(String.format(MESSAGE_TARGET_CURRENCY_FORMAT, targetCurrency,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    DECIMAL_FORMATTER.format(convertedValue)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        convertResultMsgSb.append(MESSAGE_CREDITS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return convertResultMsgSb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 96,
      "lightz96": 19
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Deletes a transaction identified using it\u0027s displayed index from THRIFT."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class DeleteCommand extends NonScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To delete transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction transactionToDelete;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Index actualIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.transactionToDelete \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.actualIndex \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        actualIndex \u003d model.getIndexInFullTransactionList(transactionToDelete).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.deleteTransaction(actualIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, transactionToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (transactionToDelete instanceof Expense) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.addExpense((Expense) transactionToDelete, actualIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else if (transactionToDelete instanceof Income) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            model.addIncome((Income) transactionToDelete, actualIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, actualIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.deleteTransaction(actualIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 15,
      "lightz96": 34,
      "lye-jw": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ExitCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Exit THRIFT application.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exit THRIFT application.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting THRIFT as requested ...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lye-jw": 1,
      "lightz96": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Finds and lists all transactions in THRIFT whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class FindCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Finds all transactions whose descriptions contain any \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usage of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To find all transactions that contain the words \u0027alice\u0027, \u0027bob\u0027 and \u0027charlie\u0027: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all transactions whose descriptions contain any \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final DescriptionOrRemarkContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public FindCommand(DescriptionOrRemarkContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 9,
      "lightz96": 10,
      "lye-jw": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class HelpCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Valid commands are: add_expense, add_income, budget, clone, convert, delete, find, help, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"list, redo, tag, undo, untag, update.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [COMMAND]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To view the usage of all possible commands: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To view the usage of a specific command: \" + COMMAND_WORD + \" add_income\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Parameters: [COMMAND]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + AddExpenseCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private String commandUsage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public HelpCommand(String commandUsage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.commandUsage \u003d commandUsage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (commandUsage.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new CommandResult(commandUsage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                || (other instanceof HelpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u0026\u0026 commandUsage.equals(((HelpCommand) other).commandUsage)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lye-jw": 1,
      "lightz96": 27,
      "-": 17
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Lists all transactions in THRIFT to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class ListCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Lists all transactions or lists transactions filtered by month\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" [\" + CliSyntax.PREFIX_MONTH + \"MONTH] (must be of format MMM)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To list all transactions: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To list all transactions that were created in January: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_MONTH + \"jan\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            + \": lists all transactions or list transactions filtered by month.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            + CliSyntax.PREFIX_MONTH + \"MONTH (must be of format MMM)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            //+ CliSyntax.PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_MONTH + \"jan\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "lightz96": 10,
      "lye-jw": 1,
      "kensonoenqh": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/NonScrollingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed; does not make display scroll to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * modified item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public abstract class NonScrollingCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Executes the command that needs no display scrolling and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 7,
      "-": 13
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Redo undone command in THRIFT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class RedoCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Redo undone command.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Undoable commands are: add_expense, add_income, budget, clone, delete, tag, untag, update.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redo undone command.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo successful\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String NO_REDOABLE_COMMAND \u003d \"No valid command to redo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (model.hasUndoneCommand()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable undoable \u003d model.getUndoneCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            undoable.redo(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        throw new CommandException(NO_REDOABLE_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 35,
      "lye-jw": 1
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/ScrollingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed; upon execution, command makes display"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * scroll to modified item."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public abstract class ScrollingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Executes the command that scrolls to modified item and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param transactionListPanel {@code TransactionListPanel} which displays the list of transactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public abstract CommandResult execute(Model model, TransactionListPanel transactionListPanel)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 23
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Tags a specified Transaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class TagCommand extends NonScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Tags the transaction identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"New tags will be added to existing tags.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Tags the transaction identified by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"New tags will be added to existing tags.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add a tag to the existing tag(s) of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_TAG + \"Food\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To add multiple tags to the existing tag(s) of the transaction at index 1 in the displayed \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"transaction list: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_TAG + \"Food \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Japanese\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_TAG_TRANSACTION_SUCCESS \u003d \"Updated Transaction: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_TAG_EXISTED \u003d \"\\nTag(s) %1$s already exist and will be ignored.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_ORIGINAL_TRANSACTION \u003d \"\\n\\nOriginal: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_NOT_TAGGED \u003d \"At least one tag must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_NO_NEW_TAGS \u003d \"Specified tag(s) already exist, the transaction was not updated.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final StringBuilder existedTags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Index actualIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction transactionToTag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction updatedTransaction;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a TagCommand to tag the specified {@code Transaction}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param index  of the transaction in the filtered transaction list to update"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagSet of new tags to be added to the current set of tags, without duplicates."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagCommand(Index index, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(tagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d tagSet;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        existedTags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.actualIndex \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.transactionToTag \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.updatedTransaction \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String originalTransactionNotification \u003d String.format(MESSAGE_ORIGINAL_TRANSACTION, transactionToTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        updatedTransaction \u003d createTaggedTransaction(transactionToTag, tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String taggedTransactionNotification \u003d String.format(MESSAGE_TAG_TRANSACTION_SUCCESS, updatedTransaction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String existedTagsNotification \u003d existedTags.length() \u003d\u003d 0"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                : String.format(MESSAGE_TAG_EXISTED, existedTags.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        actualIndex \u003d model.getIndexInFullTransactionList(transactionToTag).orElse(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new CommandResult(taggedTransactionNotification"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + existedTagsNotification"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + originalTransactionNotification);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                || (other instanceof TagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 index.equals(((TagCommand) other).index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 tagSet.equals(((TagCommand) other).tagSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates and returns a {@code Transaction}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * with the new tags from {@code tagSet} appended without duplicates."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Transaction createTaggedTransaction(Transaction transactionToTag,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Set\u003cTag\u003e tagSet) throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert transactionToTag !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Description oldDescription \u003d transactionToTag.getDescription();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Value oldValue \u003d transactionToTag.getValue();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TransactionDate oldDate \u003d transactionToTag.getDate();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Remark oldRemark \u003d transactionToTag.getRemark();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e(transactionToTag.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        int noOfTagsIgnored \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (Tag newTag : tagSet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (updatedTags.contains(newTag)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                existedTags.append(\"[\" + newTag.tagName + \"]\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                noOfTagsIgnored++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                updatedTags.add(newTag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (tagSet.size() \u003d\u003d noOfTagsIgnored) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new CommandException(MESSAGE_NO_NEW_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (transactionToTag instanceof Expense) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new Expense(oldDescription, oldValue, oldRemark, oldDate, updatedTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new Income(oldDescription, oldValue, oldRemark, oldDate, updatedTags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, actualIndex, updatedTransaction, transactionToTag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, transactionToTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, actualIndex, updatedTransaction, transactionToTag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 131,
      "lightz96": 34,
      "lye-jw": 1
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Undo the previous undoable command in THRIFT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UndoCommand extends NonScrollingCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo the previous undoable command.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD + \": Undo the previous undoable command.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Undoable commands are: add_expense, add_income, budget, clone, delete, tag, untag, update.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo successful\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String NO_UNDOABLE_COMMAND \u003d \"No valid command to undo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (model.hasUndoableCommand()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable command \u003d model.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            command.undo(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        throw new CommandException(NO_UNDOABLE_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 35,
      "lye-jw": 1
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/Undoable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Allows the command to perform undo and redo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface Undoable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Undo that specified commands. \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * E.g. Undo {@link AddExpenseCommand} will delete the expenses created by this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void undo(Model model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Redo undone command. \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * E.g. Redo {@link AddExpenseCommand} will add back the expense which was deleted by undo function."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void redo(Model model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 25
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/UntagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Tags a specified Transaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UntagCommand extends NonScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"untag\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Untags the transaction identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"The tags will be removed from existing tags, if they exist.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Untags the transaction identified by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"The tags will be removed from existing tags, if they exist.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To remove a tag from existing tag(s) of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_TAG + \"Food\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To remove multiple tags from existing tag(s) of the transaction at index 1 in the displayed \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"transaction list: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_TAG + \"Food \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + CliSyntax.PREFIX_TAG + \"Japanese\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_UNTAG_TRANSACTION_SUCCESS \u003d \"Updated Transaction: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_EXISTED \u003d \"\\nTag(s) %1$s do not exist and will be ignored.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_ORIGINAL_TRANSACTION \u003d \"\\n\\nOriginal: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_NOT_UNTAGGED \u003d \"At least one tag must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_NO_DEL_TAGS \u003d \"Specified tag(s) do not exist, the transaction was not updated.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final StringBuilder nonexistentTags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Index actualIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction transactionToTag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction updatedTransaction;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a UntagCommand to untag the specified {@code Transaction}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to update"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagSet of tags to be removed from the current set of tags, if they exist."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public UntagCommand(Index index, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(tagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d tagSet;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        nonexistentTags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.actualIndex \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.transactionToTag \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.updatedTransaction \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String originalTransactionNotification \u003d String.format(MESSAGE_ORIGINAL_TRANSACTION, transactionToTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        updatedTransaction \u003d createUntaggedTransaction(transactionToTag, tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String taggedTransactionNotification \u003d String.format(MESSAGE_UNTAG_TRANSACTION_SUCCESS, updatedTransaction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String nonexistentTagsNotification \u003d nonexistentTags.length() \u003d\u003d 0"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                : String.format(MESSAGE_TAG_NOT_EXISTED, nonexistentTags.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        actualIndex \u003d model.getIndexInFullTransactionList(transactionToTag).orElse(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new CommandResult(taggedTransactionNotification"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + nonexistentTagsNotification"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                + originalTransactionNotification);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                || (other instanceof UntagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 index.equals(((UntagCommand) other).index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                \u0026\u0026 tagSet.equals(((UntagCommand) other).tagSet));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates and returns a {@code Transaction}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * with the tags from {@code tagSet} removed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Transaction createUntaggedTransaction(Transaction transactionToTag,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            Set\u003cTag\u003e tagSet) throws CommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assert transactionToTag !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Description oldDescription \u003d transactionToTag.getDescription();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Value oldValue \u003d transactionToTag.getValue();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TransactionDate oldDate \u003d transactionToTag.getDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Remark oldRemark \u003d transactionToTag.getRemark();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e(transactionToTag.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        int noOfTagsIgnored \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (Tag targetTag : tagSet) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (!updatedTags.contains(targetTag)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                nonexistentTags.append(\"[\" + targetTag.tagName + \"]\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                noOfTagsIgnored++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                updatedTags.remove(targetTag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (tagSet.size() \u003d\u003d noOfTagsIgnored) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new CommandException(MESSAGE_NO_DEL_TAGS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (transactionToTag instanceof Expense) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new Expense(oldDescription, oldValue, oldRemark, oldDate, updatedTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new Income(oldDescription, oldValue, oldRemark, oldDate, updatedTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, actualIndex, updatedTransaction, transactionToTag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, transactionToTag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, actualIndex, updatedTransaction, transactionToTag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 129,
      "lightz96": 34,
      "lye-jw": 1
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.ui.TransactionListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Updates the details of an existing transaction in THRIFT."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateCommand extends ScrollingCommand implements Undoable {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the transaction identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            + \"Parameters: \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_VALUE + \"VALUE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Mee Siam \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            + CliSyntax.PREFIX_VALUE + \"3.00\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String HELP_MESSAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \": Updates the details of the transaction identified by the index number used in the displayed \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"transaction list. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME DESCRIPTION] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_VALUE + \"VALUE] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"Possible usages of \" + COMMAND_WORD + \": \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To update the name of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_NAME + \"Chicken rice\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To update the value of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_VALUE + \"3\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To update the remark of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_REMARK + \"Best food ever\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + \"To overwrite the existing tag(s) of the transaction at index 1 in the displayed transaction list: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            + COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX + \"1 \" + CliSyntax.PREFIX_TAG + \"food\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_UPDATE_TRANSACTION_SUCCESS \u003d \"Updated Transaction: %1$s\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_ORIGINAL_TRANSACTION \u003d \"\\n\\nOriginal: %1$s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private final UpdateTransactionDescriptor updateTransactionDescriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Index actualIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction transactionToUpdate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Transaction updatedTransaction;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to update"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param updateTransactionDescriptor details to update the transaction with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateCommand(Index index, UpdateTransactionDescriptor updateTransactionDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireNonNull(updateTransactionDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.updateTransactionDescriptor \u003d new UpdateTransactionDescriptor(updateTransactionDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.actualIndex \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.transactionToUpdate \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.updatedTransaction \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Updates the details of a THRIFT Transaction and scrolls to the updated Transaction in the displayed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * TransactionListView UI."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param model {@code Model} which UpdateCommand should operate on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @param transactionListPanel {@code TransactionListPanel} which contains the TransactionListView UI."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public CommandResult execute(Model model, TransactionListPanel transactionListPanel) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String originalTransactionNotification \u003d String.format(MESSAGE_ORIGINAL_TRANSACTION, transactionToUpdate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        updatedTransaction \u003d createUpdatedTransaction(transactionToUpdate, updateTransactionDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String updatedTransactionNotification \u003d String.format(MESSAGE_UPDATE_TRANSACTION_SUCCESS, updatedTransaction);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        actualIndex \u003d model.getIndexInFullTransactionList(transactionToUpdate).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Use null comparison instead of requireNonNull(transactionListPanel) as current JUnit tests are unable to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // handle JavaFX initialization"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (model.isInView(updatedTransaction) \u0026\u0026 transactionListPanel !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            transactionListPanel.getTransactionListView().scrollTo(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return new CommandResult(updatedTransactionNotification + originalTransactionNotification);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToUpdate}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * updated with {@code updateTransactionDescriptor}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private static Transaction createUpdatedTransaction(Transaction transactionToUpdate,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                                                        UpdateTransactionDescriptor updateTransactionDescriptor) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assert transactionToUpdate !\u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Description updatedDescription \u003d updateTransactionDescriptor.getDescription()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .orElse(transactionToUpdate.getDescription());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Value updatedValue \u003d updateTransactionDescriptor.getValue().orElse(transactionToUpdate.getValue());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Remark updatedRemark \u003d updateTransactionDescriptor.getRemark().orElse(transactionToUpdate.getRemark());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        TransactionDate updatedDate \u003d updateTransactionDescriptor.getDate().orElse(transactionToUpdate.getDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateTransactionDescriptor.getTags().orElse(transactionToUpdate.getTags());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (transactionToUpdate instanceof Expense) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Expense(updatedDescription, updatedValue, updatedRemark, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Income(updatedDescription, updatedValue, updatedRemark, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                \u0026\u0026 updateTransactionDescriptor.equals(e.updateTransactionDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, transactionToUpdate, updatedTransaction, actualIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, transactionToUpdate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(model, transactionToUpdate, updatedTransaction, actualIndex);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Stores the details to update the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static class UpdateTransactionDescriptor {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Value value;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private TransactionDate date;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        public UpdateTransactionDescriptor() {}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        public UpdateTransactionDescriptor(UpdateTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setValue(toCopy.value);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, value, remark, date, tags);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setValue(Value value) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cValue\u003e getValue() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(value);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setDate(TransactionDate date) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cTransactionDate\u003e getDate() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (!(other instanceof UpdateTransactionDescriptor)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            UpdateTransactionDescriptor e \u003d (UpdateTransactionDescriptor) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getValue().equals(e.getValue())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 181,
      "lightz96": 41,
      "lye-jw": 58
    }
  },
  {
    "path": "src/main/java/thrift/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandParser extends AddTransactionCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VALUE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        CliSyntax.PREFIX_REMARK, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VALUE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description description \u003d parseTransactionDescription(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value value \u003d parseTransactionValue(argMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Remark remark \u003d parseTransactionRemark(argMultimap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionDate date \u003d parseTransactionDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d parseTransactionTags(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new Expense(description, value, remark, date, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 46
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/AddIncomeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses input arguments and creates a new AddIncomeCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommandParser extends AddTransactionCommandParser implements Parser\u003cAddIncomeCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIncomeCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * and returns an AddIncomeCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public AddIncomeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VALUE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        CliSyntax.PREFIX_REMARK, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VALUE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    AddIncomeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Description description \u003d parseTransactionDescription(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Value value \u003d parseTransactionValue(argMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Remark remark \u003d parseTransactionRemark(argMultimap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionDate date \u003d parseTransactionDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d parseTransactionTags(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income income \u003d new Income(description, value, remark, date, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new AddIncomeCommand(income);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 46
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/AddTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.TransactionDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses common parameters that are necessary for either AddExpenseCommand or AddIncomeCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public abstract class AddTransactionCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * This methods checks if the required prefixes are present in the {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param argumentMultimap the object to check for the existence of prefixes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param prefixes variable amount of {@code Prefix} to confirm the existence of."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if specified prefixes are present in the argumentMultimap."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses for {@code Description} object given the {@code ArgumentMultimap} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param argMultimap the object to parse from."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code Description} object based on the values in the input {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected Description parseTransactionDescription(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return ParserUtil.parseDescription(argMultimap.getSingleValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses for {@code Value} object given the {@code ArgumentMultimap} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param argMultimap the object to parse from."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code Value} object based on the values in the input {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected Value parseTransactionValue(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return ParserUtil.parseValue(argMultimap.getSingleValue(CliSyntax.PREFIX_VALUE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses for {@code Remark} object given the {@code ArgumentMultimap} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    * @param argMultimap the object to parse from."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    * @return {@code Remark} object based on the values in the input {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected Remark parseTransactionRemark(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Optional\u003cString\u003e remark \u003d argMultimap.getSingleValue(CliSyntax.PREFIX_REMARK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (remark.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return ParserUtil.parseRemark(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return ParserUtil.parseRemark(remark.get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses for {@code TransactionDate} object using the current System\u0027s date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code TransactionDate} object based on the current System\u0027s date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected TransactionDate parseTransactionDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new TransactionDate(DATE_FORMATTER.format(new Date()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses for {@code Set\u003cTag\u003e} object given the {@code ArgumentMultimap} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param argMultimap the object to parse from."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return {@code Set\u003cTag\u003e} object based on the values in the input {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    protected Set\u003cTag\u003e parseTransactionTags(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 83
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String WARNING_NOT_SINGULAR_FORMAT \u003d \"Too many arguments for prefix \\\"%1$s\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a single value of {@code prefix}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException if more than one argument with the same prefix is provided"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Optional\u003cString\u003e getSingleValue(Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (values.size() \u003e 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new ParseException(String.format(WARNING_NOT_SINGULAR_FORMAT, prefix.getPrefix()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Returns the index specified with the \"i/\" prefix."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public String getIndexFromCommand() throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return getSingleValue(CliSyntax.PREFIX_INDEX).orElse(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "krusagiz": 19,
      "lye-jw": 6,
      "-": 59
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/BudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand and returns an BudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_VALUE, CliSyntax.PREFIX_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (argMultimap.getSingleValue(CliSyntax.PREFIX_VALUE).isEmpty()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || argMultimap.getSingleValue(CliSyntax.PREFIX_DATE).isEmpty()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar monthYear \u003d ParserUtil.parseDate(argMultimap.getSingleValue(CliSyntax.PREFIX_DATE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        BudgetValue value \u003d ParserUtil.parseBudgetValue(argMultimap.getSingleValue(CliSyntax.PREFIX_VALUE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Budget budget \u003d new Budget(monthYear, value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new BudgetCommand(budget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 38
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final Prefix PREFIX_CURRENCY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Prefix PREFIX_VALUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "krusagiz": 2,
      "kensonoenqh": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/CloneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class CloneCommandParser extends AddTransactionCommandParser implements Parser\u003cCloneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CloneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * and returns a CloneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public CloneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getIndexFromCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new CloneCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CloneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 33
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ConvertCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Parses input arguments and creates a new ConvertCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class ConvertCommandParser implements Parser\u003cConvertCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ConvertCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * and returns an ConvertCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public ConvertCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_VALUE, CliSyntax.PREFIX_CURRENCY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        double value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cString\u003e currencies;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            String valueString \u003d argMultimap.getSingleValue(CliSyntax.PREFIX_VALUE).orElse(\"1.00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            value \u003d ParserUtil.parseValue(valueString).getMonetaryValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            List\u003cString\u003e currencyStrings \u003d argMultimap.getAllValues(CliSyntax.PREFIX_CURRENCY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (currencyStrings.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencies \u003d ParserUtil.parseCurrencies(currencyStrings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (currencies.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                currencies.add(0, \"SGD\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                            ConvertCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                            pe.getMessage()), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new ConvertCommand(value, currencies);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 53
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getIndexFromCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 10,
      "lye-jw": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new FindCommand(new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Parses user input and creates a new HelpCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        switch (userInput.trim()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(AddExpenseCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case AddIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(AddIncomeCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(BudgetCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case CloneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(CloneCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case ConvertCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(ConvertCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(DeleteCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(ExitCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(FindCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(HelpCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(ListCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(RedoCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(TagCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(UndoCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case UntagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(UntagCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(UpdateCommand.HELP_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case EMPTY_STRING:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommand(EMPTY_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new ParseException(String.format(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 71
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    public static final String MESSAGE_INVALID_MONTH_FORMAT \u003d \"Invalid month format! \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            + CliSyntax.PREFIX_MONTH + \"MONTH (must be of format MMM)\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_MONTH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_MONTH)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "                \u0026\u0026 !args.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "                    ListCommand.MESSAGE_USAGE)); //prefix m/ is not present so there are invalid arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        return getCommand(argMultimap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    private ListCommand getCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        if (arePrefixesPresent(argMultimap, CliSyntax.PREFIX_MONTH)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "                    ListCommand.MESSAGE_USAGE)); //prefix m/ exists, but there is invalid preamble before the prefix."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, CliSyntax.PREFIX_MONTH)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(CliSyntax.PREFIX_MONTH).get()); //to be used"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            return new ListCommand(); //filter by month tbc, to look like return new ListCommand(month);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            return new ListCommand(); //list all transactions, as prefix m/ does not exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * This methods checks if the required prefixes are present in the {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * @param argumentMultimap the object to check for the existence of prefixes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * @param prefixes variable amount of {@code Prefix} to confirm the existence of."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * @return true if specified prefixes are present in the argumentMultimap."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kensonoenqh": 60
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.Budget.BUDGET_DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.util.CurrencyUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_INVALID_CURRENCY \u003d \"Currency entered is not valid. (Must exist)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String description} into a {@code Description} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String monthYear} into a {@code Calendar} with {@code Calendar.MONTH} and {@code Calendar.YEAR}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * set and returns it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Calendar parseDate(String monthYear) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(monthYear);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar date \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedMonthYear \u003d monthYear.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!trimmedMonthYear.matches(Budget.VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Budget.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            date.setTime(BUDGET_DATE_FORMAT.parse(trimmedMonthYear));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Budget.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String value} into a {@code Value} and returns it."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Value parseValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Value.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Value(trimmedValue);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String value} into a {@code BudgetValue} and returns it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static BudgetValue parseBudgetValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!BudgetValue.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(BudgetValue.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new BudgetValue(trimmedValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark} and returns it."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag} and returns it."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} and returns it."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Checks if the currencies are valid"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param currencies The currencies"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return the same currencies (without modification)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static List\u003cString\u003e parseCurrencies(Collection\u003cString\u003e currencies) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(currencies);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        final List\u003cString\u003e currencyList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        for (String currency : currencies) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (!currency.matches(\"[A-Za-z]+\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_CURRENCY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (!CurrencyUtil.getCurrencyMap().containsKey(currency.toUpperCase())) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_CURRENCY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyList.add(currency.split(\" \")[0]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return currencyList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            String pattern \u003d \"MMMM\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            SimpleDateFormat sdf \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            String monthCaps \u003d sdf.format(sdf.parse(month)).toUpperCase();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            return Month.valueOf(monthCaps);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            throw new ParseException(ListCommandParser.MESSAGE_INVALID_MONTH_FORMAT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 140,
      "krusagiz": 27,
      "kensonoenqh": 19
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/TagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Parses input arguments and creates a new TagCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            String indexStr \u003d argMultimap.getSingleValue(CliSyntax.PREFIX_INDEX)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    .orElseThrow(() -\u003e new ParseException(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new ParseException(TagCommand.MESSAGE_NOT_TAGGED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE, TagCommand.MESSAGE_USAGE, pe.getMessage()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new TagCommand(index, tagSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 49
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/ThriftParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public String getArguments(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Adding transactions or budget commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case AddIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new AddIncomeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case CloneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new CloneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Deleting transactions command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Altering an existing transaction commands."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        case UntagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new UntagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * Filtered transaction list manipulation commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "         * Info related commands."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        case ConvertCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return new ConvertCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         * System related commands."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 45,
      "lye-jw": 4,
      "krusagiz": 15,
      "lightz96": 17,
      "kensonoenqh": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/UntagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Parses input arguments and creates a new UntagCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UntagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * and returns an UntagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public UntagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            String indexStr \u003d argMultimap.getSingleValue(CliSyntax.PREFIX_INDEX)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    .orElseThrow(() -\u003e new ParseException(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                throw new ParseException(UntagCommand.MESSAGE_NOT_UNTAGGED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE, UntagCommand.MESSAGE_USAGE, pe.getMessage()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throw new ParseException(UntagCommand.MESSAGE_NOT_UNTAGGED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new UntagCommand(index, tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 52
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_INDEX, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_VALUE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        CliSyntax.PREFIX_REMARK, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getIndexFromCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand.UpdateTransactionDescriptor updateTransactionDescriptor \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new UpdateCommand.UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Besides Tags, multiple repeated fields not allowed for more comprehensible results"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            updateTransactionDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                argMultimap.getSingleValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_VALUE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            updateTransactionDescriptor.setValue(ParserUtil.parseValue("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    argMultimap.getSingleValue(CliSyntax.PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            updateTransactionDescriptor.setRemark(ParserUtil.parseRemark("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    argMultimap.getSingleValue(CliSyntax.PREFIX_REMARK).get()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        parseTagsForUpdate(argMultimap.getAllValues(CliSyntax.PREFIX_TAG))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .ifPresent(updateTransactionDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (!updateTransactionDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return new UpdateCommand(index, updateTransactionDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForUpdate(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 58,
      "lye-jw": 27
    }
  },
  {
    "path": "src/main/java/thrift/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/thrift/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.Undoable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the user prefs\u0027 THRIFT file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Sets the user prefs\u0027 THRIFT file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void setThriftFilePath(Path thriftFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Replaces THRIFT data with the data in {@code thrift}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void setThrift(ReadOnlyThrift thrift);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /** Returns THRIFT */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    ReadOnlyThrift getThrift();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if a transaction with the same identity as {@code transaction} exists in the transactions list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an Optional that contains the {@link Index} of the {@code transaction}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param transaction is the transaction that you are interested in its index in the full transaction list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return an Optional containing the index of the transaction."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cIndex\u003e getIndexInFullTransactionList(Transaction transaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * The transaction must exist in the transactions list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void deleteTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Deletes the transaction based on given index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void deleteTransaction(Index index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Deletes the last transaction in the full transaction list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void deleteLastTransaction();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds the given expense to a specified index."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void addExpense(Expense expense, Index index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds the given income."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void addIncome(Income income);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds the given income to a specified index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void addIncome(Income income, Index index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the monthly budget to the specified budget."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param budget is the budget to be replaced."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return replaced budget wrapped in optional."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cBudget\u003e setBudget(Budget budget);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Resets the monthly budget to null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param budget is the budget to be removed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void resetBudgetForThatMonth(Budget budget);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code updatedTransaction}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code target} must exist in the transactions list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    void setTransaction(Transaction target, Transaction updatedTransaction);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the given transaction {@code actualIndex} with {@code updatedTransaction}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code actualIndex} must be a valid {@code Index}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns the current month and year in MMM yyyy format. */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    String getCurrentMonthYear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns the current month\u0027s budget. */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    double getCurrentMonthBudget();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Filters the view of the transaction list to only show transactions that occur in the current month. */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void updateFilteredTransactionListToCurrentMonth();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Updates the balance tracked by the model by summing values from the {@code Transaction} in the filteredList."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    void updateBalanceForCurrentMonth();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the balance held by the model to update the GUI with."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    double getBalance();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Updates the expense tracked by the model by summing values from the {@code Transaction} in the filteredList."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void updateExpenseForCurrentMonth();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the expense held by the model to update the GUI with."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    double getExpense();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Updates the income tracked by the model by summing values from the {@code Transaction} in the filteredList."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void updateIncomeForCurrentMonth();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the income held by the model to update the GUI with."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    double getIncome();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns if {@code transaction} is currently in {@code FilteredList\u003cTransaction\u003e}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    boolean isInView(Transaction transaction);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Keeps track of past undoable commands."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void keepTrackCommands(Undoable command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the previous undoable command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return previous undoable command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Undoable getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Checks if there is any undoable command to undo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return true if there is undoable command, else false."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    boolean hasUndoableCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the undone command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return undone command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Undoable getUndoneCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Checks if there is any undone command to redo."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return true if there is undone command, else false."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    boolean hasUndoneCommand();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 57,
      "lightz96": 105,
      "lye-jw": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/thrift/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.Undoable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionIsInMonthYearPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents the in-memory model of the THRIFT data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Thrift thrift;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final PastUndoableCommands pastUndoableCommands;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Calendar currentMonthYear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private double balance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private double expense;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** {@code Predicate} that always show the current month transactions */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Predicate\u003cTransaction\u003e predicateShowCurrentMonthTransactions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Initializes a ModelManager with the given thrift, userPrefs and pastUndoableCommands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ModelManager(ReadOnlyThrift thrift, ReadOnlyUserPrefs userPrefs, PastUndoableCommands pastUndoableCommands) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireAllNonNull(thrift, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.fine(\"Initializing with THRIFT: \" + thrift + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift \u003d new Thrift(thrift);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(this.thrift.getTransactionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.pastUndoableCommands \u003d pastUndoableCommands;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        currentMonthYear \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balance \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expense \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicateShowCurrentMonthTransactions \u003d new TransactionIsInMonthYearPredicate(currentMonthYear);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this(new Thrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return userPrefs.getThriftFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thriftFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(thriftFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d THRIFT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThrift(ReadOnlyThrift thrift) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift.resetData(thrift);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.hasTransaction(t);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cIndex\u003e getIndexInFullTransactionList(Transaction transaction) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.getTransactionIndex(transaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.removeTransaction(transaction);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void deleteTransaction(Index index) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.removeTransactionByIndex(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void deleteLastTransaction() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.removeLastTransaction();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(expense);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void addExpense(Expense expense, Index index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(expense, index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(income);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void addIncome(Income income, Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(income, index);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String getCurrentMonthYear() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new SimpleDateFormat(\"MMMMM yyyy\").format(currentMonthYear.getTime());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getCurrentMonthBudget() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Optional\u003cBudget\u003e optBudget \u003d thrift.getBudgetList().getBudgetForMonthYear(currentMonthYear);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (optBudget.isPresent()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return optBudget.get().getBudgetValue().getMonetaryValue();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cBudget\u003e setBudget(Budget budget) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.setBudget(budget);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetBudgetForThatMonth(Budget budget) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.removeBudget(budget);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction(Transaction target, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, updatedTransaction);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        thrift.setTransaction(target, updatedTransaction);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        updateBalanceForCurrentMonth();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CollectionUtil.requireAllNonNull(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        thrift.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        updateBalanceForCurrentMonth();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Transaction} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code versionedThrift}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /** Filters the view of the transaction list to only show transactions that occur in the current month. */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateFilteredTransactionListToCurrentMonth() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        filteredTransactions.setPredicate(predicateShowCurrentMonthTransactions);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        updateBalanceForCurrentMonth();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateBalanceForCurrentMonth() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        //If transaction does not belong to current displayed month, don\u0027t update the balance."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        logger.info(\"Original balance: \" + balance);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balance \u003d getCurrentMonthBudget() + thrift.getTransactionList().stream()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .filter(t -\u003e {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Calendar temp \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    temp.setTime(t.getDate().getDate());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    if (temp.get(Calendar.MONTH) !\u003d currentMonthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                            || temp.get(Calendar.YEAR) !\u003d currentMonthYear.get(Calendar.YEAR)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                })"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .mapToDouble(t -\u003e {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    double value \u003d t.getValue().getMonetaryValue();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    if (t instanceof Expense) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        return value * -1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    return value;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                })"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        logger.info(\"Updated balance: \" + balance);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getBalance() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return balance;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void updateExpenseForCurrentMonth() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //If transaction does not belong to current displayed month and not an expense, don\u0027t update the expense."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Original expense: \" + expense);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expense \u003d thrift.getTransactionList().stream()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .filter(t -\u003e {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    Calendar temp \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    temp.setTime(t.getDate().getDate());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    if (temp.get(Calendar.MONTH) !\u003d currentMonthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                            || temp.get(Calendar.YEAR) !\u003d currentMonthYear.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                            || t instanceof Income) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                })"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .mapToDouble(t -\u003e t.getValue().getMonetaryValue())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Updated expense: \" + expense);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public double getExpense() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return expense;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void updateIncomeForCurrentMonth() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //If transaction does not belong to current displayed month and not an income, don\u0027t update the income."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Original income: \" + income);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        income \u003d thrift.getTransactionList().stream()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .filter(t -\u003e {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    Calendar temp \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    temp.setTime(t.getDate().getDate());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    if (temp.get(Calendar.MONTH) !\u003d currentMonthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                            || temp.get(Calendar.YEAR) !\u003d currentMonthYear.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                            || t instanceof Expense) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                })"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .mapToDouble(t -\u003e t.getValue().getMonetaryValue())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logger.info(\"Updated income: \" + income);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public double getIncome() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return income;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isInView(Transaction transaction) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return filteredTransactions.contains(transaction);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift.equals(other.thrift)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Past Commands History \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void keepTrackCommands(Undoable command) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.addPastCommand(command);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Undoable getPreviousUndoableCommand() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return pastUndoableCommands.getCommandToUndo();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public boolean hasUndoableCommand() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return pastUndoableCommands.hasUndoCommand();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Undoable getUndoneCommand() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return pastUndoableCommands.getCommandToRedo();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public boolean hasUndoneCommand() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return pastUndoableCommands.hasRedoCommand();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 103,
      "lightz96": 144,
      "lye-jw": 3,
      "-": 104
    }
  },
  {
    "path": "src/main/java/thrift/model/PastUndoableCommands.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Stores all the past undoable commands executed by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class PastUndoableCommands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Stack\u003cUndoable\u003e undoStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Stack\u003cUndoable\u003e redoStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public PastUndoableCommands() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Keeps track of undoable command. \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * NOTE: You cannot redo undone commands once new undoable command is tracked."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param command is the undoable command to be tracked"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void addPastCommand(Undoable command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (hasRedoCommand()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            clearRedoStack();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoStack.push(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Retrieves undoable command to perform undo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return retrieved undoable command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Undoable getCommandToUndo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoCommand \u003d undoStack.pop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        addUndoneCommand(undoCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Checks if there is any available command to undo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return true if there is available commands to perform undo, else false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public boolean hasUndoCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return !undoStack.isEmpty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes all undoable commands to be redone."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private void clearRedoStack() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Keeps track of undone command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param command is the undoable command to be tracked"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private void addUndoneCommand(Undoable command) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        redoStack.push(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Retrieves undone command to perform redo."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return retrieved undone command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Undoable getCommandToRedo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable redoCommand \u003d redoStack.pop();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoStack.push(redoCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Checks if there is any available command to redo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return true if there is available commands to perform redo, else false."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public boolean hasRedoCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return !redoStack.isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 88
    }
  },
  {
    "path": "src/main/java/thrift/model/ReadOnlyThrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Unmodifiable view of THRIFT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface ReadOnlyThrift {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the budget list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    BudgetList getBudgetList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 20,
      "lightz96": 2
    }
  },
  {
    "path": "src/main/java/thrift/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/thrift/model/Thrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Wraps all data at the THRIFT level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class Thrift implements ReadOnlyThrift {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionList transactions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final BudgetList budgets;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Creates an THRIFT using the Transaction in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift(ReadOnlyThrift toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the contents of the transaction list with {@code transactions}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactions.setTransactions(transactions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the contents of the budget list with {@code budgets}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setBudgets(BudgetList budgets) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Resets the existing data of this transactions list with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData(ReadOnlyThrift newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setTransactions(newData.getTransactionList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //// transaction-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a transaction to THRIFT."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addTransaction(Transaction t) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.add(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a transaction to a specified index in THRIFT."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void addTransaction(Transaction t, Index index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactions.add(t, index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds the specified {@code budget} into the budget list, updates the budget instead if it already exists."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param budget budget to be replaced with."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return replaced budget wrapped in optional."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cBudget\u003e setBudget(Budget budget) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return budgets.setBudget(budget);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes {@code budget} from budgets."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param budget is the budget to be removed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeBudget(Budget budget) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        budgets.removeBudget(budget);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Replaces the given transaction {@code target} in the list with {@code updatedTransaction}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code target} must exist in THRIFT."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction(Transaction target, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(target, updatedTransaction);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        transactions.setTransaction(target, updatedTransaction);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the given transaction {@code actualIndex} in the list with {@code updatedTransaction}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code actualIndex} must be a valid index."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.setTransactionWithIndex(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the specified transaction exists in the transactions list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean hasTransaction(Transaction t) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.contains(t);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes {@code key} from this {@code Thrift}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code key} must exist in THRIFT."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void removeTransaction(Transaction key) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.remove(key);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes last transaction from this {@code Thrift}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeLastTransaction() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactions.removeLast();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Remove the transaction from the list based on the index."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeTransactionByIndex(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactions.removeByIndex(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an Optional that contains the {@link Index} of the {@code transaction}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param transaction is the transaction that you are interested in its index in the full transaction list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return an Optional containing the index of the transaction."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cIndex\u003e getTransactionIndex(Transaction transaction) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return transactions.getIndex(transaction);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetList getBudgetList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.asUnmodifiableObservableList().size() + \" transactions\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                || (other instanceof Thrift // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 transactions.equals(((Thrift) other).transactions)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 budgets.equals(((Thrift) other).budgets));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactions.hashCode();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 59,
      "lightz96": 62,
      "lye-jw": 3,
      "-": 73
    }
  },
  {
    "path": "src/main/java/thrift/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Path thriftFilePath \u003d Paths.get(\"data\" , \"thrift.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Path currencyMappingsFilePath \u003d Paths.get(\"data\" , \"currency.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setThriftFilePath(newUserPrefs.getThriftFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thriftFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thriftFilePath \u003d thriftFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Path getCurrencyMappingsFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return currencyMappingsFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u0026\u0026 thriftFilePath.equals(o.thriftFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return Objects.hash(guiSettings, thriftFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + thriftFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 10,
      "krusagiz": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/thrift/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents a Tag in THRIFT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "krusagiz": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a budget for a particular month, containing a Date and Value object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final SimpleDateFormat BUDGET_DATE_FORMAT \u003d new SimpleDateFormat(\"MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d \"Month should be in the following format: MM/yyyy.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(0[1-9]|10|11|12)\\\\/\\\\d{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Calendar period;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private BudgetValue value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Creates a Budget object that has {@code value} amount of money for the month of {@code period}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Budget(Calendar period, BudgetValue value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(period, value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Calendar getBudgetDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String getBudgetDateString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return BUDGET_DATE_FORMAT.format(period.getTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetValue getBudgetValue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherBudget.getBudgetDate().equals(getBudgetDate())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherBudget.getBudgetValue().equals(getBudgetValue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Objects.hash(period, value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        builder.append(\"\\nAmount: $\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(value.toString())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\"\\nMonth: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getBudgetDateString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 71
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/BudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A list of {@code Budget} that does not allow nulls. A unique month-year can contain one budget set, which can be"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * changed by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cBudget\u003e internalList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an optional budget tied to the given {@code Calendar} date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Optional\u003cBudget\u003e getBudgetForMonthYear(Calendar toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (Budget b : internalList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (b.getBudgetDate().get(Calendar.MONTH) \u003d\u003d toCheck.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 b.getBudgetDate().get(Calendar.YEAR) \u003d\u003d toCheck.get(Calendar.YEAR)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                return Optional.of(b);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds or updates an existing {@code Budget} in the budget list with {@code toSet}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param toSet budget to be replaced with."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return replaced budget wrapped in optional."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cBudget\u003e setBudget(Budget toSet) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toSet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Optional\u003cBudget\u003e optBudget \u003d getBudgetForMonthYear(toSet.getBudgetDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (optBudget.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            internalList.set(internalList.indexOf(optBudget.get()), toSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            internalList.add(toSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return optBudget;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Removes {@code budget} from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param budget budget to be removed from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeBudget(Budget budget) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        internalList.remove(budget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the content of this budget list with {@code replacement}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setBudgets(BudgetList replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.addAll(replacement.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof BudgetList) //instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        \u0026\u0026 internalList.equals(((BudgetList) other).internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 74,
      "lightz96": 15
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/BudgetValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.Value.DECIMAL_FORMATTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Budget\u0027s monetary value in the Budgets list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetValue {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Value should only contain non-negative numbers and an optional decimal point, which if specified, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    + \"accepts up to 2 decimal digits.\\nValue should also be lesser than 1 billion.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]\\\\d{0,8}(\\\\.\\\\d{0,2})?$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code BudgetValue} that allows $0."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Monetary cost describing the value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public BudgetValue(String value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidValue(value), VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.amount \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if a given String is a valid monetary value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if amount is a valid double."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns this object\u0027s value in double."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Double getMonetaryValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the value from {@link #getMonetaryValue()} in String type. This is useful for formatting to JSON and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * storing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String getUnformattedString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return String.format(\"%.2f\", getMonetaryValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return String.valueOf(DECIMAL_FORMATTER.format(amount));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof BudgetValue // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 amount.equals(((BudgetValue) other).amount)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 71
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Transaction\u0027s message description in the Transactions list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param description Description describing the Transaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 40
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/DescriptionOrRemarkContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Description} or {@code Remark} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionOrRemarkContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public DescriptionOrRemarkContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(transaction.getDescription().toString(), keyword)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    } else if (StringUtil.containsWordIgnoreCase(transaction.getRemark().toString(), keyword)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof DescriptionOrRemarkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionOrRemarkContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 39
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents an Expense in the transactions list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Expense extends Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Expense(Description description, Value value, Remark remark, TransactionDate date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if both expenses have the same description and value. This allows easier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * cloning of expense transactions in the future."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isSameTransaction(Transaction otherExpense) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getValue().equals(getValue());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getValue().equals(getValue())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Objects.hash(description, date, value, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        builder.append(\"[-] \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" ($\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getValue())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\") Date: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Remarks: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 111
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents an Income in the transactions list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Income extends Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Value value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Income(Description description, Value value, Remark remark, TransactionDate date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if both income have the same description and value. This allows easier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * cloning of income transactions in the future."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean isSameTransaction(Transaction otherIncome) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (otherIncome \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherIncome !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getValue().equals(getValue());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof Income)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income otherIncome \u003d (Income) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return otherIncome.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getDate().equals(getDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getValue().equals(getValue())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 otherIncome.getTags().equals(getTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Objects.hash(description, date, value, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        builder.append(\"[+] \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" ($\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getValue())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\") Date: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Remarks: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limerencee": 112
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Transaction\u0027s remark which is optional."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param remark Remark describing the Transaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 40
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a transaction containing the various types of transaction parameters such as Description,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Date, Value, Tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract boolean isSameTransaction(Transaction otherTransaction);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Get this Transaction object\u0027s Description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Description getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Get this Transaction object\u0027s Date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract TransactionDate getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets this Transaction object\u0027s Value in {@link Value#DEFAULT_CURRENCY}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * denomination."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * in {@link Value#DEFAULT_CURRENCY} denomination."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Value getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets this Transaction object\u0027s Remark."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return This Transaction object\u0027s Remark."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Remark getRemark();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets this Transaction object\u0027s set of Tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Set\u0026lt;Tag\u0026gt; belonging to this Transaction object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public abstract Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 52
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/TransactionDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents the Date whereby the Transaction is created on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Date should be specified in dd/MM/yyyy format\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private String rawDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code TransactionDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date Datestamp for the Transaction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws ParseException If invalid date String is supplied, but it will be handled in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidDate(date), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.date \u003d DATE_FORMATTER.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            rawDate \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the supplied Date string is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param date Date string to check for validity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if the supplied string is a valid Date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            DATE_FORMATTER.setLenient(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            DATE_FORMATTER.parse(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Gets the Date object for the Transaction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Date object belonging to the Transaction."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof TransactionDate // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 date.equals(((TransactionDate) other).date)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 82
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/TransactionIsInMonthYearPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code monthYear} matches the given monthYear."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionIsInMonthYearPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Calendar monthYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionIsInMonthYearPredicate(Calendar monthYear) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.monthYear \u003d monthYear;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar transactionMonthYear \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionMonthYear.setTime(transaction.getDate().getDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return monthYear.get(Calendar.MONTH) \u003d\u003d transactionMonthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 monthYear.get(Calendar.YEAR) \u003d\u003d transactionMonthYear.get(Calendar.YEAR) ? true : false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof TransactionIsInMonthYearPredicate) // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 (((TransactionIsInMonthYearPredicate) other).monthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u003d\u003d monthYear.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 ((TransactionIsInMonthYearPredicate) other).monthYear.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u003d\u003d monthYear.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 34
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A list of Transactions that does not allow nulls. However, the removal of a transaction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * uses Transaction#equals(Object) so as to ensure that the transaction with exactly the same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if the supplied Transaction object is inside this transaction list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTransaction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Adds a transaction to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a transaction to a specified index in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void add(Transaction toAdd, Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        internalList.add(index.getZeroBased(), toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code updatedTransaction}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction(Transaction target, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        requireAllNonNull(target, updatedTransaction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        internalList.set(index, updatedTransaction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the given transaction {@code actualIndex} in the list with {@code updatedTransaction}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code actualIndex} must be a valid index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(actualIndex, updatedTransaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int index \u003d actualIndex.getZeroBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (internalList.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.set(actualIndex.getZeroBased(), updatedTransaction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Remove the last transaction from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeLast() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        internalList.remove(internalList.size() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Remove the transaction from the list based on the index."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeByIndex(Index index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions(TransactionList replacement) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an Optional that contains the {@link Index} of the {@code transaction}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param transaction is the transaction that you are interested in its index in the full transaction list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @return an Optional containing the index of the transaction."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cIndex\u003e getIndex(Transaction transaction) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            if (transaction \u003d\u003d internalList.get(i)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                return Optional.of(Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof TransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        \u0026\u0026 internalList.equals(((TransactionList) other).internalList));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 116,
      "lightz96": 40,
      "lye-jw": 4
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/Value.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.util.CurrencyUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a Transaction\u0027s monetary value in the Transactions list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Value should only contain positive numbers and an optional decimal point, which if specified, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                    + \"accepts up to 2 decimal digits.\\nValue should also be less than 1 billion.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String CURRENCY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"Currency should only be \u0027SGD\u0027, \u0027MYR\u0027, \u0027USD\u0027 OR \u0027EUR\u0027!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d{0,8}(\\\\.\\\\d{0,2})?$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMATTER \u003d new DecimalFormat(\"#,##0.00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final Double amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final String currency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Value} with the default currency {@link #DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Monetary cost describing the value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value(String value) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidValue(value), VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.amount \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.currency \u003d DEFAULT_CURRENCY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code Value} with a specified currency."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param amount Monetary cost describing the value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Currency the amount is in."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Value(String amount, String currency) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidValue(amount), VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        checkArgument(isValidCurrency(currency), CURRENCY_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.amount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns true if a given String is a valid currency type."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Currency type to check if it is valid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if Currency type is supported."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidCurrency(String currency) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Map\u003cString, Double\u003e currencyMappings \u003d CurrencyUtil.getCurrencyMap();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return currencyMappings.containsKey(currency);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns true if a given String is a valid monetary value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return true if amount is a valid double."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the value in {@link #DEFAULT_CURRENCY} currency amount, if the currency is supported in"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link CurrencyUtil}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Value in {@link #DEFAULT_CURRENCY} denomination."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public double getMonetaryValue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Map\u003cString, Double\u003e currencyMappings \u003d CurrencyUtil.getCurrencyMap();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return CurrencyUtil.convertFromDefaultCurrency(currencyMappings, amount, currency);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the value from {@link #getMonetaryValue()} in String type. This is useful for formatting to JSON and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * storing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String getUnformattedString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return String.format(\"%.2f\", getMonetaryValue());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return String.valueOf(DECIMAL_FORMATTER.format(getMonetaryValue()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                || (other instanceof Value // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u0026\u0026 amount.equals(((Value) other).amount)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 currency.equals(((Value) other).currency)); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 111,
      "lye-jw": 1,
      "lightz96": 2
    }
  },
  {
    "path": "src/main/java/thrift/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6
    }
  },
  {
    "path": "src/main/java/thrift/model/util/CurrencyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains utility methods for dealing with currencies."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class CurrencyUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private static Map\u003cString, Double\u003e currencyMappings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static Map\u003cString, Double\u003e getCurrencyMap() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (currencyMappings \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings \u003d new HashMap\u003cString, Double\u003e(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"SGD\", 1.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"CAD\", 0.9664844933);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"HKD\", 5.6971093699);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"ISK\", 91.1964179891);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"PHP\", 37.5123460855);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"DKK\", 4.9176269178);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"HUF\", 219.6022914335);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"CZK\", 17.0494501877);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"GBP\", 0.5936327122);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"RON\", 3.1291894383);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"SEK\", 7.138671232);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"IDR\", 10277.9350760519);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"INR\", 51.5937973267);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"BRL\", 2.9753078291);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"RUB\", 46.9415289392);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"HRK\", 4.8910252189);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"JPY\", 78.0404293145);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"THB\", 22.0827023112);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"CHF\", 0.7208796997);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"EUR\", 0.6584578916);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"MYR\", 3.0424046882);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"BGN\", 1.2878119444);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"TRY\", 4.275762165);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"CNY\", 5.1733061171);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"NOK\", 6.6198064134);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"NZD\", 1.1471653388);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"ZAR\", 10.9895305195);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"USD\", 0.7262790545);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"MXN\", 14.1715282808);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"AUD\", 1.0737472839);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"ILS\", 2.5478369658);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"KRW\", 866.4449858432);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            currencyMappings.put(\"PLN\", 2.8434187134);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return currencyMappings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static void setCurrencyMap(Map\u003cString, Double\u003e currencyMappings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CurrencyUtil.currencyMappings \u003d currencyMappings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts input currency amount from {@link Value#DEFAULT_CURRENCY} denomination"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * to the currency specified in the input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currencyMappings Mapping of currency rates scaling from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link Value#DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Amount to convert."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Target currency to convert to."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Amount in target currency as a double."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static double convertFromDefaultCurrency(Map\u003cString, Double\u003e currencyMappings, double value,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                                    String currency) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currencyMappings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (currencyMappings.containsKey(currency.toUpperCase())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return (value * currencyMappings.get(currency.toUpperCase()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts input currency amount to {@link Value#DEFAULT_CURRENCY} denomination"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * from the currency specified in the input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currencyMappings Mapping of currency rates scaling from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@link Value#DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param value Amount to convert."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param currency Target currency to convert from."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return Amount in {@link Value#DEFAULT_CURRENCY} denomination as a double."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static double convertToDefaultCurrency(Map\u003cString, Double\u003e currencyMappings, double value, String currency) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currencyMappings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        if (currencyMappings.containsKey(currency.toUpperCase())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            return (value / currencyMappings.get(currency.toUpperCase()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Converts input currency amount from {@code currencyFrom} to {@code currencyTo} via {@link Value#DEFAULT_CURRENCY}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param currencyMappings Mapping of currency rates scaling from"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * *     {@link Value#DEFAULT_CURRENCY}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param value Amount to convert"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param currencyFrom Target currency to convert from"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param currencyTo Target currency to convert to"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return Amount in {@code currencyTo} denomination as a double."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public static double convert(Map\u003cString, Double\u003e currencyMappings, double value,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                                 String currencyFrom, String currencyTo) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(currencyMappings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(currencyTo);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        requireNonNull(currencyFrom);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        double valueInDefaultCurrency \u003d convertToDefaultCurrency(currencyMappings, value, currencyFrom);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return convertFromDefaultCurrency(currencyMappings, valueInDefaultCurrency, currencyTo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 57,
      "krusagiz": 69
    }
  },
  {
    "path": "src/main/java/thrift/storage/CurrencyMappingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Represents a storage for a HashMapof currency mappings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public interface CurrencyMappingsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns the file path of the Currency Mappings data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Path getCurrencyMappingsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns Currency Mappings data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    Optional\u003cHashMap\u003cString, Double\u003e\u003e readCurrencyMappings() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 29
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"period\") String period, @JsonProperty(\"value\") String value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        period \u003d source.getBudgetDateString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d source.getBudgetValue().getUnformattedString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalValueException if there are any data constraints violated in the adapted budget."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Calendar modelPeriod;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final BudgetValue modelValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"month String\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Date temp \u003d Budget.BUDGET_DATE_FORMAT.parse(period);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            modelPeriod \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            modelPeriod.setTime(temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(Budget.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    BudgetValue.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!BudgetValue.isValidValue(value)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(BudgetValue.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        modelValue \u003d new BudgetValue(value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Budget(modelPeriod, modelValue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 72
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonAdaptedTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Jackson-friendly version of {@link Transaction}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransaction} with the given transaction details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"type\") String type, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            @JsonProperty(\"value\") String value, @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            @JsonProperty(\"date\") String date, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonAdaptedTransaction(Transaction source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (source instanceof Expense) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            type \u003d \"expense\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            type \u003d \"income\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d source.getValue().getUnformattedString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        remark \u003d source.getRemark().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into the model\u0027s {@code Transaction} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final List\u003cTag\u003e transactionTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Transaction.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final String modelType \u003d type;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Value.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!Value.isValidValue(value)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Value modelValue \u003d new Value(value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    TransactionDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!TransactionDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new IllegalValueException(TransactionDate.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final TransactionDate modelDate \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(transactionTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (modelType.equals(\"expense\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Expense(modelDescription, modelValue, modelRemark, modelDate, modelTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Income(modelDescription, modelValue, modelRemark, modelDate, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 123,
      "lightz96": 4
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonCurrencyMappingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * A class to access Currency Mappings stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class JsonCurrencyMappingsStorage implements CurrencyMappingsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public JsonCurrencyMappingsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Path getCurrencyMappingsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Optional\u003cHashMap\u003cString, Double\u003e\u003e readCurrencyMappings() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return readCurrencyMappings(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Similar to {@link #readCurrencyMappings()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param mappingsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Optional\u003cHashMap\u003cString, Double\u003e\u003e readCurrencyMappings(Path mappingsFilePath)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throws DataConversionException, NoSuchElementException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        HashMap\u003cString, Double\u003e hashmap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (HashMap\u003cString, Double\u003e) JsonUtil.readJsonFile(mappingsFilePath, HashMap.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return Optional.of(hashmap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 47
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonSerializableThrift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StreamUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * An Immutable THRIFT that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "@JsonRootName(value \u003d \"thrift\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "class JsonSerializableThrift {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cJsonAdaptedTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Constructs a {@code JsonSerializableThrift} with the given transactions and budgets."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public JsonSerializableThrift(@JsonProperty(\"transactions\") List\u003cJsonAdaptedTransaction\u003e transactions,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                  @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Converts a given {@code ReadOnlyThrift} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableThrift}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public JsonSerializableThrift(ReadOnlyThrift source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactions.addAll(source.getTransactionList().stream().map(JsonAdaptedTransaction::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        budgets.addAll(StreamUtils.asStream(source.getBudgetList().iterator()).map(JsonAdaptedBudget::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Converts this THRIFT into the model\u0027s {@code Thrift} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (JsonAdaptedTransaction jsonAdaptedTransaction : transactions) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Transaction transaction \u003d jsonAdaptedTransaction.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            thrift.setBudget(budget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 22,
      "lightz96": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonThriftStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A class to access THRIFT data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonThriftStorage implements ThriftStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonThriftStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public JsonThriftStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return readThrift(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Similar to {@link #readThrift()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Optional\u003cJsonSerializableThrift\u003e jsonThrift \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                filePath, JsonSerializableThrift.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (!jsonThrift.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return Optional.of(jsonThrift.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        saveThrift(thrift, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Similar to {@link #saveThrift(ReadOnlyThrift)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        requireNonNull(thrift);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableThrift(thrift), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "lightz96": 20,
      "-": 54
    }
  },
  {
    "path": "src/main/java/thrift/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/thrift/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public interface Storage extends ThriftStorage, UserPrefsStorage, CurrencyMappingsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "lightz96": 4,
      "krusagiz": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/thrift/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Manages storage of Thrift data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private ThriftStorage thriftStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private CurrencyMappingsStorage currencyMappingsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public StorageManager(ThriftStorage thriftStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            CurrencyMappingsStorage currencyMappingsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thriftStorage \u003d thriftStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.currencyMappingsStorage \u003d currencyMappingsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Thrift methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftStorage.getThriftFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return readThrift(thriftStorage.getThriftFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thriftStorage.readThrift(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        saveThrift(thrift, thriftStorage.getThriftFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thriftStorage.saveThrift(thrift, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Currency Mappings methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Path getCurrencyMappingsFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return currencyMappingsStorage.getCurrencyMappingsFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Optional\u003cHashMap\u003cString, Double\u003e\u003e readCurrencyMappings() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return currencyMappingsStorage.readCurrencyMappings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "krusagiz": 16,
      "lightz96": 15,
      "-": 56
    }
  },
  {
    "path": "src/main/java/thrift/storage/ThriftStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Represents a storage for {@link Thrift}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public interface ThriftStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Path getThriftFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns Thrift data as a {@link ReadOnlyThrift}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see #getThriftFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    Optional\u003cReadOnlyThrift\u003e readThrift(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Saves the given {@link ReadOnlyThrift} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param thrift cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see #saveThrift(ReadOnlyThrift)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 46
    }
  },
  {
    "path": "src/main/java/thrift/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/thrift/ui/BalanceBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.Value.DECIMAL_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A ui for displaying the remaining balance for the month."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BalanceBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"BalanceBar.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label monthYearLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Label monthBudgetValueLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Label monthBalanceValueLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Label monthExpenseValueLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Label monthIncomeValueLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public BalanceBar(String monthYear, double monthBudget, double monthBalance, double monthExpense,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            double monthIncome) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        setMonthYear(monthYear);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        setMonthBudget(monthBudget);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        setMonthBalance(monthBalance);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setMonthExpense(monthExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setMonthIncome(monthIncome);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        monthBalanceValueLabel.setWrapText(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setMonthYear(String monthYear) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        monthYearLabel.setText(monthYear);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setMonthBudget(double monthBudget) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        monthBudgetValueLabel.setText(\"Budget: $\" + String.valueOf(DECIMAL_FORMATTER.format(monthBudget)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setMonthBalance(double monthBalance) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (monthBalance \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            sb.append(\"-$\").append(DECIMAL_FORMATTER.format(monthBalance * (-1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            monthBalanceValueLabel.setStyle(\"-fx-text-fill: #ff6c4f;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else if (monthBalance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            sb.append(\"$\").append(DECIMAL_FORMATTER.format(monthBalance));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthBalanceValueLabel.setStyle(\"-fx-text-fill: #757575;\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            sb.append(\"$\").append(DECIMAL_FORMATTER.format(monthBalance));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthBalanceValueLabel.setStyle(\"-fx-text-fill: #4CAF50;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        monthBalanceValueLabel.setText(sb.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Updates the monthly expense text in UI."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param monthExpense is the expense to be updated with."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setMonthExpense(double monthExpense) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (monthExpense \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthExpenseValueLabel.setStyle(\"-fx-text-fill: #757575;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthExpenseValueLabel.setStyle(\"-fx-text-fill: #ff6c4f;\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        monthExpenseValueLabel.setText(\"$\" + DECIMAL_FORMATTER.format(monthExpense));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Updates the monthly income text in UI."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param monthIncome is the income to be updated with."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setMonthIncome(double monthIncome) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        if (monthIncome \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthIncomeValueLabel.setStyle(\"-fx-text-fill: #757575;\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            monthIncomeValueLabel.setStyle(\"-fx-text-fill: #4CAF50;\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        monthIncomeValueLabel.setText(\"$\" + DECIMAL_FORMATTER.format(monthIncome));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 50,
      "lightz96": 42
    }
  },
  {
    "path": "src/main/java/thrift/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "         * @see Logic#execute(String, TransactionListPanel)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "lye-jw": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/thrift/ui/ExpenseTransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ExpenseTransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"ExpenseTransactionCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Thrift level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label expenseDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label expenseValue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label expenseDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label expenseRemark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseTransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseDescription.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseValue.setText(\"-$\" + transaction.getValue().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseDate.setText(transaction.getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expenseRemark.setText(\"Remarks: \" + transaction.getRemark().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transaction.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseDescription.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseValue.setWrapText(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expenseRemark.setWrapText(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof ExpenseTransactionCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ExpenseTransactionCard card \u003d (ExpenseTransactionCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 22,
      "lightz96": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/thrift/ui/FilteredBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A UI for displaying the meaning of the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class FilteredBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final String FXML \u003d \"FilteredBar.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Label filterLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public FilteredBar(String filteredName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        setFiltered(filteredName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setFiltered(String filteredName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        filterLabel.setText(\"Filter: \" + filteredName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 25
    }
  },
  {
    "path": "src/main/java/thrift/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w12-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/thrift/ui/IncomeTransactionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * An UI component that displays information of a {@code Income}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class IncomeTransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"IncomeTransactionCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Thrift level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label incomeDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label incomeValue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label incomeDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Label incomeRemark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeTransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeDescription.setText(transaction.getDescription().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeValue.setText(\"$\" + transaction.getValue().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeDate.setText(transaction.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        incomeRemark.setText(\"Remarks: \" + transaction.getRemark().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transaction.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeDescription.setWrapText(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeValue.setWrapText(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        incomeRemark.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (!(other instanceof IncomeTransactionCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        IncomeTransactionCard card \u003d (IncomeTransactionCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 22,
      "lightz96": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/java/thrift/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private BalanceBar balanceBar;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private FilteredBar filteredBar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private String monthYear;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private double budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private double balance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private double expense;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private StackPane transactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private StackPane balancebarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private StackPane filteredbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        //Show the current month transactions only."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        logic.setFilteredTransactionListToCurrentMonth();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        //Show the current month, budget and balance."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        monthYear \u003d logic.getCurrentMonthYear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        budget \u003d logic.getCurrentMonthBudget();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balance \u003d logic.getCurrentMonthBalance();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logic.computeInitialMonthExpense();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        logic.computeInitialMonthIncome();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expense \u003d logic.getCurrentMonthExpense();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        income \u003d logic.getCurrentMonthIncome();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        balanceBar \u003d new BalanceBar(monthYear, budget, balance, expense, income);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        balancebarPlaceholder.getChildren().add(balanceBar.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        filteredBar \u003d new FilteredBar(monthYear);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        filteredbarPlaceholder.getChildren().add(filteredBar.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getThriftFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionListPanel getTransactionListPanel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return transactionListPanel;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, transactionListPanel, balanceBar, filteredBar);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 27,
      "lightz96": 18,
      "-": 176
    }
  },
  {
    "path": "src/main/java/thrift/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/thrift/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/thrift/ui/TransactionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListView.setItems(transactionList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using either a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * {@code ExpenseTransactionCard} or a {@code IncomeTransactionCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                if (transaction instanceof Expense) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    setGraphic(new ExpenseTransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    setGraphic(new IncomeTransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public ListView\u003cTransaction\u003e getTransactionListView() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return transactionListView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 51,
      "lightz96": 1,
      "lye-jw": 3
    }
  },
  {
    "path": "src/main/java/thrift/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/thrift/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/thrift_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "lightz96": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/thrift/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/BalanceBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cHBox styleClass\u003d\"balance-bar-fill\"\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--    \u003cPane minWidth\u003d\"100\"\u003e\u003c/Pane\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--    \u003cLabel fx:id\u003d\"monthYearLabel\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cPane styleClass\u003d\"balance-bar-fill\" HBox.hgrow\u003d\"ALWAYS\"\u003e\u003c/Pane\u003e--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cPane styleClass\u003d\"balance-bar-ribbon\" minWidth\u003d\"20\"\u003e\u003c/Pane\u003e--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cPane minWidth\u003d\"10\"\u003e\u003c/Pane\u003e--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cLabel fx:id\u003d\"monthBudgetLabel\" /\u003e--\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cLabel fx:id\u003d\"monthBudgetValueLabel\" /\u003e--\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cLabel fx:id\u003d\"monthBalanceLabel\" /\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cLabel fx:id\u003d\"monthBalanceValueLabel\" /\u003e--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c!--  \u003cPane minWidth\u003d\"20\"\u003e\u003c/Pane\u003e--\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003cVBox prefHeight\u003d\"141.0\" prefWidth\u003d\"950.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"100.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"balance-bar\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"card-color\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"income-side-card-color\" prefHeight\u003d\"200.0\" prefWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"33.0\" fitWidth\u003d\"36.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003cImage url\u003d\"@img/profit-chart.png\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"incomeText\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"120.0\" prefWidth\u003d\"255.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"280.0\" styleClass\u003d\"balance-text\" text\u003d\"Income\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel fx:id\u003d\"monthIncomeValueLabel\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"280.0\" text\u003d\"\\$1000.00\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"card-color\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"expense-side-card-color\" prefHeight\u003d\"200.0\" prefWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"34.0\" fitWidth\u003d\"31.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003cImage url\u003d\"@img/loss-chart.png\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"expenseText\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"120.0\" prefWidth\u003d\"252.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"280.0\" styleClass\u003d\"balance-text\" text\u003d\"Expense\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel fx:id\u003d\"monthExpenseValueLabel\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"248.0\" text\u003d\"\\$1000.00\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"card-color\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"balance-side-card-color\" prefHeight\u003d\"200.0\" prefWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"65.0\" fitWidth\u003d\"28.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003c!--Icon made by bqlqn from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                           \u003cImage url\u003d\"@img/wallet.png\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cVBox id\u003d\"balanceText\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"120.0\" prefWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"280.0\" styleClass\u003d\"balance-text\" text\u003d\"Balance\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cLabel fx:id\u003d\"monthBalanceValueLabel\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"280.0\" text\u003d\"\\$1000.00\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003cHBox id\u003d\"monthlySetting\" prefWidth\u003d\"980.0\" styleClass\u003d\"monthlySetting\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"150.0\" prefWidth\u003d\"504.0\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"19.0\" fitWidth\u003d\"19.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cImage url\u003d\"@img/calendar.png\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cLabel prefHeight\u003d\"18.0\" prefWidth\u003d\"400.0\" text\u003d\"October 2019\" fx:id\u003d\"monthYearLabel\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"42.0\" prefWidth\u003d\"459.0\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cImage url\u003d\"@img/coin-stack.png\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                  \u003cLabel prefHeight\u003d\"18.0\" text\u003d\"Budget: $0.00\" fx:id\u003d\"monthBudgetValueLabel\"/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "lightz96": 120
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".list-cell #expenseValue {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-text-fill: #ff6c4f;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-label-padding: 25px 20px 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".list-cell #incomeValue {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-text-fill: #69ff4f;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-label-padding: 25px 20px 0 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".balance-bar-fill {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-background-color: #449AE6;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".balance-bar-ribbon {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-background-image: url(\u0027img/ribbon-head.png\u0027);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".balance-bar {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": ".balance-bar .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-font-family: \"Segoe UI Bold\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 31,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/ExpenseTransactionCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cVBox maxWidth\u003d\"700\" minWidth\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cHBox spacing\u003d\"5\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "              \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "              \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003cLabel fx:id\u003d\"expenseDescription\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003cLabel fx:id\u003d\"expenseDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003cLabel fx:id\u003d\"expenseRemark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reserved\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003cPane HBox.hgrow\u003d\"ALWAYS\"\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cLabel fx:id\u003d\"expenseValue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$value\" \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cInsets top\u003d\"-20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 40,
      "lightz96": 8
    }
  },
  {
    "path": "src/main/resources/view/FilteredBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER_RIGHT\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003cImageView fitHeight\u003d\"15.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003c!--Icon made by Freepik from www.flaticon.com--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cImage url\u003d\"@img/filter.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003cLabel fx:id\u003d\"filterLabel\" alignment\u003d\"CENTER_RIGHT\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lightz96": 22
    }
  },
  {
    "path": "src/main/resources/view/IncomeTransactionCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003cVBox maxWidth\u003d\"700\" minWidth\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    \u003cHBox alignment\u003d\"TOP_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                        \u003cLabel fx:id\u003d\"incomeDescription\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u003cLabel fx:id\u003d\"incomeDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                      \u003cLabel fx:id\u003d\"incomeRemark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reserved\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003cPane minWidth\u003d\"50\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003cLabel fx:id\u003d\"incomeValue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$value\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    \u003cInsets top\u003d\"-20.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 36,
      "lightz96": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "\u003cfx:root minHeight\u003d\"800\" maxHeight\u003d\"800\" minWidth\u003d\"1000\" maxWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"THRIFT\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    \u003cImage url\u003d\"@/images/thrift_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cURL value\u003d\"@WhiteTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cURL value\u003d\"@WhiteThemeExtensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"balancebarPlaceholder\" maxHeight\u003d\"200\" minHeight\u003d\"150\" prefHeight\u003d\"120\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"filteredbarPlaceholder\" prefWidth\u003d\"300.0\" maxHeight\u003d\"5.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets left\u003d\"10\" right\u003d\"15\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        \u003cVBox fx:id\u003d\"transactionListPanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "          \u003cStackPane fx:id\u003d\"transactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 24,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "  \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/WhiteTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    background-color: #F5F5F5; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #BDBDBD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #EEEEEE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #E0E0E0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #C5CAE9;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #1A237E;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #757575;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell #expenseValue {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #ff6c4f;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-label-padding: 25px 20px 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell #incomeValue {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #4CAF50;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-label-padding: 25px 20px 0 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     -fx-border-color: #F5F5F5;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #757575 #ffffff #ffffff #ffffff;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #616161;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #BDBDBD #BDBDBD #BDBDBD #BDBDBD;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".balance-bar-fill {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #449AE6;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".balance-bar-ribbon {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-image: url(\u0027img/ribbon-head.png\u0027);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".balance-bar {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".balance-bar .label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Bold\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #757575;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".side-card-color {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #757575;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/*https://stackoverflow.com/questions/16977100/confgure-margin-for-individual-element-via-java-fx-css*/"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".card-color {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-insets: 5px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 5px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".balance-text {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #ff6c4f;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 14px !important;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#balance-side-card-color {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #3949AB;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#income-side-card-color {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #00897B;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#expense-side-card-color {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #e53935;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#balanceText,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#expenseText,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#incomeText {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 8px;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#date-card {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #BDBDBD;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-insets: 5px;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 5px;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#date-card .label {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #757575;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #F5F5F5;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #757575;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #FFA000;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     -fx-background-color: #F57C00;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu:hover,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu:focused,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".menu:showing {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F57C00;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #FF6F00;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #FF6F00;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #FF6F00;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  -fx-background-color: #FF6F00;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lightz96"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #FF6F00;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #F5F5F5;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #EEEEEE;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #BDBDBD;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent #F5F5F5 transparent #F5F5F5;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: #F5F5F5 #F5F5F5 #757575 #F5F5F5;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #616161;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-prompt-text-fill: #9E9E9E;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: transparent, #F5F5F5, transparent, #F5F5F5;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lightz96"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 445
    }
  },
  {
    "path": "src/main/resources/view/WhiteThemeExtensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background: #F5F5F5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 20
    }
  },
  {
    "path": "src/test/java/thrift/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/thrift/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/thrift_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "lightz96": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 6,
      "-": 111
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/DateUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DateUtilsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void bothDatesAndCalendarNull_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(date1, date2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(cal1, cal2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(date1, date2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(cal1, cal2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void firstDateOrCalendarNull_secondDateOrCalendarValid_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date2 \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int days \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(date1, date2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(cal1, cal2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isToday(date1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isToday(cal1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(date1, date2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(cal1, cal2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isWithinDaysFuture(date1, days));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isWithinDaysFuture(cal1, days));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void validFirstDateOrCalendar_secondDateOrCalendarNull_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date1 \u003d new Date();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int days \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(date1, date2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isSameDay(cal1, cal2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(date1, date2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e DateUtils.isAfterDay(cal1, cal2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e DateUtils.isWithinDaysFuture(date1, days));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e DateUtils.isWithinDaysFuture(cal1, days));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void bothDatesAndCalendarValid() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar f1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        f1.add(Calendar.DAY_OF_MONTH, 1); // 1 day in future"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar f5 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        f5.add(Calendar.DAY_OF_MONTH, 5); // 5 days in future"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date1 \u003d new Date();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date2 \u003d new Date();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date3 \u003d f1.getTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Date date4 \u003d f5.getTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int days0 \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int days1 \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        int days5 \u003d 5;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isSameDay - true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isSameDay(date1, date2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isSameDay(date2, date1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isSameDay(cal1, cal2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isSameDay(cal2, cal1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isSameDay - false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isSameDay(date1, date3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isSameDay(date1, date4));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isSameDay(cal1, f1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isSameDay(cal1, f5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isToday - true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isToday(date1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isToday(cal1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isToday - false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isToday(date3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isToday(date4));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isToday(f1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isToday(f5));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isAfterDay - true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(date3, date1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(date3, date2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(date4, date1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(date4, date2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(date4, date3));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(f1, cal1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(f1, cal2));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(f5, cal1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(f5, cal2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isAfterDay(f5, f1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isAfterDay - false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date1, date3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date2, date3));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date1, date4));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date2, date4));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date3, date4));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(cal1, f1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(cal2, f1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(cal1, f5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(cal2, f5));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(f1, f5));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(date1, date2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isAfterDay(cal1, cal2));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isWithinDaysFuture - true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(date3, days1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(date3, days5));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(date4, days5));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(f1, days1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(f1, days5));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(DateUtils.isWithinDaysFuture(f5, days5));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // isWithinDaysFuture - false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(date1, days0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(date2, days0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(cal1, days0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(cal2, days0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(date3, days0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(date4, days0));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(date4, days1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(f1, days0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(f5, days0));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(DateUtils.isWithinDaysFuture(f5, days1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 163
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/StreamUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class StreamUtilsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void iteratorNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e StreamUtils.asStream(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e StreamUtils.asStream(null, true));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e StreamUtils.asStream(null, false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void convertedIteratorStreamMatchesOriginalStream_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cInteger\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        testList.addAll(Arrays.asList(IntStream.range(1, 10).boxed().toArray(Integer[]::new)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Stream\u003cInteger\u003e testStream \u003d StreamUtils.asStream(testList.iterator());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Stream\u003cInteger\u003e actualStream \u003d testList.stream();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Iterator\u003cInteger\u003e testStreamIterator \u003d testStream.iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Iterator\u003cInteger\u003e actualStreamIterator \u003d actualStream.iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        while (testStreamIterator.hasNext() \u0026\u0026 actualStreamIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            assertEquals(testStreamIterator.next(), actualStreamIterator.next());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assert !testStreamIterator.hasNext() \u0026\u0026 !actualStreamIterator.hasNext();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 44
    }
  },
  {
    "path": "src/test/java/thrift/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "-": 140
    }
  },
  {
    "path": "src/test/java/thrift/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.storage.JsonCurrencyMappingsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.storage.JsonThriftStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage thriftStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new JsonThriftStorage(temporaryFolder.resolve(\"thrift.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        JsonCurrencyMappingsStorage currencyMappingsStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new JsonCurrencyMappingsStorage(temporaryFolder.resolve(\"currency.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        StorageManager storage \u003d new StorageManager(thriftStorage, userPrefsStorage, currencyMappingsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String deleteCommand \u003d \"delete i/9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, null, null, null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static class JsonThriftIoExceptionThrowingStub extends JsonThriftStorage {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        private JsonThriftIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void saveThrift(ReadOnlyThrift thrift, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 16,
      "lightz96": 15,
      "krusagiz": 4,
      "-": 104
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddExpenseCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(new AddExpenseCommand(validExpense), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoAddExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(validExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d model.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoAddExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //add expense to THIRFT"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(validExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //undo add_expense command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d model.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //redo add_expense command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable \u003d model.getUndoneCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.redo(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 36,
      "lightz96": 47
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubAcceptingTransactionAdded modelStub \u003d new ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoSuccessful() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubUndoRedoAddExpenses modelStub \u003d new ModelStubUndoRedoAddExpenses();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.addExpense(validExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d modelStub.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(undoable instanceof AddExpenseCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(modelStub);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(0, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoSuccessful() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubUndoRedoAddExpenses modelStub \u003d new ModelStubUndoRedoAddExpenses();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.addExpense(validExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d modelStub.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertSame(undoable, addExpenseCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(modelStub);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(0, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable \u003d modelStub.getUndoneCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertSame(undoable, addExpenseCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.redo(modelStub);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense one \u003d new ExpenseBuilder().withDescription(\"Expense One\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense two \u003d new ExpenseBuilder().withDescription(\"Expense Two\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addOneCommand \u003d new AddExpenseCommand(one);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addTwoCommand \u003d new AddExpenseCommand(two);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddExpenseCommand addOneCommandCopy \u003d new AddExpenseCommand(one);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommandCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(addTwoCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addExpense(Expense expense, Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addIncome(Income income, Index index) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void setThrift(ReadOnlyThrift newData) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Optional\u003cIndex\u003e getIndexInFullTransactionList(Transaction transaction) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteTransaction(Index index) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteLastTransaction() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public String getCurrentMonthYear() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public double getCurrentMonthBudget() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Optional\u003cBudget\u003e setBudget(Budget budget) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void resetBudgetForThatMonth(Budget budget) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        public void setTransaction(Transaction target, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateFilteredTransactionListToCurrentMonth() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateBalanceForCurrentMonth() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public double getBalance() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void updateExpenseForCurrentMonth() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public double getExpense() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void updateIncomeForCurrentMonth() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public double getIncome() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean isInView(Transaction transaction) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void keepTrackCommands(Undoable command) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getPreviousUndoableCommand() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public boolean hasUndoableCommand() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getUndoneCommand() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public boolean hasUndoneCommand() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends ModelStub {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final ArrayList\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionsAdded.add(expense);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean isInView(Transaction transaction) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return transactionsAdded.contains(transaction);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return new Thrift();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * A Model stub that allows user to perform redo operation."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ModelStubUndoRedoAddExpenses extends ModelStub {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final Stack\u003cUndoable\u003e undoableCommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final Stack\u003cUndoable\u003e redoCommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final ThriftStub thriftStub;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ModelStubUndoRedoAddExpenses() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub \u003d new ThriftStub();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void keepTrackCommands(Undoable command) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            undoableCommandStack.push(command);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getPreviousUndoableCommand() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable undoable \u003d undoableCommandStack.pop();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            redoCommandStack.push(undoable);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return undoable;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Thrift getThrift() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return thriftStub;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.addTransaction(expense);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.removeTransaction(transaction);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getUndoneCommand() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable undoable \u003d redoCommandStack.pop();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            undoableCommandStack.push(undoable);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return undoable;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteLastTransaction() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.removeLastTransaction();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * A Thrift stub that contains an empty list of transaction."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ThriftStub extends Thrift {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final List\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void removeTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.remove(transaction);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.add(transaction);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return FXCollections.observableArrayList(transactionsAdded);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void removeLastTransaction() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.remove(transactionsAdded.size() - 1);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 224,
      "lightz96": 212,
      "lye-jw": 1
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddIncomeCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddIncomeCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_newIncome_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.addIncome(validIncome);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(new AddIncomeCommand(validIncome), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(AddIncomeCommand.MESSAGE_SUCCESS, validIncome), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addIncome(validIncome);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddIncomeCommand addIncomeCommand \u003d new AddIncomeCommand(validIncome);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addIncomeCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addIncome(validIncome);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d model.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoAddIncome_success() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //add income to THIRFT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addIncome(validIncome);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddIncomeCommand addIncomeCommand \u003d new AddIncomeCommand(validIncome);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addIncomeCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addIncome(validIncome);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //undo add_income command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d model.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //redo add_income command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable \u003d model.getUndoneCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.redo(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addIncome(validIncome);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 38,
      "lightz96": 45
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/AddIncomeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_nullIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIncomeCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_incomeAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ModelStubAcceptingTransactionAdded modelStub \u003d new ModelStubAcceptingTransactionAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult commandResult \u003d new AddIncomeCommand(validIncome).execute(modelStub, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(String.format(AddIncomeCommand.MESSAGE_SUCCESS, validIncome), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(validIncome), modelStub.transactionsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoSuccessful() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubUndoRedoAddIncome modelStub \u003d new ModelStubUndoRedoAddIncome();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.addIncome(validIncome);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddIncomeCommand addIncomeCommand \u003d new AddIncomeCommand(validIncome);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.keepTrackCommands(addIncomeCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d modelStub.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(modelStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(0, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoSuccessful() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelStubUndoRedoAddIncome modelStub \u003d new ModelStubUndoRedoAddIncome();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.addIncome(validIncome);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddIncomeCommand addIncomeCommand \u003d new AddIncomeCommand(validIncome);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelStub.keepTrackCommands(addIncomeCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable undoable \u003d modelStub.getPreviousUndoableCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertSame(undoable, addIncomeCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.undo(modelStub);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(0, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable \u003d modelStub.getUndoneCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertSame(undoable, addIncomeCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        undoable.redo(modelStub);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(1, modelStub.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelStub.undoableCommandStack.isEmpty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income one \u003d new IncomeBuilder().withDescription(\"Income One\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Income two \u003d new IncomeBuilder().withDescription(\"Income Two\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddIncomeCommand addOneCommand \u003d new AddIncomeCommand(one);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddIncomeCommand addTwoCommand \u003d new AddIncomeCommand(two);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        AddIncomeCommand addOneCommandCopy \u003d new AddIncomeCommand(one);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(addOneCommand.equals(addOneCommandCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(addOneCommand.equals(addTwoCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Path getThriftFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setThriftFilePath(Path thriftFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addExpense(Expense expense, Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addIncome(Income income, Index index) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setThrift(ReadOnlyThrift newData) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Optional\u003cIndex\u003e getIndexInFullTransactionList(Transaction transaction) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteTransaction(Index index) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteLastTransaction() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Optional\u003cBudget\u003e setBudget(Budget budget) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void resetBudgetForThatMonth(Budget budget) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        public void setTransaction(Transaction target, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void setTransactionWithIndex(Index actualIndex, Transaction updatedTransaction) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateFilteredTransactionListToCurrentMonth() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public String getCurrentMonthYear() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public double getCurrentMonthBudget() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void updateBalanceForCurrentMonth() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public double getBalance() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void updateExpenseForCurrentMonth() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public double getExpense() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void updateIncomeForCurrentMonth() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public double getIncome() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean isInView(Transaction transaction) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void keepTrackCommands(Undoable command) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public Undoable getPreviousUndoableCommand() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasUndoableCommand() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getUndoneCommand() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public boolean hasUndoneCommand() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStubWithTransaction extends ModelStub {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private final Transaction transaction;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        ModelStubWithTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return this.transaction.isSameTransaction(transaction);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private class ModelStubAcceptingTransactionAdded extends ModelStub {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final ArrayList\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(transaction);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return transactionsAdded.stream().anyMatch(transaction::isSameTransaction);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            requireNonNull(income);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            transactionsAdded.add(income);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public boolean isInView(Transaction transaction) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return transactionsAdded.contains(transaction);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public ReadOnlyThrift getThrift() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return new Thrift();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ModelStubUndoRedoAddIncome extends ModelStub {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final Stack\u003cUndoable\u003e undoableCommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final Stack\u003cUndoable\u003e redoCommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final ThriftStub thriftStub;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ModelStubUndoRedoAddIncome() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub \u003d new ThriftStub();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void keepTrackCommands(Undoable command) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            undoableCommandStack.push(command);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getPreviousUndoableCommand() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable undoable \u003d undoableCommandStack.pop();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            redoCommandStack.push(undoable);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return undoable;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Thrift getThrift() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return thriftStub;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.addTransaction(income);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.removeTransaction(transaction);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public Undoable getUndoneCommand() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            Undoable undoable \u003d redoCommandStack.pop();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            undoableCommandStack.push(undoable);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return undoable;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void deleteLastTransaction() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thriftStub.removeLastTransaction();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * A Thrift stub that contains an empty list of transaction."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private class ThriftStub extends Thrift {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        final List\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void removeTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.remove(transaction);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.add(transaction);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return FXCollections.observableArrayList(transactionsAdded);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public void removeLastTransaction() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            transactionsAdded.remove(transactionsAdded.size() - 1);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 249,
      "lightz96": 182,
      "lye-jw": 1
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/BudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e new BudgetCommand(new Budget(null, null)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_budgetIsNotSetBeforeExecution_success() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        calendar.setTime(Budget.BUDGET_DATE_FORMAT.parse(\"11/2019\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetValue budgetValue \u003d new BudgetValue(\"100\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget budget \u003d new Budget(calendar, budgetValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(BudgetCommand.MESSAGE_SUCCESS, budget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(budgetCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.resetBudgetForThatMonth(budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_budgetIsSetBeforeExecution_success() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        calendar.setTime(Budget.BUDGET_DATE_FORMAT.parse(\"10/2019\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetValue budgetValue \u003d new BudgetValue(\"100\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget budget \u003d new Budget(calendar, budgetValue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(BudgetCommand.MESSAGE_SUCCESS, budget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget oldBudget \u003d expectedModel.setBudget(budget).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(budgetCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(oldBudget);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_budgetIsNotSetBeforeExecution_success() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        calendar.setTime(Budget.BUDGET_DATE_FORMAT.parse(\"10/2019\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetValue budgetValue \u003d new BudgetValue(\"100\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget budget \u003d new Budget(calendar, budgetValue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(BudgetCommand.MESSAGE_SUCCESS, budget);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget oldBudget \u003d expectedModel.setBudget(budget).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(budgetCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(oldBudget);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_budgetIsSetBeforeExecution_success() throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        calendar.setTime(Budget.BUDGET_DATE_FORMAT.parse(\"10/2019\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetValue budgetValue \u003d new BudgetValue(\"100\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget budget \u003d new Budget(calendar, budgetValue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(BudgetCommand.MESSAGE_SUCCESS, budget);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget oldBudget \u003d expectedModel.setBudget(budget).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(budgetCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(oldBudget);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(budgetCommand, model, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 16,
      "lightz96": 93
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/CloneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.model.transaction.TransactionDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class CloneCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void constructor_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CloneCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Transaction transactionToClone \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .get(TypicalIndexes.INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Income expectedTransaction \u003d new IncomeBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withDescription(transactionToClone.getDescription().value)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withDate(DATE_FORMATTER.format(new Date()))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withValue(transactionToClone.getValue().getUnformattedString())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withRemark(transactionToClone.getRemark().value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withTags(transactionToClone.getTags().iterator().next().tagName)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessage \u003d String.format(CloneCommand.MESSAGE_CLONE_TRANSACTION_SUCCESS, expectedTransaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedModel.addIncome(expectedTransaction);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertCommandSuccess(cloneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertCommandFailure(cloneCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Transaction transactionToClone \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Expense expectedTransaction \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withDescription(transactionToClone.getDescription().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withDate(DATE_FORMATTER.format(new Date()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withValue(transactionToClone.getValue().getUnformattedString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withRemark(transactionToClone.getRemark().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withTags(transactionToClone.getTags().iterator().next().tagName)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessage \u003d String.format(CloneCommand.MESSAGE_CLONE_TRANSACTION_SUCCESS, expectedTransaction);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedModel.addExpense(expectedTransaction);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertCommandSuccess(cloneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thrift list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertCommandFailure(cloneCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoCloneCommand_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToClone \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense expectedTransaction \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDescription(transactionToClone.getDescription().value)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDate(DATE_FORMATTER.format(new Date()))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withValue(transactionToClone.getValue().getUnformattedString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withRemark(transactionToClone.getRemark().value)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withTags(transactionToClone.getTags().stream().map(tag -\u003e tag.tagName).toArray(String[]::new))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //simulates user performing clone command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(expectedTransaction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(CloneCommand.MESSAGE_CLONE_TRANSACTION_SUCCESS, expectedTransaction);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(cloneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //undo"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(cloneCommand, model, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoCloneCommand_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToClone \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense expectedTransaction \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDescription(transactionToClone.getDescription().value)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDate(DATE_FORMATTER.format(new Date()))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withValue(transactionToClone.getValue().getUnformattedString())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withRemark(transactionToClone.getRemark().value)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withTags(transactionToClone.getTags().stream().map(tag -\u003e tag.tagName).toArray(String[]::new))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //simulates user performing clone command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(expectedTransaction);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(CloneCommand.MESSAGE_CLONE_TRANSACTION_SUCCESS, expectedTransaction);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        CloneCommand cloneCommand \u003d new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(cloneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //undo"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteLastTransaction();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(cloneCommand, model, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //redo"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(expectedTransaction);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(cloneCommand, model, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneFirstCommand \u003d new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneFirstCommandDuplicate \u003d new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand cloneSecondCommand \u003d new CloneCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertTrue(cloneFirstCommand.equals(cloneFirstCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // same values for different objects -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertTrue(cloneFirstCommand.equals(cloneFirstCommandDuplicate));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(cloneFirstCommand.equals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // comparing with null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(cloneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // different values for different objects -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(cloneFirstCommand.equals(cloneSecondCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 126,
      "lightz96": 58
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CliSyntax.PREFIX_VALUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_BURSARY \u003d \"Bursary\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_LAKSA \u003d \"Laksa\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_PENANG_LAKSA \u003d \"Penang Laksa\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DESCRIPTION_AIRPODS \u003d \"Airpods\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_BURSARY \u003d \"500\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_LAKSA \u003d \"3.50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_AIRPODS \u003d \"350\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_VALUE_BUDGET \u003d \"1000\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_REMARK_LAKSA \u003d \"Delicious!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String VALID_REMARK_AIRPODS \u003d \"Is this really worth it?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_BURSARY \u003d \"09/10/2019\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_LAKSA \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_AIRPODS \u003d \"14/03/1937\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_DATE_BUDGET \u003d \"10/2019\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_AWARD \u003d \"Award\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_LUNCH \u003d \"Lunch\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_BRUNCH \u003d \"Brunch\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALID_TAG_ACCESSORY \u003d \"Accessory\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DESC_BURSARY \u003d \" \" + PREFIX_NAME + VALID_DESCRIPTION_BURSARY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DESC_LAKSA \u003d \" \" + PREFIX_NAME + VALID_DESCRIPTION_LAKSA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DESC_AIRPODS \u003d \" \" + PREFIX_NAME + VALID_DESCRIPTION_AIRPODS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_BURSARY \u003d \" \" + PREFIX_VALUE + VALID_VALUE_BURSARY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_LAKSA \u003d \" \" + PREFIX_VALUE + VALID_VALUE_LAKSA;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String REMARK_LAKSA \u003d \" \" + PREFIX_REMARK + VALID_REMARK_LAKSA;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_AIRPODS \u003d \" \" + PREFIX_VALUE + VALID_VALUE_AIRPODS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String VALUE_BUDGET \u003d \" \" + PREFIX_VALUE + VALID_VALUE_BUDGET;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DATE_BUDGET \u003d \" \" + PREFIX_DATE + VALID_DATE_BUDGET;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String REMARK_AIRPODS \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AIRPODS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_BURSARY \u003d \" \" + PREFIX_TAG + VALID_TAG_AWARD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_LAKSA \u003d \" \" + PREFIX_TAG + VALID_TAG_LUNCH;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_BRUNCH \u003d \" \" + PREFIX_TAG + VALID_TAG_BRUNCH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String TAG_AIRPODS \u003d \" \" + PREFIX_TAG + VALID_TAG_ACCESSORY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final String INDEX_TOKEN \u003d \" \" + PREFIX_INDEX;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String INVALID_VALUE \u003d \" \" + PREFIX_VALUE + \".00\"; // missing whole number"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String INVALID_DATE \u003d \" \" + PREFIX_DATE + \"13/aaaa\"; // invalid month and non numeric year"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String INVALID_TAG \u003d \" \" + PREFIX_TAG + \"A+\"; //illegal character"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final UpdateCommand.UpdateTransactionDescriptor DESC_MEAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static final UpdateCommand.UpdateTransactionDescriptor DESC_PURCHASE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        DESC_MEAL \u003d new UpdateTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(VALID_VALUE_LAKSA).withDate(VALID_DATE_LAKSA).withTags(VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        DESC_PURCHASE \u003d new UpdateTransactionDescriptorBuilder().withDescription(VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(VALID_VALUE_AIRPODS).withDate(VALID_DATE_AIRPODS).withTags(VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            CommandResult result;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            if (command instanceof ScrollingCommand) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                result \u003d ((ScrollingCommand) command).execute(actualModel, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                result \u003d ((NonScrollingCommand) command).execute(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * - thrift, filtered transaction list and selected transaction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift expectedThrift \u003d new Thrift(actualModel.getThrift());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        if (command instanceof ScrollingCommand) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertThrows(CommandException.class, expectedMessage, () -\u003e ("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                (ScrollingCommand) command).execute(actualModel, null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            assertThrows(CommandException.class, expectedMessage, ("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                )-\u003e ((NonScrollingCommand) command).execute(actualModel));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(expectedThrift, actualModel.getThrift());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * {@code model}\u0027s thrift."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        final String[] splitDescription \u003d transaction.getDescription().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Executes undo for the given {@code command} and confirms that the {@code model} matches {@code expectedModel}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param command is the command that you want to perform undo"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param model is the actual model"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param expectedModel is the expected model to compare with"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static void assertUndoCommandSuccess(Undoable command, Model model, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        command.undo(model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Executes redo for the given {@code command} and confirms that the {@code model} matches {@code expectedModel}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param command is the command that you want to perform redo"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param model is the actual model"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * @param expectedModel is the expected model to compare with"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static void assertRedoCommandSuccess(Undoable command, Model model, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        command.redo(model);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 124,
      "lye-jw": 22,
      "lightz96": 29
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ConvertCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class ConvertCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        double amount \u003d 100.00;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cString\u003e currencies \u003d List.of(\"SGD\", \"MYR\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand convertCommand \u003d new ConvertCommand(amount, currencies);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new CommandResult(ConvertCommand.generateConvertResult(amount, currencies));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertCommandSuccess(convertCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        double amountOne \u003d 100.00;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        double amountTwo \u003d 200.00;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cString\u003e listOne \u003d List.of(\"SGD\", \"MYR\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        List\u003cString\u003e listTwo \u003d List.of(\"EUR\", \"USD\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand firstConvertCommand \u003d new ConvertCommand(amountOne, listOne);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand secondConvertCommand \u003d new ConvertCommand(amountTwo, listTwo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstConvertCommand.equals(firstConvertCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand firstTagCommandCopy \u003d new ConvertCommand(amountOne, listOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstConvertCommand.equals(firstTagCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstConvertCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstConvertCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstConvertCommand.equals(secondConvertCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 57
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.deleteTransaction(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thrift list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoDeleteExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //ensure that the first transaction is an expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(transactionToDelete instanceof Expense);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense((Expense) transactionToDelete, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoDeleteIncome_success() throws CommandException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //ensure that the third transaction is an income."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(transactionToDelete instanceof Income);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addIncome((Income) transactionToDelete, TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoDeleteExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //ensure that the first transaction is an expense."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(transactionToDelete instanceof Expense);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense((Expense) transactionToDelete, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoDeleteIncomeOnFullList_success() throws CommandException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .get(TypicalIndexes.INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //ensure that the third transaction is an income."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(transactionToDelete instanceof Income);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addIncome((Income) transactionToDelete, TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.deleteTransaction(TypicalIndexes.INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private void showNoTransaction(Model model) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 34,
      "lightz96": 101,
      "-": 68
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new DescriptionOrRemarkContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new DescriptionOrRemarkContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_multipleKeywordsDescriptionField_transactionsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate predicate \u003d preparePredicate(\"Penang Laksa1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(TypicalTransactions.PENANG_LAKSA), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_multipleKeywordsRemarkField_transactionsFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate predicate \u003d preparePredicate(\"the best\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(Arrays.asList(TypicalTransactions.LAKSA, TypicalTransactions.PENANG_LAKSA),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionOrRemarkContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private DescriptionOrRemarkContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 89,
      "lightz96": 5
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.parser.HelpCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(new HelpCommand(HelpCommandParser.EMPTY_STRING), model, expectedCommandResult,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_helpWithSpecificCommand_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(UndoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(new HelpCommand(UndoCommand.MESSAGE_USAGE), model, expectedCommandResult,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        HelpCommand helpCommandDuplicate \u003d new HelpCommand(AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        HelpCommand differentHelpCommand \u003d new HelpCommand(AddIncomeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(helpCommand.equals(helpCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // same values for different objects -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(helpCommand.equals(helpCommandDuplicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(helpCommand.equals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // comparing with null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(helpCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // different values for different objects -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(helpCommand.equals(differentHelpCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 5,
      "lightz96": 35,
      "-": 14
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(), new PastUndoableCommands());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 8,
      "lightz96": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_noUndoneCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.NO_REDOABLE_COMMAND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_redoAddExpensesCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(expense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e undoCommand.execute(model));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.addExpense(expense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 4,
      "lightz96": 44
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/TagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TagSetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void execute_newTags_success() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Expense originalExpense \u003d new ExpenseBuilder(model.getFilteredTransactionList().get(0))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Food\", \"Shopping\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, tagSet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e expectedTag \u003d new TagSetBuilder(originalExpense.getTags())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .addTags(\"Food\", \"Shopping\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Expense updatedExpense \u003d new Expense("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getDescription(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getValue(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getRemark(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getDate(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                expectedTag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertNotEquals(updatedExpense.getTags(), model.getFilteredTransactionList().get(0).getTags()); //Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        tagCommand.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertEquals(updatedExpense.getTags(), model.getFilteredTransactionList().get(0).getTags()); //After"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void undo_undoTag_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //assuming that it is tagging the transaction with non-duplicate tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Food\", \"Recommended\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e(lastTransaction.getTags());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (Tag newTag : tagSet) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            updatedTags.add(newTag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense updatedTransaction \u003d new Expense(lastTransaction.getDescription(), lastTransaction.getValue(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getRemark(), lastTransaction.getDate(), updatedTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(TagCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(TagCommand.MESSAGE_TAG_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests tag command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(indexLastTransaction, tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests undo command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(tagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void redo_redoTag_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //assuming that it is tagging the transaction with non-duplicate tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Food\", \"Recommended\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e(lastTransaction.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (Tag newTag : tagSet) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            updatedTags.add(newTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction updatedTransaction \u003d new Expense(lastTransaction.getDescription(), lastTransaction.getValue(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getRemark(), lastTransaction.getDate(), updatedTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(TagCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(TagCommand.MESSAGE_TAG_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests tag command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(indexLastTransaction, tagSet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests undo command"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(tagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests redo command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(tagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e setOne \u003d new TagSetBuilder(\"Food\", \"Shopping\").build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e setTwo \u003d new TagSetBuilder(\"Debt\", \"Fees\").build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TagCommand firstTagCommand \u003d new TagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setOne);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TagCommand secondTagCommand \u003d new TagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setTwo);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstTagCommand.equals(firstTagCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TagCommand firstTagCommandCopy \u003d new TagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setOne);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstTagCommand.equals(firstTagCommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstTagCommand.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstTagCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstTagCommand.equals(secondTagCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 77,
      "lightz96": 74
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_noUndoableCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.NO_UNDOABLE_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void execute_undoAddExpensesCommand_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(expense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e undoCommand.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 39
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/UntagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TagSetBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class UntagCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /*TODO: The code is not working with the filtered list and instead updates the full list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void execute_existTags_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Expense originalExpense \u003d new ExpenseBuilder(model.getFilteredTransactionList().get(0))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .withTags(\"Debt\", \"Horror\", \"Bliss\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        model.setTransaction(model.getFilteredTransactionList().get(0), originalExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Debt\", \"Horror\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, tagSet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e expectedTag \u003d new TagSetBuilder(\"Bliss\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Expense updatedExpense \u003d new Expense("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getDescription(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getValue(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getRemark(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                originalExpense.getDate(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                expectedTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertNotEquals(updatedExpense.getTags(), model.getFilteredTransactionList().get(0).getTags()); //Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        untagCommand.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertEquals(updatedExpense.getTags(), model.getFilteredTransactionList().get(0).getTags()); //After"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void undo_undoUntag_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //assuming that untag command untags valid tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Brunch\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(lastTransaction.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            updatedTags.remove(tag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction updatedTransaction \u003d new Expense(lastTransaction.getDescription(), lastTransaction.getValue(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getRemark(), lastTransaction.getDate(), updatedTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UntagCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UntagCommand.MESSAGE_UNTAG_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests untag command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(indexLastTransaction, tagSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(untagCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests undo command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(untagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    void redo_redoUntag_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //assuming that untag command untags valid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Brunch\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(lastTransaction.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            updatedTags.remove(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction updatedTransaction \u003d new Expense(lastTransaction.getDescription(), lastTransaction.getValue(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getRemark(), lastTransaction.getDate(), updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UntagCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UntagCommand.MESSAGE_UNTAG_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests untag command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(indexLastTransaction, tagSet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(untagCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests undo command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(untagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //tests redo command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(untagCommand, model, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e setOne \u003d new TagSetBuilder(\"Food\", \"Shopping\").build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e setTwo \u003d new TagSetBuilder(\"Debt\", \"Fees\").build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        UntagCommand firstUntagCommand \u003d new UntagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setOne);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        UntagCommand secondUntagCommand \u003d new UntagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setTwo);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstUntagCommand.equals(firstUntagCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        UntagCommand firstUntagCommandCopy \u003d new UntagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, setOne);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertTrue(firstUntagCommand.equals(firstUntagCommandCopy));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstUntagCommand.equals(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstUntagCommand.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertFalse(firstUntagCommand.equals(secondUntagCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "krusagiz": 66,
      "lightz96": 80
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/UpdateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertRedoCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.commands.CommandTestUtil.assertUndoCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.PastUndoableCommands;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for UpdateCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new PastUndoableCommands());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Create initial Expense from first element in TypicalTransactions\u0027 list, to reflect original transaction after"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // updating (UpdateCommandTest private class attribute) model\u0027s first item."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Income updatedExpense \u003d new IncomeBuilder(model.getFilteredTransactionList().get(1))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                // .withTags(model.getFilteredTransactionList().get(0).getTags().iterator().next().tagName)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UpdateCommand.MESSAGE_ORIGINAL_TRANSACTION, updatedExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder(updatedExpense).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS, updatedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredTransactionList().get(1), updatedExpense);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Expense updatedTransaction \u003d new ExpenseBuilder(lastTransaction).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UpdateCommand.MESSAGE_ORIGINAL_TRANSACTION, updatedTransaction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder(updatedTransaction)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastTransaction, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedModel.setTransaction(lastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessageUpdated"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + expectedMessageOriginal, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Transaction transactionInFilteredList \u003d model.getFilteredTransactionList().get("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Transaction updatedPerson \u003d new ExpenseBuilder(transactionInFilteredList)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UpdateCommand.MESSAGE_ORIGINAL_TRANSACTION, updatedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new UpdateTransactionDescriptorBuilder().withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS, updatedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Thrift(model.getThrift()), new UserPrefs(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedModel.setTransaction(model.getFilteredTransactionList().get(0), updatedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessageUpdated"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + expectedMessageOriginal, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_invalidTransactionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CommandTestUtil.assertCommandFailure(updateCommand, model,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Update filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * but smaller than size of transactions list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void execute_invalidTransactionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandTestUtil.showTransactionAtIndex(model, TypicalIndexes.INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thrift list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThrift().getTransactionList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new UpdateTransactionDescriptorBuilder().withDescription(CommandTestUtil.VALID_DESCRIPTION_LAKSA)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CommandTestUtil.assertCommandFailure(updateCommand, model,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void undo_undoUpdateExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UpdateCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UpdateTransactionDescriptor updateTransactionDescriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDescription(\"Chicken\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction updatedTransaction \u003d new Expense(updateTransactionDescriptor.getDescription().get(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getValue(), lastTransaction.getRemark(), lastTransaction.getDate(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastTransaction, updateTransactionDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //test update command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessageUpdated + expectedMessageOriginal,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //test undo"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(updateCommand, model, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void redo_redoUpdateExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageOriginal \u003d String.format(UpdateCommand.MESSAGE_ORIGINAL_TRANSACTION, lastTransaction);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UpdateTransactionDescriptor updateTransactionDescriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .withDescription(\"Chicken\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Transaction updatedTransaction \u003d new Expense(updateTransactionDescriptor.getDescription().get(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getValue(), lastTransaction.getRemark(), lastTransaction.getDate(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                lastTransaction.getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessageUpdated \u003d String.format(UpdateCommand.MESSAGE_UPDATE_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                updatedTransaction);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastTransaction, updateTransactionDescriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //test update command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessageUpdated + expectedMessageOriginal, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //test undo"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, lastTransaction);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertUndoCommandSuccess(updateCommand, model, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //test redo"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        expectedModel.setTransactionWithIndex(indexLastTransaction, updatedTransaction);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertRedoCommandSuccess(updateCommand, model, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor copyDescriptor \u003d new UpdateTransactionDescriptor(CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION, copyDescriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(TypicalIndexes.INDEX_SECOND_TRANSACTION,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_MEAL)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                CommandTestUtil.DESC_PURCHASE)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 93,
      "lightz96": 78,
      "lye-jw": 45
    }
  },
  {
    "path": "src/test/java/thrift/logic/commands/UpdateTransactionDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateTransactionDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand.UpdateTransactionDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new UpdateTransactionDescriptor(CommandTestUtil.DESC_MEAL);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_MEAL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_MEAL.equals(CommandTestUtil.DESC_MEAL));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(CommandTestUtil.DESC_PURCHASE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor updatedTransaction \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                new UpdateTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(updatedTransaction));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedTransaction \u003d new UpdateTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(updatedTransaction));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedTransaction \u003d new UpdateTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDate(CommandTestUtil.VALID_DATE_AIRPODS).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(updatedTransaction));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedTransaction \u003d new UpdateTransactionDescriptorBuilder(CommandTestUtil.DESC_MEAL)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_BRUNCH).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_MEAL.equals(updatedTransaction));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 39,
      "lye-jw": 14
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.REMARK_LAKSA"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.REMARK_LAKSA"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_LAKSA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing value prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_LAKSA"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + CommandTestUtil.VALID_VALUE_LAKSA, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.TAG_LAKSA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_BRUNCH, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.INVALID_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.INVALID_TAG,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 74
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/AddIncomeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class AddIncomeCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private AddIncomeCommandParser parser \u003d new AddIncomeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_BURSARY + CommandTestUtil.VALUE_BURSARY + CommandTestUtil.REMARK_LAKSA"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_BURSARY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_BURSARY + CommandTestUtil.VALUE_BURSARY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.REMARK_LAKSA + CommandTestUtil.TAG_BURSARY + CommandTestUtil.TAG_AIRPODS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.DESC_BURSARY + CommandTestUtil.VALUE_BURSARY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIncomeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_BURSARY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_BURSARY, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing value prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_BURSARY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_VALUE_BURSARY, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_DESCRIPTION_BURSARY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_VALUE_BURSARY, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_BURSARY"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.TAG_BURSARY, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_BURSARY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_BURSARY + CommandTestUtil.INVALID_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.DESC_BURSARY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.INVALID_TAG, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DESC_BURSARY + CommandTestUtil.VALUE_BURSARY + CommandTestUtil.TAG_BURSARY,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIncomeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 73
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void tokenize_multipleArgumentsWithIllegalRepeats() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        // Assume all values shouldn\u0027t be repeated. dashT violates, pSlash doesn\u0027t"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e argMultimap.getSingleValue(dashT));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertDoesNotThrow(() -\u003e argMultimap.getSingleValue(pSlash));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "krusagiz": 13,
      "-": 149
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/BudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parse(CommandTestUtil.PREAMBLE_WHITESPACE + CommandTestUtil.VALUE_BUDGET"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DATE_BUDGET));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing value prefix"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_VALUE_BUDGET"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DATE_BUDGET, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALUE_BUDGET"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_DATE_BUDGET, expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_VALUE_BUDGET"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALID_DATE_BUDGET, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_VALUE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.DATE_BUDGET, BudgetValue.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_DATE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_BUDGET, Budget.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // two invalid fields, only first invalid field reported"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_DATE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE, Budget.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.VALUE_BUDGET + CommandTestUtil.DATE_BUDGET,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 58
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/CloneCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class CloneCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private CloneCommandParser parser \u003d new CloneCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        //no index specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_validArgs_returnsCloneCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.INDEX_TOKEN + \"2\", new CloneCommand("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                TypicalIndexes.INDEX_SECOND_TRANSACTION));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \"clon\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"transaction number two\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"1 i/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lye-jw": 52
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ConvertCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class ConvertCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private ConvertCommandParser parser \u003d new ConvertCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withRecommendedInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert v/10 c/SGD c/USD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(10.00, (List\u003cString\u003e) List.of(\"SGD\", \"USD\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withOneCurrency() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert v/10 c/MYR\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(10.00,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (List\u003cString\u003e) List.of(\"SGD\", \"MYR\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withManyCurrencies() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert v/10 c/SGD c/USD c/EUR c/MYR\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(10.00,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (List\u003cString\u003e) List.of(\"SGD\", \"USD\", \"EUR\", \"MYR\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withNoValue_andRecommendedInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert c/SGD c/USD\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(1.00,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (List\u003cString\u003e) List.of(\"SGD\", \"USD\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withNoValue_andOneCurrency() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert c/USD\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(1.00,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (List\u003cString\u003e) List.of(\"SGD\", \"USD\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withNoValue_andManyCurrencies() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert c/SGD c/USD c/EUR c/MYR\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        ConvertCommand expectedCommand \u003d new ConvertCommand(1.00,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                (List\u003cString\u003e) List.of(\"SGD\", \"USD\", \"EUR\", \"MYR\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withBadValue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert v/FAKER c/SGD c/USD\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ConvertCommand.MESSAGE_USAGE, Value.VALUE_CONSTRAINTS));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withNonExistentCurrency() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert v/10 c/LOL c/LMAO\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ConvertCommand.MESSAGE_USAGE, ParserUtil.MESSAGE_INVALID_CURRENCY));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_wrongSyntax() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"convert\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 101
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        //no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, CommandTestUtil.INDEX_TOKEN + \"1\", new DeleteCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                TypicalIndexes.INDEX_FIRST_TRANSACTION));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"1 some random string\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 35,
      "-": 24
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new FindCommand(new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/HelpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_addExpense_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, AddExpenseCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                AddExpenseCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_addIncome_success() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, AddIncomeCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                AddIncomeCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_budget_success() throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, BudgetCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                BudgetCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_clone_success() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, CloneCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                CloneCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_delete_success() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, DeleteCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                DeleteCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_exit_success() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, ExitCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                ExitCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_find_success() throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, FindCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                FindCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_help_success() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, HelpCommand.COMMAND_WORD, new HelpCommand(HelpCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_list_success() throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, ListCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                ListCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_redo_success() throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, RedoCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                RedoCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_tag_success() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, TagCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                TagCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_undo_success() throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, UndoCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                UndoCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_untag_success() throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, UntagCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                UntagCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_update_success() throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseSuccess(parser, UpdateCommand.COMMAND_WORD, new HelpCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                UpdateCommand.HELP_MESSAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parse_parseInvalidCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 117
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseValue_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, Value.VALUE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e ParserUtil.parseValue(\"A+\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 97
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/TagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TagSetBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class TagCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withTags() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"tag i/1 t/Food t/Shopping\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input2 \u003d \"tag i/1 t/Shopping t/Food\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        TagCommand expectedCommand \u003d new TagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new TagSetBuilder(\"Food\", \"Shopping\").build());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input2, expectedCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withInvalidTags() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"tag i/1 t/!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input2 \u003d \"tag i/1 t/REALTAG t/WRONGTAG!!!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                    TagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input2,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        TagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withBlankTags() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"tag i/1 t/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        TagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_wrongSyntax() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"tag\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 59
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/ThriftParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.CloneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final ThriftParser parser \u003d new ThriftParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parseCommand_addExpense() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e (AddExpenseCommand) parser.parseCommand(TransactionUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .getAddExpenseCommand(new ExpenseBuilder().build())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parseCommand_addIncome() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertDoesNotThrow(() -\u003e (AddIncomeCommand) parser.parseCommand(TransactionUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .getAddIncomeCommand(new IncomeBuilder().build())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + TypicalIndexes.INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertDoesNotThrow(() -\u003e (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + \" \" + CliSyntax.PREFIX_INDEX + TypicalIndexes.INDEX_FIRST_TRANSACTION.getOneBased() + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + TransactionUtil.getUpdateTransactionDescriptorDetails(descriptor)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionOrRemarkContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + AddExpenseCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kensonoenqh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" m/jan\") instanceof ListCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parseCommand_clone() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        CloneCommand command \u003d (CloneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                CloneCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_INDEX"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                        + TypicalIndexes.INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertEquals(new CloneCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 29,
      "lye-jw": 25,
      "lightz96": 16,
      "kensonoenqh": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/UntagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TagSetBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class UntagCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private UntagCommandParser parser \u003d new UntagCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withTags() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"untag i/1 t/Debt t/Horror\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input2 \u003d \"untag i/1 t/Horror t/Debt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        UntagCommand expectedCommand \u003d new UntagCommand(TypicalIndexes.INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new TagSetBuilder(\"Debt\", \"Horror\").build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseSuccess(parser, input2, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withInvalidTags() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"untag i/1 t/!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input2 \u003d \"untag i/1 t/REALTAG t/WRONGTAG!!!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        UntagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        UntagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_withBlankTags() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"tag i/1 t/\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_WITH_PE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                        UntagCommand.MESSAGE_USAGE, Tag.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    void parse_wrongSyntax() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        String input \u003d \"untag\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertParseFailure(parser, input, String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 61
    }
  },
  {
    "path": "src/test/java/thrift/logic/parser/UpdateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.testutil.UpdateTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.DESC_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, String.format(CommandTestUtil.INDEX_TOKEN + \"1\"), UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"-5\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.DESC_LAKSA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.INDEX_TOKEN + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_invalidParam_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE, Value.VALUE_CONSTRAINTS); // invalid value"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_TAG, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value followed by valid tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_VALUE + CommandTestUtil.TAG_LAKSA, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // valid value followed by invalid value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.INVALID_VALUE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                String.format(ArgumentMultimap.WARNING_NOT_SINGULAR_FORMAT, CliSyntax.PREFIX_VALUE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Transaction} being updated,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + TAG_EMPTY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_BRUNCH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.TAG_LAKSA + CommandTestUtil.TAG_BRUNCH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, \" i/1\" + CommandTestUtil.INVALID_VALUE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                + CommandTestUtil.INVALID_TAG, Value.VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertDoesNotThrow(() -\u003e new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withRemark(CommandTestUtil.VALID_REMARK_AIRPODS).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased() + CommandTestUtil.VALUE_LAKSA"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.REMARK_LAKSA + CommandTestUtil.TAG_LAKSA;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_LAKSA).withRemark(CommandTestUtil.VALID_REMARK_LAKSA)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_LUNCH).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased() + CommandTestUtil.DESC_AIRPODS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased() + CommandTestUtil.TAG_AIRPODS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_fieldsOutOfOrder_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.TAG_AIRPODS + CommandTestUtil.VALUE_AIRPODS + CommandTestUtil.REMARK_AIRPODS"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.TAG_BURSARY + CommandTestUtil.DESC_AIRPODS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withRemark(CommandTestUtil.VALID_REMARK_AIRPODS)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY, CommandTestUtil.VALID_TAG_AWARD).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void parse_multipleRepeatedFields_throwsParseException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased() + CommandTestUtil.DESC_LAKSA"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.VALUE_LAKSA + CommandTestUtil.TAG_LAKSA"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.DESC_AIRPODS + CommandTestUtil.VALUE_AIRPODS"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                + CommandTestUtil.TAG_AIRPODS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        // Repeated fields error message pinpoints first repeated field"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String repeatedFieldsMessage \u003d String.format(ArgumentMultimap.WARNING_NOT_SINGULAR_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "                CliSyntax.PREFIX_NAME);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertParseFailure(parser, userInput, repeatedFieldsMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        String userInput \u003d CommandTestUtil.INDEX_TOKEN + targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateTransactionDescriptor descriptor \u003d new UpdateTransactionDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 104,
      "lye-jw": 69
    }
  },
  {
    "path": "src/test/java/thrift/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.model.transaction.TransactionDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.DescriptionOrRemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ThriftBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(new Thrift(), new Thrift(modelManager.getThrift()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"thrift/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"new/thrift/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setThriftFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_validPath_setsThriftFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Path path \u003d Paths.get(\"thrift/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelManager.setThriftFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(path, modelManager.getThriftFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void keepTrackCommands_addCommand_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelManager.keepTrackCommands(addExpenseCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(addExpenseCommand, modelManager.getPreviousUndoableCommand());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void updateExpenseForCurrentMonth_withTransactionForCurrentMonth_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense newExpense \u003d new Expense(new Description(\"mcspicy\"), new Value(\"5\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new TransactionDate(DATE_FORMATTER.format(new Date())), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addExpense(newExpense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.updateExpenseForCurrentMonth();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        double expense \u003d model.getExpense();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(5.00, expense);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void updateIncomeForCurrentMonth_withTransactionForCurrentMonth_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Model model \u003d new ModelManager(TypicalTransactions.getTypicalThrift(), new UserPrefs(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new PastUndoableCommands());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income newIncome \u003d new Income(new Description(\"allowance\"), new Value(\"500\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                new TransactionDate(DATE_FORMATTER.format(new Date())), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.addIncome(newIncome);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        model.updateIncomeForCurrentMonth();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        double income \u003d model.getIncome();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(500.00, income);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new ThriftBuilder().withTransaction(TypicalTransactions.LAKSA).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift differentThrift \u003d new Thrift();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        PastUndoableCommands pastUndoableCommands \u003d new PastUndoableCommands();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        modelManager \u003d new ModelManager(thrift, userPrefs, pastUndoableCommands);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(thrift, userPrefs, pastUndoableCommands);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // different thrift -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentThrift, userPrefs, pastUndoableCommands)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String[] keywords \u003d TypicalTransactions.PENANG_LAKSA.getDescription().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        modelManager.updateFilteredTransactionList(new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(thrift, userPrefs, pastUndoableCommands)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        modelManager.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        differentUserPrefs.setThriftFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(thrift, differentUserPrefs, pastUndoableCommands)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "lightz96": 64,
      "-": 85
    }
  },
  {
    "path": "src/test/java/thrift/model/PastUndoCommandsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.logic.commands.Undoable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.IncomeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class PastUndoCommandsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private PastUndoableCommands pastUndoableCommands \u003d new PastUndoableCommands();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getCommandToUndo_undoExpenseCommand_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.addPastCommand(addExpenseCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(addExpenseCommand, pastUndoableCommands.getCommandToUndo());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(pastUndoableCommands.hasRedoCommand());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(pastUndoableCommands.hasUndoCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getCommandToRedo_redoExpenseCommand_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.addPastCommand(addExpenseCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //checks if it returns the correct command to undo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(addExpenseCommand, pastUndoableCommands.getCommandToUndo());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //checks if undone commands is stored in redoStack"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(pastUndoableCommands.hasRedoCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(pastUndoableCommands.hasUndoCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //checks if it returns the correct command to redo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(addExpenseCommand, pastUndoableCommands.getCommandToRedo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //checks if actual commands is stored back in undoStack"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(pastUndoableCommands.hasUndoCommand());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(pastUndoableCommands.hasRedoCommand());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void clearRedoStack_undoneCommandsClearedAfterNewUndoableCommandRuns_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.addPastCommand(addExpenseCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.getCommandToUndo();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(pastUndoableCommands.hasRedoCommand());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Income validIncome \u003d new IncomeBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Undoable addIncomeCommand \u003d new AddIncomeCommand(validIncome);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        pastUndoableCommands.addPastCommand(addIncomeCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        //checks if all the commands in the redo stack are cleared"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(pastUndoableCommands.hasRedoCommand());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void addPastCommand_addListCommandToUndoStack_throwException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e pastUndoableCommands.addPastCommand((Undoable) new ListCommand()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    //other tests for other types of commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 76
    }
  },
  {
    "path": "src/test/java/thrift/model/ThriftTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private final Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(Collections.emptyList(), thrift.getTransactionList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e thrift.resetData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void resetData_withValidReadOnlyThrift_replacesData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift newData \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(newData, thrift);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e thrift.hasTransaction(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_transactionNotInThrift_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(thrift.hasTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void hasTransaction_transactionInThrift_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertTrue(thrift.hasTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e thrift.getTransactionList().remove(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * A stub ReadOnlyThrift whose transaction list can violate interface constraints."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static class ThriftStub implements ReadOnlyThrift {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        private BudgetList budgets;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ThriftStub(Collection\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            this.transactions.setAll(transactions);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        public BudgetList getBudgetList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 8,
      "lightz96": 76
    }
  },
  {
    "path": "src/test/java/thrift/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void setThriftFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setThriftFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/thrift/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/BudgetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addValidBudget_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e budgetList.setBudget(new Budget(now, new BudgetValue(\"123\"))));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void addNullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e budgetList.setBudget(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void updateBudget_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertDoesNotThrow(() -\u003e budgetList.setBudget(new Budget(now, new BudgetValue(\"321\"))));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setBudget_budgetNotInThrift_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        budgetList.setBudget(TypicalTransactions.OCT_BUDGET);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(budgetList.getBudgetForMonthYear(now).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void removeBudget_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        BudgetList expectedList \u003d new BudgetList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Budget budget \u003d new Budget(now, new BudgetValue(\"200\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        budgetList.setBudget(budget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        budgetList.removeBudget(budget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(budgetList, expectedList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 41,
      "lightz96": 11
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_nullCalendarNullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_validCalendarInvalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Budget(now, new BudgetValue(\"-100\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void compareIdenticalBudgets_returnsTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Budget b1 \u003d new Budget(now, new BudgetValue(\"123\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Budget b2 \u003d new Budget(now, new BudgetValue(\"123\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(b1, b2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 32
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/BudgetValueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class BudgetValueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BudgetValue(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String invalidValue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BudgetValue(invalidValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isValidValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BudgetValue.isValidValue(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\"1a\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\"10.100\")); // contains more than 2 decimal digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(BudgetValue.isValidValue(\".10\")); // no whole number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(BudgetValue.isValidValue(\"100\")); // integer only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(BudgetValue.isValidValue(\"100.1\")); // 1 decimal point"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(BudgetValue.isValidValue(\"100.10\")); // 2 decimal points"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(BudgetValue.isValidValue(\"0\")); // 0 is valid for budget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 41
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/DescriptionOrRemarkContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionOrRemarkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate firstPredicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate secondPredicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new DescriptionOrRemarkContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        DescriptionOrRemarkContainsKeywordsPredicate predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // Keywords match value, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        predicate \u003d new DescriptionOrRemarkContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Hearing\", \"$999\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Airpods\").withValue(\"12345\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 79
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expense.getTags().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.isSameTransaction(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description and value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Expense updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(updatedExpense));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.isSameTransaction(updatedExpense));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same name, same value, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_BRUNCH).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.isSameTransaction(updatedExpense));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expenseCopy \u003d new ExpenseBuilder(TypicalTransactions.LAKSA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.equals(expenseCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TypicalTransactions.LAKSA.equals(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(TypicalTransactions.PENANG_LAKSA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Expense updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(updatedExpense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withValue(CommandTestUtil.VALID_VALUE_AIRPODS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(updatedExpense));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        assertFalse(TypicalTransactions.LAKSA.equals(updatedExpense));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 67,
      "lye-jw": 12
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 14
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/TransactionDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String invalidValue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionDate(invalidValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionDate.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"35/01/2000\")); //invalid day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(TransactionDate.isValidDate(\"10/13/2000\")); // invalid month"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(TransactionDate.isValidDate(\"10/01/2000\")); //proper date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 38
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/TransactionIsInMonthYearPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.model.transaction.Budget.BUDGET_DATE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionIsInMonthYearPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String monthYear1 \u003d \"10/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String monthYear2 \u003d \"11/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        c1.setTime(BUDGET_DATE_FORMAT.parse(monthYear1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar c2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        c2.setTime(BUDGET_DATE_FORMAT.parse(monthYear2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionIsInMonthYearPredicate firstPredicate \u003d new TransactionIsInMonthYearPredicate(c1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionIsInMonthYearPredicate secondPredicate \u003d new TransactionIsInMonthYearPredicate(c2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionIsInMonthYearPredicate firstPredicateCopy \u003d new TransactionIsInMonthYearPredicate(c1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // different transaction -\u003e return false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_transactionIsInMonthYear_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String monthYear \u003d \"10/2019\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String transactionDate \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        c1.setTime(BUDGET_DATE_FORMAT.parse(monthYear));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionIsInMonthYearPredicate predicate \u003d new TransactionIsInMonthYearPredicate(c1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().withDate(transactionDate).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(predicate.test(expense));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void test_transactionIsNotInMonthYear_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String monthYear \u003d \"10/2019\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String transactionDate \u003d \"01/11/2019\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        c1.setTime(BUDGET_DATE_FORMAT.parse(monthYear));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionIsInMonthYearPredicate predicate \u003d new TransactionIsInMonthYearPredicate(c1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().withDate(transactionDate).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(predicate.test(expense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 69
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/TransactionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private final TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_transactionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(transactionList.contains(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void contains_transactionInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(transactionList.contains(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_nullTargetTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransaction(null, TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction_nullUpdatedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransaction(TypicalTransactions.LAKSA, null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransaction_targetTransactionNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction_updatedTransactionIsSameTransaction_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction_updatedTransactionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Expense updatedExpense \u003d new ExpenseBuilder(TypicalTransactions.LAKSA)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withDescription(CommandTestUtil.VALID_DESCRIPTION_AIRPODS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_ACCESSORY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, updatedExpense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        expectedTransactionList.add(updatedExpense);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public void setTransaction_updatedTransactionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransaction(TypicalTransactions.LAKSA, TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransactionWithIndex(null, TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex_nullUpdatedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.setTransactionWithIndex(Index.fromZeroBased(0), null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactionWithIndex_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e transactionList"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .setTransactionWithIndex(Index.fromOneBased(0), TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.remove(TypicalTransactions.LAKSA));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.remove(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_nullTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((TransactionList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_transactionList_replacesOwnListWithProvidedTransactionList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.setTransactions(expectedTransactionList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((List\u003cTransaction\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        transactionList.add(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d Collections.singletonList(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.transactionList.setTransactions(transactionList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        TransactionList expectedTransactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        expectedTransactionList.add(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(expectedTransactionList, this.transactionList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e transactionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 157,
      "lye-jw": 7
    }
  },
  {
    "path": "src/test/java/thrift/model/transaction/ValueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ValueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Value(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String invalidValue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(invalidValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_invalidValueInvalidCurrency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String value \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String currency \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(value, currency));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void constructor_validValueInvalidCurrency_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String value \u003d \"100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String currency \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Value(value, currency));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void isValidValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // null value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Value.isValidValue(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"1a\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\"10.100\")); // contains more than 2 decimal digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertFalse(Value.isValidValue(\".10\")); // not whole number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100\")); // integer only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100.1\")); // 1 decimal point"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertTrue(Value.isValidValue(\"100.10\")); // 2 decimal points"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 54
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonAdaptedBudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.storage.JsonAdaptedBudget.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_DATE \u003d \"AA/BBBB\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_VALUE \u003d \".00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_DATE \u003d \"10/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_VALUE \u003d TypicalTransactions.OCT_BUDGET.getBudgetValue().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_validBudgetDetails_returnsBudget() throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(TypicalTransactions.OCT_BUDGET);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalTransactions.OCT_BUDGET.toString(), budget.toModelType().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(null, VALID_VALUE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"month String\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(INVALID_DATE, VALID_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d Budget.DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_nullValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_DATE, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BudgetValue.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_DATE, INVALID_VALUE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d BudgetValue.VALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 56
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonAdaptedTransactionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.storage.JsonAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class JsonAdaptedTransactionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_VALUE \u003d \".00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String INVALID_TAG \u003d \"A+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_TYPE \u003d \"expense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d TypicalTransactions.LAKSA.getDescription().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_VALUE \u003d TypicalTransactions.LAKSA.getValue().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_REMARK \u003d \"This is valid!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final String VALID_DATE \u003d \"10/10/2010\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalTransactions.LAKSA.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_validTransactionDetails_returnsTransaction() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d new JsonAdaptedTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertEquals(TypicalTransactions.PENANG_LAKSA.toString(), transaction.toModelType().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, null, VALID_VALUE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        VALID_REMARK, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, INVALID_VALUE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        VALID_REMARK, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d Value.VALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_nullValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, null,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        VALID_REMARK, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Value.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        JsonAdaptedTransaction transaction \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                new JsonAdaptedTransaction(VALID_TYPE, VALID_DESCRIPTION, VALID_VALUE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                        VALID_REMARK, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, transaction::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 67,
      "lightz96": 8
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonCurrencyMappingsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "class JsonCurrencyMappingsStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            \"JsonCurrencyMappingsStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void readCurrencyMappings_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCurrencyMappings(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public void readCurrencyMappings_missingFile_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                readCurrencyMappings(\"NonExistentFile.json\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Optional\u003cHashMap\u003cString, Double\u003e\u003e readCurrencyMappings(String currencyFileInTestDataFolder)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Path currencyFilePath \u003d addToTestDataPathIfNotNull(currencyFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new JsonCurrencyMappingsStorage(currencyFilePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                .readCurrencyMappings(currencyFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 44
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonSerializableThriftTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonSerializableThriftTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"JsonSerializableThriftTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"typicalTransactionThrift.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path INVALID_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"invalidTransactionThrift.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_typicalTransactionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonSerializableThrift dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                JsonSerializableThrift.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thriftFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift typicalTransactionsThrift \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(thriftFromFile, typicalTransactionsThrift);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonSerializableThrift dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                JsonSerializableThrift.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 30,
      "lightz96": 11
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonThriftStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class JsonThriftStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            \"JsonThriftStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readThrift(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private java.util.Optional\u003cReadOnlyThrift\u003e readThrift(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return new JsonThriftStorage(Paths.get(filePath)).readThrift(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertFalse(readThrift(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readThrift(\"notJsonFormatTransactionThrift.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_invalidTransactionThrift_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readThrift(\"invalidTransactionThrift.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readThrift_invalidAndValidTransactionThrift_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            -\u003e readThrift(\"invalidAndValidTransactionThrift.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void readAndSaveThrift_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempThrift.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift original \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage jsonThriftStorage \u003d new JsonThriftStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift readBack \u003d jsonThriftStorage.readThrift(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.addTransaction(TypicalTransactions.LAKSA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.removeTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        readBack \u003d jsonThriftStorage.readThrift(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        original.addTransaction(TypicalTransactions.PENANG_LAKSA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        jsonThriftStorage.saveThrift(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        readBack \u003d jsonThriftStorage.readThrift().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift_nullThrift_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveThrift(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Saves {@code thrift} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private void saveThrift(ReadOnlyThrift thrift, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            new JsonThriftStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lightz96"
        },
        "content": "                    .saveThrift(thrift, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void saveThrift_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveThrift(new Thrift(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 2,
      "lightz96": 107
    }
  },
  {
    "path": "src/test/java/thrift/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        userPrefs.setThriftFilePath(Paths.get(\"thrift.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "lightz96": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/thrift/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "//import thrift.model.Thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": "//import thrift.model.ReadOnlyThrift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "//import thrift.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        JsonThriftStorage thriftStorage \u003d new JsonThriftStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        JsonCurrencyMappingsStorage currencyMappingsStorage \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "                new JsonCurrencyMappingsStorage((getTempFilePath(\"currMap\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        storageManager \u003d new StorageManager(thriftStorage, userPrefsStorage, currencyMappingsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /* TODO: Fix the test case when it is possible to read and parse from json file correctly."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void thriftReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         * {@link JsonThriftStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lightz96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonThriftStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "         */ /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift original \u003d TypicalTransactions.getTypicalThrift();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        storageManager.saveThrift(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        ReadOnlyThrift retrieved \u003d storageManager.readThrift().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertEquals(original, new Thrift(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public void getThriftFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        assertNotNull(storageManager.getThriftFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 7,
      "lightz96": 12,
      "krusagiz": 3,
      "-": 50
    }
  },
  {
    "path": "src/test/java/thrift/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/thrift/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Laksa\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"3.50\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"One of the best Laksa\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Value value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionDate date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d new Value(DEFAULT_COST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d new TransactionDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d transactionToCopy.getValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        remark \u003d transactionToCopy.getRemark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(transactionToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags \u003d StringUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Value} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withValue(String value) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d new Value(value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Remark} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Expense(description, value, remark, date, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 94
    }
  },
  {
    "path": "src/test/java/thrift/testutil/IncomeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class IncomeBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Bursary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"500\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/03/1937\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Value value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TransactionDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d new Value(DEFAULT_COST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d new TransactionDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        value \u003d transactionToCopy.getValue();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        remark \u003d transactionToCopy.getRemark();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(transactionToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Description} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Income} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.tags \u003d StringUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Value} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withValue(String value) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.value \u003d new Value(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Remark} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code Income} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public IncomeBuilder withDate(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        this.date \u003d new TransactionDate(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public Income build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return new Income(description, value, remark, date, tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 95
    }
  },
  {
    "path": "src/test/java/thrift/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TagSetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * A utility class to help with building Tag sets."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " *     {@code Set\u003cTag\u003e tagSet \u003d new TagSetBuilder(\"Food\").build();}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "krusagiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "public class TagSetBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    private final Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a blank TagSetBuilder with no tags"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a TagSetBuilder with tags made from {@param tagNames}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagNames whose tags are used as reference"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder(String... tagNames) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d (Stream.of(tagNames).map(Tag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a TagSetBuilder with tags from {@param tagSet}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagSet whose tags are used as reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d tagSet;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Creates a TagSetBuilder with tags from {@param transaction}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param transaction whose tags are used as reference"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        this.tagSet \u003d new HashSet\u003cTag\u003e(transaction.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a {@code TagSetBuilder} with a tag having tagName appended"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagName to be made into a {@code Tag} object and appended"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return {@code TagSetBuilder} with a tag having tagName appended"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder addTag(String tagName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new TagSetBuilder(tagSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * Returns a {@code TagSetBuilder} with tags having tagNames appended"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @param tagNames to be made into {@code Tag} objects and appended"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     * @return {@code TagSetBuilder} with tags having tagNames appended"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public TagSetBuilder addTags(String... tagNames) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003cTag\u003e(this.tagSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        tagSet.addAll(Stream.of(tagNames).map(Tag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return new TagSetBuilder(tagSet);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "krusagiz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    public Set\u003cTag\u003e build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "krusagiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "krusagiz": 81
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the middle index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the last index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns the transaction in the {@code model}\u0027s transaction list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static Transaction getTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return model.getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/thrift/testutil/ThriftBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lightz96"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lightz96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A utility class to help with building Thrift objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lightz96"
        },
        "content": " *     {@code Thrift ab \u003d new ThriftBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lightz96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "public class ThriftBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    private Thrift thrift;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder(Thrift thrift) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        this.thrift \u003d thrift;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Adds a new {@code Transaction} to the {@code Thrift} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public ThriftBuilder withTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lightz96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public Thrift build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lightz96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lightz96": 34
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TransactionUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.AddIncomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class for Transaction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TransactionUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Returns an add command string for adding the {@code Expense}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getTransactionDetails(expense);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Returns an add command string for adding the {@code Income}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static String getAddIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return AddIncomeCommand.COMMAND_WORD + \" \" + getTransactionDetails(income);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Returns the part of command string for the given {@code Transaction}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static String getTransactionDetails(Transaction transaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + transaction.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        sb.append(CliSyntax.PREFIX_VALUE + transaction.getValue().toString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        transaction.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Returns the part of command string for the given {@code UpdateTransactionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public static String getUpdateTransactionDescriptorDetails(UpdateCommand.UpdateTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(CliSyntax.PREFIX_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(description.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.getValue().ifPresent(value -\u003e sb.append(CliSyntax.PREFIX_VALUE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                .append(value.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                sb.append(CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 47,
      "lye-jw": 18
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_FIRST_TRANSACTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_SECOND_TRANSACTION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Index INDEX_THIRD_TRANSACTION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 12
    }
  },
  {
    "path": "src/test/java/thrift/testutil/TypicalTransactions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.commons.util.StreamUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lightz96"
        },
        "content": "import thrift.model.Thrift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.BudgetValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limerencee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lightz96"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limerencee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limerencee"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Expense LAKSA \u003d new ExpenseBuilder().withDescription(\"Laksa\").withValue(\"3.50\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"13/03/1937\").withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Expense PENANG_LAKSA \u003d new ExpenseBuilder().withDescription(\"Penang Laksa1\").withValue(\"5\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"11/10/2010\").withRemark(\"One of the best\").withTags(\"Brunch\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Income BURSARY \u003d new IncomeBuilder().withDescription(\"Bursary\").withValue(\"500\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            .withDate(\"13/11/2011\").withTags(\"Award\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Calendar OCT_2019_MONTH \u003d setCalendar(\"10/2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static final Budget OCT_BUDGET \u003d new Budget(OCT_2019_MONTH, new BudgetValue(\"1000\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private TypicalTransactions() {} // prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lightz96"
        },
        "content": "     * Returns an {@code Thrift} with all the typical transactions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lightz96"
        },
        "content": "    public static Thrift getTypicalThrift() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        Thrift thrift \u003d new Thrift();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (Transaction transaction : getTypicalTransaction()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lightz96"
        },
        "content": "            thrift.addTransaction(transaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        for (Budget budget : getTypicalBudget()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            thrift.setBudget(budget);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return thrift;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransaction() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lightz96"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LAKSA, BURSARY, PENANG_LAKSA));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudget() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            OCT_2019_MONTH.setTime(Budget.BUDGET_DATE_FORMAT.parse(\"10/2019\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        BudgetList budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        budgets.setBudget(OCT_BUDGET);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return StreamUtils.asStream(budgets.iterator()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Method to create and return a {@code Calendar} object with the given month String in the format MM/yyyy."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    private static Calendar setCalendar(String month) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        Calendar t \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            t.setTime(Budget.BUDGET_DATE_FORMAT.parse(month));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limerencee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limerencee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 69,
      "lightz96": 8
    }
  },
  {
    "path": "src/test/java/thrift/testutil/UpdateTransactionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "package thrift.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.logic.commands.UpdateCommand.UpdateTransactionDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.model.transaction.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.TransactionDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "import thrift.model.transaction.Value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " * A utility class to help with building UpdateTransactionDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lye-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "public class UpdateTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    private UpdateCommand.UpdateTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor \u003d new UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder(UpdateTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        this.descriptor \u003d new UpdateTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Returns an {@code UpdateTransactionDescriptor} with fields containing {@code Transaction}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor \u003d new UpdateTransactionDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setDescription(transaction.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setValue(transaction.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setRemark(transaction.getRemark());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setDate(transaction.getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setTags(transaction.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Sets the {@code Description} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Sets the {@code Value} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withValue(String value) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setValue(new Value(value));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     * Sets the {@code Remark} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limerencee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limerencee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limerencee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limerencee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Sets the {@code TransactionDate} of the {@code UpdateTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setDate(new TransactionDate(date));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdateTransactionDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateTransactionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lye-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    public UpdateCommand.UpdateTransactionDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lye-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 10,
      "lye-jw": 78
    }
  },
  {
    "path": "src/test/java/thrift/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/thrift/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limerencee"
        },
        "content": "package thrift.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import static thrift.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limerencee"
        },
        "content": "import thrift.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limerencee": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003c?import thrift.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limerencee"
        },
        "content": "\u003cfx:root type\u003d\"thrift.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limerencee": 1,
      "-": 5
    }
  }
]
