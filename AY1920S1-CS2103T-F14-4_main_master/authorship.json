[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Deliveria - a delivery task manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-F14-4/main[image:https://travis-ci.com/AY1920S1-CS2103T-F14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F14-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F14-4/main/badge.svg?branch\u003dmaster[CoverageStatus]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "https://www.codacy.com/manual/AY1920S1-CS2103T-F14-4/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-F14-4/main\u0026utm_campaign\u003dBadge_Grade\"[image:https://api.codacy.com/project/badge/Grade/c70f6c331d00403aade9c0acf4bfe43f[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently. While it consists of a _Graphical User Interface_ (GUI) that is user-friendly, Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "* See below for a detailed introduction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The code base is developed based on the `AddressBook-Level3` project by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://github.com/itext/itext7[iText7]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "junnbang": 6,
      "tysng": 4,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //for pdf file usage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    implementation group: \u0027com.itextpdf\u0027, name: \u0027itext7-core\u0027, version: \u00277.1.8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    archiveName \u003d \u0027deliveria.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "junnbang": 3,
      "tysng": 1,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria was developed by the AY1920S1-CS2103T-F14-4 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Chee You"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::cheeyou.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/cheeyou[github]][\u003c\u003ccheeyou#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Kris Kunthamas"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::argvampir.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/ArgVampir[github]][\u003c\u003cargvampir#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Sam Yong Jek"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::samyj2606.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/SamYJ2606[github]][\u003c\u003csamyj2606#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Song Tianyi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::tysng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/tysng[github]][\u003c\u003ctysng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Tan Jun Bang"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::junnbang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/junnbang[github]][\u003c\u003cjunnbang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "junnbang": 23,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Email us* : You can also reach us at `tsong1 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Team Team CS2103T-F14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "* stores the `DriverManager`, `TaskManager`, `CustomerManager`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "* exposes unmodifiable `ObservableList` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Structure of the CentralManager"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::CentralManager.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* uses `CentralManager` to consolidate all the managers\u0027 data that needs to be saved. (e.g. Task Manager\u0027s data)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* can save the `CentralManager` data in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "// tag::task-scheduling[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Task Scheduling"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "* A `Schedule` should be a collection of non-overlapping `EventTime` object, and is always sorted"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Should be able to notify the user if a better time slot is available, while giving users the liberty to exercise"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "their own judgments"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "Every `Driver` keeps track of a `Schedule` class, which is backed by a naturally sorted, TreeSet of `EventTime` objects."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "Before a new `EventTime` is added to the schedule, the method checks against the set of object to ensure"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "the addition will not result in overlapping `EventTime` in the schedule. This operation works in logarithmic time"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "thanks to the tree structure."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": "In order to better utilise a driver, we implement a method to suggest an earlier alternative"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "time slot in a schedule. When adding a time to a schedule, this method will:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Calculate the duration of proposed `EventTime`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Perform a linear greedy search in the schedule, to find the first slot that can fit the duration"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since the schedule guarantees no overlapping `EventTime`, there is no complication in handling the start and end times."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "In order to enforce the optimised scheduling method above, the program will block every `assign` command that has a"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": "suboptimal proposed time, unless the user uses the `force` argument. Moreover, the `assign` and `free` command are the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": "only commands that modify the `Driver` and `EventTime` attributes of a `Task`, so that all drivers will have an"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": "optimised schedule, unless `force assign` is used."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "The following activity diagram summarizes the checks happened when user executes an `assign` command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::AssignActivityDiagram.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": "After the above checks has passed, `assign` command will:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Set the `Driver` and `EventTime` attributes in the `Task`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Add the proposed `EventTime` to the `Driver`\u0027s `Schedule`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": "Similarly, calling `free` command will:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Remove the existing `EventTime` from the `Driver`\u0027s `Schedule`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Set the `Driver` and `EventTime` attributes to `null`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "// end::task-scheduling[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "// tag::task-feature[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Task Feature (E.g. Add Delivery Task)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The *Add Delivery Task* feature adds a new task into a task list. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "It uses the `AddTaskCommand`, which extends `Command`, to add a `Task` into the `TaskManager`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "`AddTaskCommandParser` is also utilised to parse and validate the user inputs before sending it to `AddTaskCommand` to execute."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027AddTaskCommand\u0027 requires the following fields: `Task`, `customerId`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The attributes of Task is as follows:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Class Diagram of Task class."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::Task.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "As seen in the above class diagram, `driver` and `eventTime` are optional fields that are not mandatory when adding a task."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": "They will be assigned subsequently using `assign` command. (Refer to Assign feature)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The mandatory fields for users are: \u0027description\u0027, \u0027date\u0027 and \u0027Customer\u0027."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "After the validation is completed, `AddTaskCommand` will fetch `Customer` using the `customerId` through the `CustomerManager`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": "A unique id will also be allocated to the task for differentiation."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The following sequence diagrams show how the add task operation works:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Sequence Diagram of adding a task."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::AddTaskCommand.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Sequence Diagram of Model interaction with the CustomerManager and TaskManager for adding a task."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::ModelInteractWithManagers.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The flow of how the task is being accessed and managed as shown above is the same for other task related command"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junnbang"
        },
        "content": "such as edit task command (`editT`) and delete task command (`del`)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Coupling of Task and other entities (Driver and Customer)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* **Alternative 1 (current choice):** Task class contains Driver and Customer classes as attributes."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Centralised Task class that encapsulates all the information, which makes it easy to manage task."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Task will have to depend on Driver and Customer. Decreases testability."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* **Alternative 2:** Driver and Customer classes have Task class as attribute."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Easy to access tasks through the respective classes. (Driver and Customer classes)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Having 2 classes depend on Task class. Decreases testability."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junnbang"
        },
        "content": "// end::task-feature[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junnbang"
        },
        "content": "// tag:generate-pdf[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Generate PDF Task Summary Feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The *generate PDF Task Summary* feature creates a task summary in a user-friendly layout in PDF format for *user reference* and *archive* usage."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junnbang"
        },
        "content": "`PdfCreator` class creates and saves the PDF document as well as formatting its layout."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junnbang"
        },
        "content": "It is implemented with the help of an external library, https://github.com/itext/itext7[iText7]."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Regarding iText\u0027s license, it can be used for free in situations where you distribute your software for free."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junnbang"
        },
        "content": "It is a Affero General Public License (AGPL) library. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Information updated as of 6 November 2019."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junnbang"
        },
        "content": "For more information, please visit the https://itextpdf.com/en[iText official website]."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The following sequence diagram shows how the user command `savepdf` is being executed and handled."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Sequence Diagram of how PDF task summary is saved."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::SavePdfCommand.png[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junnbang"
        },
        "content": "NOTE: The lifeline for `SavePdfCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Notice that only the `filepath` and the `date of delivery` is needed when calling `saveDriverTaskPdf`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junnbang"
        },
        "content": "This is because only the saving location of the PDF file and the date, where the task summary will be based on, are the only fields needed for the `PdfCreator`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The rest of the components, such as fetching of the tasks, will be handled by the `Model` while the formatting will be handled by `PdfCreator`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The following sequence diagram shows how the model interact with `PdfCreator` to generate the PDF task summary."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Sequence Diagram of how the model generates the PDF task summary."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::GeneratePdfSequenceDiagram.png[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The `PdfWrapperLayout` provides a outer canvas to encapsulates all the layouts."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The following layouts are mainly what makes up the task summary:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `PdfDriverLayout` class - wraps driver details."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `PdfCustomerLayout` class - wraps customer details."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `PdfTaskLayout` class - wraps task details."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The following activity diagram shows what happens when a user executes the `savepdf` command:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Activity Diagram of how a PDF task summary is generated."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::GeneratePdfActivityDiagram.png[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* **Alternative 1 (current choice)**: Abstract the layout of each part of the task summary."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Encourages reuse and easier to manage and add on."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* **Alternative 2**: Do the whole task summary layout in 1 class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Harder to manage."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junnbang"
        },
        "content": "// end::generate-pdf[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Customer Feature (E.g. Add Customer)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The *Add Customer* feature adds a new Customer into a Customer list. +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "It uses the `AddCustomerCommand`, which extends `Command`, to add a `Customer` into the `CustomerManager`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "`AddCustomerCommandParser` is also utilised to parse and validate the user inputs before sending it to `AddCustomerCommand` to execute."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u0027AddCustomerCommand\u0027 requires the following fields: `Customer`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The attributes of Task is as follows:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ".Class Diagram of Customer class."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "image::Customer.png[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "As seen in the above class diagram, the `id` field is not required when adding a customer."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The mandatory fields for users are: `name`, `phone`, `email`, `address`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "A unique id will also be allocated to the Customer for differentiation."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The following sequence diagram shows how the add customer operation works:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ".Sequence Diagram of adding a task."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "image::AddCustomerCommand.png[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Driver Feature (E.g. Add Driver)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The *Add Driver* feature adds a new Driver into a Driver list. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "It uses the `AddDriverCommand`, which extends `Command`, to add a `Driver` into the `DriverManager`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "`AddDriverCommandParser` is also utilised to parse and validate the user inputs before sending it to `AddCustomerCommand` to execute."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u0027AddDriverCommand\u0027 requires the following fields: `Driver`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The attributes of Driver is as follows:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ".Class Diagram of Driver class."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "image::Driver.png[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "As seen in the above class diagram, the `id` field is not required when adding a driver."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The mandatory fields for users are: `name`, `phone`, `email`, `address`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "A unique id will also be allocated to the Driver for differentiation."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "The following sequence diagram shows how the add driver operation works:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ".Sequence Diagram of adding a task."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "image::AddDriverCommand.png[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Usage of universal Command word"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* **Alternative 1 (current choice):** Have a individual command word for add task (`addT`, `addC`, `addD`)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Easy to implement and increases clarity for users."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Increases the number of commands."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* **Alternative 2:** Combine `AddCustomerCommand` with other `add` commands"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Pros: Will use only 1 universal `add` command for adding any entities. (Task, Customer and Driver)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Cons: Have to handle different type of parameters and some parameters of commands are overlap which requires more validation."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* has a need to manage a significant number of delivery tasks and drivers"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "*Value proposition*: manage delivery tasks faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all unfinished delivery tasks |know which tasks have yet to be delivered"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all delivered tasks |keep track of all delivered tasks in the past month"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |sort and display delivery tasks by their starting time |view pending tasks in an orderly manner"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery Manager |search for tasks by a keyword |find a task more easily"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* *` |Delivery Manager |toggle dark or light theme for the interface |the UI can change according to user preference"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`*` |Delivery Manager |see the image of the drivers |can identify them easily"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "junnbang"
        },
        "content": "(For all use cases below, the *System* is the `Deliveria` and the *Actor* is the `Delivery Manager`, unless specified otherwise)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Driver"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  Delivery Manager requests the list of drivers"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria shows a list of drivers"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Delivery Manager requests to delete a specific driver in the list"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4.  Deliveria deletes the driver"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria shows an error message."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a new task"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  User creates a delivery task"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria adds the task to a list of delivery tasks"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Deliveria prints to assure that the task is added"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 1a. Task given in invalid format"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a1. Deliveria shows an error message"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a2. Use case resumes at step 1"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use Case: Assign Driver to delivery task"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. Delivery Manager view the incomplete task list."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. Deliveria shows the incomplete task list."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. User assign a driver to one of the task"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4. Deliveria shows the confirmation of driver being assigned to the task."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "junnbang"
        },
        "content": "5. Deliveria indicate the incomplete task as On-going."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 3a. If driver is unavailable to take up the task"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria prompts that driver is busy"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a2. Deliveria shows the available time of the driver"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to maintain up to 100 drivers and 1000 tasks without performance degradation."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should comply with the company\u0027s privacy regulations and safely store the data files."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to scale quickly and adaptable for different companies."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tysng"
        },
        "content": "Windows 10, MacOS Mojave, Ubuntu"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 44,
      "cheeyou": 2,
      "junnbang": 159,
      "ArgVampir": 6,
      "tysng": 60,
      "-": 398
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "Group Name: `CS2103T-F14-4`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Chee You, Rushagrid Kunthamas, Sam Yong Jek, Song Tianyi, Tan Jun Bang`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently. While it consists of a _Graphical User Interface_ (GUI) that is user-friendly, Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ".UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::Ui.png[Ui]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "[caption\u003d\"Figure 1: \",link\u003d\"Ui.png\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Download the latest release deliveria.jar https://github.com/AY1920S1-CS2103T-F14-4/main/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Some example commands you can try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Lists all contacts: `list`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Adds a contact named John Doe to the Address Book: `Add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Deletes the 3rd contact shown in the current list: `Delete 3`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Exits the app: `exit`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e  for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* [action] [parameter 1] [parameter 2] [parameter 3]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Parameter consists of a delimiter and a word. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "For example, to edit the description of the delivery task (Task ID:3) : `editT 3 g/50 packs of frozen chicken`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Commands are case sensitive"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Order of parameter is can be reordered freely."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "List all available commands +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Lists all Task / Driver / Customer : `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Displays all Task / Customer / Driver list in it\u0027s original state. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Task Management Commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Add a delivery task: `addT`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Adds a delivery task to the task manager. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `addT [g/DESCRIPTION OF GOODS] [c/CUSTOMER ID] [dt/DATE OF DELIVERY]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* DATE OF DELIVERY must be today onwards. Date format: d/M/yyyy."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* All fields are compulsory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `addT g/100 frozon boxes of red grouper c/13 dt/10/12/2019`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `addT g/1x washing machine c/10 dt/12/1/2020`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Edits a delivery task : `editT`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Edits a existing delivery task in the task manager. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `editT [TASK ID] [g/DESCRIPTION OF GOODS] [c/CUSTOMER ID] [dt/DATE OF DELIVERY]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Edited DATE OF DELIVERY must be today onwards. Date format: d/M/yyyy."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Only indicate fields that you want to change."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `editT 3 g/50 frozen boxes of catfish` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Edits the description of the task (Task ID: 3) to be `50 frozen boxes of catfish`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `editT 5 c/2 dt/10/12/2019` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Edits the customer and date of delivery of the task (Task ID: 5) to be `Customer (Customer ID: 2)` and `10/12/2019` respectively."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "// tag::assign-command[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Assign a task to a driver: `assign`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "Assign an existing task a driver with a proposed time. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `assign [force] t/TASK_ID d/DRIVER_ID at/hMM - hMM`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "* You cannot assign a time that clashes with the driver\u0027s existing schedule, or is outside their working hours"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "* If there is an earlier time slot that the driver is available,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "the program will suggest the earlier time slot +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "    - Use `assign force` to dismiss the suggestion and add the proposed time to the task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The ID is a positive integer"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `assign t/1 d/1 at/900-1200` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "Schedule task #1 from 11 am to 12 pm, and assign it to driver #1."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `assign force t/2 d/1 at/1600-1700` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "Schedule task #2 from 4 pm to 5 pm, and assign it to driver #1 regardless the existence of an earlier time slot."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "// end::assign-command[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "// tag::free-command[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Unschedule a task: `free`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "Remove the time slot and driver from a task, and free the driver from this time slot in their schedule. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `free t/TASK_ID`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "* You cannot free a task that has no driver or time slot assigned to it."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `free t/1` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "Remove the assigned driver and time slot from the task, and free the driver\u0027s schedule."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "// end::free-command[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Mark a delivery task as completed: `done`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Mark a delivery task as completed. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `done [TASK ID]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Only tasks that are ONGOING can be marked as COMPLETED. ONGOING tasks refer to tasks with assigned drivers."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `done 2` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Marks the delivery task with Task ID 2 as COMPLETED."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Gets the details of a delivery task / driver / customer: `read`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Gets the details a task / driver / customer. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `read [c/CUSTOMER ID]` | `read [t/DRIVER ID]` | `read [t/TASK ID]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `read t/3` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Gets the details of task (Task ID: 3)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `read d/2` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Gets the details of driver (Driver ID: 2)."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Deletes a delivery task / driver / customer: `del`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deletes a task / driver / customer from its respective managers. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `del [c/CUSTOMER ID]` | `del [t/DRIVER ID]` | `del [t/TASK ID]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Cannot delete a *DELIVERY TASK* that is on-going. Remove the driver from the task first before deleting."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Cannot delete a *DRIVER* that is assigned to a on-going task. Remove the driver from the task first before deleting."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `del t/1` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deletes task (Task ID: 1) from the task manager."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `del d/2` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deletes driver (Driver ID: 2) from the driver manager."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Saves assigned delivery tasks for a specific date into PDF document: `savepdf`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "The PDF document is arranged in a table format to allow easy reference of the delivery tasks that is assigned to each drivers for the date."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Its purpose is for user reference and archive. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Refer to \u003c\u003cPdfLayout\u003e\u003e for sample. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `savepdf [DATE]`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `DATE` format is dd/mm/yyy."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `DATE` field is OPTIONAL. If date field is not declared, it will take the date of today."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* PDF document will be saved under `data` folder which is the same directory as where you put the deliveria.jar."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Name of the PDF document will be DeliveryTasks [DATE].pdf ."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "****"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `savepdf` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Saves the assigned delivery tasks in PDF format for today."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* `savepdf 20/10/2019` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Saves the assigned delivery tasks in PDF format for 20/10/2019."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Customer Management Commands"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Add a Customer `addC`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Adds customer to the customer manager. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `addC [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAGS]`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* All fields are compulsory."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* `addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Driver Management Commands"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d\u003d Add a Driver `addD`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Adds driver to the driver manager. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `addD [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAGS]`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* All fields are compulsory."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* `addD n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the data file in your previous computer."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: Where is the saved file at? +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*:  It is located in the same folder where the .jar file is. There will be a folder called `data`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: How do I know the list of commands? +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*: The `help` command will give a list of available commands."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Appendix"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".PDF Document generated by `savepdf` command"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::/images/DeliveryTasks_Pdf_Layout.png[id\u003d\"PdfLayout\", Delivery Tasks PDF]"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 24,
      "cheeyou": 5,
      "junnbang": 107,
      "ArgVampir": 3,
      "tysng": 44,
      "-": 87
    }
  },
  {
    "path": "docs/diagrams/AddCustomerCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":AddCustomerCommandParser\" as AddCustomerCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \"atc:AddCustomerCommand\" as AddCustomerCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \"ToAdd:Customer\" as Customer LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":CustomerManager\" as CustomerManager MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "[-\u003e LogicManager : execute(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create AddCustomerCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser -\u003e AddCustomerCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddCustomerCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddCustomerCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser -\u003e AddCustomerCommandParser : parse(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddCustomerCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create Customer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommandParser -\u003e Customer : new Customer(John Doe, 98765432, johnd@example.com, 311 Clementi Ave 2 #02-25, friends)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Customer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Customer --\u003e AddCustomerCommandParser : ToAdd"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Customer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create AddCustomerCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommandParser -\u003e AddCustomerCommand : new AddCustomerCommand(ToAdd)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddCustomerCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommand --\u003e AddCustomerCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddCustomerCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddCustomerCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "destroy AddCustomerCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "LogicManager -\u003e AddCustomerCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddCustomerCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommand -\u003e Customer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Customer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Customer --\u003e AddCustomerCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Customer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommand -\u003e Model : addCustomer(ToAdd)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Model -\u003e CustomerManager : addPerson(ToAdd)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate CustomerManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "CustomerManager --\u003e Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate CustomerManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Model --\u003e AddCustomerCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "CommandResult --\u003e AddCustomerCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddCustomerCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddCustomerCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 90
    }
  },
  {
    "path": "docs/diagrams/AddDriverCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":AddDriverCommandParser\" as AddDriverCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \"atc:AddDriverCommand\" as AddDriverCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \"ToAdd:Driver\" as Driver LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "participant \":DriverManager\" as DriverManager MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "[-\u003e LogicManager : execute(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create AddDriverCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser -\u003e AddDriverCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddDriverCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddDriverCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser -\u003e AddDriverCommandParser : parse(\"addC n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddDriverCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create Driver"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommandParser -\u003e Driver : new Driver(John Doe, 98765432, johnd@example.com, 311 Clementi Ave 2 #02-25, friends)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Driver"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Driver --\u003e AddDriverCommandParser : ToAdd"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Driver"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create AddDriverCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommandParser -\u003e AddDriverCommand : new AddDriverCommand(ToAdd)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddDriverCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommand --\u003e AddDriverCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddDriverCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddDriverCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "destroy AddDriverCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "LogicManager -\u003e AddDriverCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate AddDriverCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommand -\u003e Driver"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Driver"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Driver --\u003e AddDriverCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Driver"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommand -\u003e Model : addDriver(ToAdd)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Model -\u003e DriverManager : addPerson(ToAdd)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate DriverManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "DriverManager --\u003e Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate DriverManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Model --\u003e AddDriverCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "CommandResult --\u003e AddDriverCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "AddDriverCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate AddDriverCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 90
    }
  },
  {
    "path": "docs/diagrams/AddTaskCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":AddTaskCommandParser\" as AddTaskCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \"atc:AddTaskCommand\" as AddTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \"t:Task\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[-\u003e LogicManager : execute \\n user command*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand \\n user command*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right : User command*: \\n\"addT g/cupboard c/3 dt/10/12/2019\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create AddTaskCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser -\u003e AddTaskCommandParser : AddTaskCommandParser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddTaskCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddTaskCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser -\u003e AddTaskCommandParser : parse user command*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddTaskCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommandParser -\u003e Task : Task(1, \"cupboard\", 10/12/2019)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Task --\u003e AddTaskCommandParser : t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create AddTaskCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommandParser -\u003e AddTaskCommand : AddTaskCommand(\\n t, 3)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand --\u003e AddTaskCommandParser : atc"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommandParser --\u003e AddressBookParser : atc"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddTaskCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "destroy AddTaskCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser --\u003e LogicManager : atc"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "LogicManager -\u003e AddTaskCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand -\u003e Model : getCustomer(3)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model --\u003e AddTaskCommand : customer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand -\u003e Task : setCustomer(customer)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Task --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand -\u003e Model : addTask(t)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CommandResult --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddTaskCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 90
    }
  },
  {
    "path": "docs/diagrams/AssignActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "if (Are the driver and task valid?) then ([yes])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "else ([no])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": " stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "if (Is the task already assigned?) then ([yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "else ([yes])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    if (Is force assign?) then ([yes])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    : Free that task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    else ([no])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ": Check against the driver\u0027s schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "if (Is the target driver available during the proposed time) then ([yes])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    : assign;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "else ([no])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    if (Was the task changed?) then ([yes])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "        : Restore that task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    else ([no])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tysng": 35
    }
  },
  {
    "path": "docs/diagrams/CentralManager.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Class CentralManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Class CustomerManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Class DriverManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Class TaskManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class IdManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CentralManager ..\u003e CustomerManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CentralManager ..\u003e DriverManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CentralManager ..\u003e TaskManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CentralManager .right.\u003e IdManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right of IdManager: To keep track of \\n ID used so far. \\n E.g. task ID, customerID"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 18
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "if () then ([command commits AddressBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    :Save AddressBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/Customer.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "class Person{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003ename : Name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003ephone : Phone"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eemail : Email"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eaddress : Address"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003etags : Set\u003cTag\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Customer--\u003ePerson"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "class Customer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eidCount : int"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eid : int"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 22
    }
  },
  {
    "path": "docs/diagrams/Driver.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "class Person{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003ename : Name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003ephone : Phone"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eemail : Email"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eaddress : Address"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003etags : Set\u003cTag\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Driver--\u003ePerson"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "class Driver {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eidCount : int"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003ccolor:#white\u003eid : int"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 22
    }
  },
  {
    "path": "docs/diagrams/GeneratePdfActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":User executes `savepdf` command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":Checks if there is tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "assigned for the day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "if () then ([has tasks assigned for the day])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    if () then ([file path does"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    not exists])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        :Create file path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    :Generates a task summary"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    in PDF format;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    :Save PDF document"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    in the file path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    :Notify user that no tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    are assigned for the day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 28
    }
  },
  {
    "path": "docs/diagrams/GeneratePdfSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":PdfCreator\" as PdfCreator MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":TaskManager\" as TaskManager MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":PdfWrapperLayout\" as PdfWrapperLayout MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[-\u003e Model : saveDriverTaskPdf( \\n FILEPATH*, 5/11/2019)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right: FILEPATH*: \"./data/DeliveryTasks 2019-11-5\".pdf\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create PdfCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e PdfCreator : new PdfCreator(FILEPATH*)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate PdfCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator --\u003e Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate PdfCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e TaskManager : getList()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate TaskManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "TaskManager --\u003e Model: tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate TaskManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e TaskManager : getDriversFromTasks()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate TaskManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "TaskManager --\u003e Model: drivers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate TaskManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e PdfCreator : saveDriverTaskPdf(tasks, drivers, 5/11/2019)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate PdfCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator -\u003e PdfCreator ++: createDocument()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator --\u003e PdfCreator --: document"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator -\u003e PdfCreator ++: insertCoverPage(document, 5/11/2019)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator --\u003e PdfCreator --"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator -\u003e PdfCreator ++: insertDriverTask(document, 5/11/2019)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create PdfWrapperLayout"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator -\u003e PdfWrapperLayout :  new PdfWrapperLayout(document)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate PdfWrapperLayout"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfWrapperLayout --\u003e PdfCreator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate PdfWrapperLayout"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator -\u003e PdfWrapperLayout : populateDocumentWithTasks(tasks, 5/11/2019);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate PdfWrapperLayout"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfWrapperLayout --\u003e PdfCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate PdfWrapperLayout"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator --\u003e PdfCreator --"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "PdfCreator --\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate PdfCreator"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[\u003c-- Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 67
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam genericDisplay old"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class EntityManager\u003cT extends Person\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "Interface ReadOnlyEntityManager\u003cT extends Person\u003e\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class CustomerManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class TaskManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class DriverManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "TaskList *--\u003e \"*\" Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class Driver"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class EventTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class Schedule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class Customer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class UniqueEntityList\u003cT extends Person\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "CustomerManager --|\u003e EntityManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "DriverManager --|\u003e EntityManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "TaskManager o--\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "ModelManager o--\u003e \"1\" CustomerManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "ModelManager o--\u003e \"1\" DriverManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "ModelManager o--\u003e \"1\" TaskManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "Driver --|\u003e Person"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "Customer --|\u003e Person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "Task *--\u003e Customer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "Task *--\u003e Driver"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "Task *--\u003e EventTime"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "Driver *--\u003e \"1\" Schedule"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "Schedule *--\u003e \"*\" EventTime"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "EntityManager *--\u003e \"1\" UniqueEntityList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "EntityManager ..|\u003e ReadOnlyEntityManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "UniqueEntityList *--\u003e \"*\" Person"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tysng": 40,
      "-": 47
    }
  },
  {
    "path": "docs/diagrams/ModelInteractWithManagers.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":CustomerManager\" as CustomerManager MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":TaskManager\" as TaskManager MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e CustomerManager : getCustomer(3)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate CustomerManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CustomerManager --\u003e Model : customer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate CustomerManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model -\u003e TaskManager : addTask(taskToAdd)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate TaskManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "TaskManager --\u003e Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate TaskManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 24
    }
  },
  {
    "path": "docs/diagrams/SavePdfCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":SavePdfCommandParser\" as SavePdfCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \"p:SavePdfCommand\" as SavePdfCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[-\u003e LogicManager : execute(\\n\"savepdf 5/11/2019\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\\n\"savepdf 5/11/2019\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create SavePdfCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser -\u003e SavePdfCommandParser : SavePdfCommandParser()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate SavePdfCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate SavePdfCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser -\u003e SavePdfCommandParser : parse(\"savepdf 5/11/2019\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate SavePdfCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create SavePdfCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommandParser -\u003e SavePdfCommand : SavePdfCommand(5/11/2019)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate SavePdfCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommand --\u003e SavePdfCommandParser : p"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate SavePdfCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommandParser --\u003e AddressBookParser : p"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate SavePdfCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "destroy SavePdfCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "LogicManager -\u003e SavePdfCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate SavePdfCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right : FILEPATH*: \"./data/DeliveryTasks 2019-11-05.pdf\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommand -\u003e Model : saveDriverTaskPdf(FILEPATH*, 5/11/2019)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Model --\u003e SavePdfCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "CommandResult --\u003e SavePdfCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "SavePdfCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate SavePdfCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 73
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Interface CentralManagerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Class JsonCentralManagerStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "StorageManager o--\u003e CentralManagerStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonCentralManagerStorage .left.|\u003e CentralManagerStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonCentralManagerStorage .down.\u003e JsonSerializableCentralManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right of JsonCentralManagerStorage: Uses CentralManager to access \\n data needed to be save."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonSerializableCentralManager .right.\u003e JsonAdaptedCustomer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonSerializableCentralManager .left.\u003e JsonAdaptedDriver"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonSerializableCentralManager .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "JsonSerializableCentralManager .down.\u003e JsonAdaptedID"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/Task.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "show members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003etaskId : int"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003edescription : Description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003edate : LocalDate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003ecustomer : Customer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003edriver : Optional\u003cDriver\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003ccolor:#white\u003eeventTime : Optional\u003cEventTime\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "note right: date - date of delivery \\neventTime - duration taken to delivery"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "junnbang": 18
    }
  },
  {
    "path": "docs/diagrams/add-remark/CommandInterface.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ {abstract} execute(Model) : CommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class CommandException LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class RemarkCommand LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ COMMAND_WORD : String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ MESSAGE_USAGE : String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ MESSAGE_NOT_IMPLEMENTED_YET: String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027Empty spaces to ensure that box resizes to fit text"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "　　　　　　　　　　　　　　　　　　　　　　　　"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027Do _not_ change the previous line"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ execute(Model) : CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand -up[hidden]-|\u003e Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand .right.\u003e CommandException : \u003e throws"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "Command .right.\u003e CommandException : \u003e throws"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "show members"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "hide CommandException members"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 34
    }
  },
  {
    "path": "docs/diagrams/add-remark/ParserInterface.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "Interface Parser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class RemarkCommandParser LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "+parse : RemarkCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class ParserException LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommandParser -up-|\u003e Parser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "Parser .right.\u003e ParserException : throws"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "show members"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 19
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "tysng": 3,
      "-": 75
    }
  },
  {
    "path": "docs/team/argvampir.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Kris Kunthamas - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/cheeyou.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/junnbang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Tan Jun Bang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/samyj2606.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/tysng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Song Tianyi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Major enhancement*: added the feature to *schedule delivery tasks*, with *automatic suggestions based on the driver\u0027s existing schedule*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "** What it does: allows the user to assign a driver to a task, and schedule this task to be completed in the future, without causing time clashes with the existing tasks of the driver"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "** Justification: This is a core feature of the product. By enabling this feature, we help the managers to better utilise the human resources, save time in planning the task, and deliver the orders with satisfaction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "** Highlights: The command will automatically suggest a better time slot, so as to ensure that all drivers\u0027 schedules are the most optimised. At the same time, we are giving the managers the freedom to exercise their own judgement, and override the automatic stuggestions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "** Credits: The choice of a backing data structure is inspired by a CS2040 Practical Exam question"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "** [TBC] added a feature to correct the user\u0027s spelling mistakes in a command, by suggesting the most similar command word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "** changed three existing classes to generic classes, so as to reduce 600+ lines of repetitive code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Code contributed*: [TBC] [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Other contributions*: [TBC]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dassign-command]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfree-command]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtask-scheduling]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 61,
      "tysng": 14
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tysng"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tysng"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tysng"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tysng"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tysng"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tysng"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tysng"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tysng"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tysng"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tysng"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tysng"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tysng"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tysng"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tysng"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tysng"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tysng"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tysng"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tysng"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tysng"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tysng"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tysng"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tysng"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tysng"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tysng"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tysng"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tysng"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tysng"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tysng"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tysng"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tysng"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tysng"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tysng"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tysng"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tysng"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tysng"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tysng"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tysng"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tysng"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tysng"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tysng"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tysng"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tysng"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tysng"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tysng"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tysng"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tysng"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tysng"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tysng"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tysng"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tysng"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tysng"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tysng"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tysng"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tysng"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tysng"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tysng"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tysng"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "tysng": 425
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.JsonCentralManagerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManagerStorage jsonCentralManagerStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new JsonCentralManagerStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        storage \u003d new StorageManager(jsonCentralManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "        initTestEnv(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private void initTestEnv(Config config) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (config.getIsTestEnv()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "            GlobalClock.setFixedClock();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManager initialManagerData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cCentralManager\u003e centralManagerOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            centralManagerOptional \u003d storage.readManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!centralManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Central Manager\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            initialManagerData \u003d centralManagerOptional.orElseGet(SampleDataUtil::getSampleCentralManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Central Manager\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            initialManagerData \u003d new CentralManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Central Manager\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            initialManagerData \u003d new CentralManager();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new ModelManager(initialManagerData, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 19,
      "tysng": 10,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean testEnv \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean getIsTestEnv() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return testEnv;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 6,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_INVALID_DRIVER_DISPLAYED_INDEX \u003d \"The driver index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_CUSTOMERS_LISTED_OVERVIEW \u003d \"%1$d customers listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_DRIVERS_LISTED_OVERVIEW \u003d \"%1$d drivers listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DATA_START_NEW \u003d \"Starting with a empty manager. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"If you had data previously, this means that your data file is corrupted\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ASSIGN_SUCCESS \u003d \"Assigned #%1$d to %2$s at %3$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ALREADY_ASSIGNED \u003d \"This task is already scheduled. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ALREADY_COMPLETED \u003d \"This task is completed. You can only assign an \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"incomplete task. \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_NOT_TODAY \u003d \"The task is not scheduled for today. \" + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + String.format(\"Only tasks scheduled for today can be assigned. Today is %s.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "            GlobalClock.dateToday().format(Task.DATE_FORMAT_FOR_PRINT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //for generate pdf"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NO_ASSIGNED_TASK_FOR_THE_DATE \u003d \"There\u0027s no assigned tasks for %1$s.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 4,
      "junnbang": 6,
      "tysng": 10,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/GlobalClock.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A class to get the time and date now. For simplicity of testing, there are static methods to enable the clock to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": " * return a fixed date or time. The date time is 15 Oct 2019, 2pm SGT."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class GlobalClock {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String DEFAULT_DATETIME \u003d \"2019-10-15T06:00:00Z\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String DEFAULT_TIMEZONE \u003d \"Asia/Singapore\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static LocalTime timeNow() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return LocalTime.now(GlobalClock.clock).truncatedTo(ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static LocalDate dateToday() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return LocalDate.now(GlobalClock.clock);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Sets the fixed clock to 15 Oct 2019, 2pm SGT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void setFixedClock() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        GlobalClock.clock \u003d buildFixedClock(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void setRealClock() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        GlobalClock.clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static Clock buildFixedClock(String dateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Instant fixedTime \u003d Instant.parse(dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ZoneId sg \u003d ZoneId.of(DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Clock.fixed(fixedTime, sg);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns a date of 15 Oct 2019"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the fixed date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static LocalDate getStaticDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return LocalDate.now(buildFixedClock(DEFAULT_DATETIME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns a time of 2pm SGT."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the fixed time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static LocalTime getStaticTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return LocalTime.now(buildFixedClock(DEFAULT_DATETIME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of unassigned task list */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredUnassignedTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assigned task list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredAssignedTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of unassigned task list */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCompletedTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of drivers*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cDriver\u003e getFilteredDriverList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of customers */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean isStartAfresh();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Returns a list of incomplete tasks from previous days"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    ObservableList\u003cTask\u003e getIncompleteTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Refreshes filtered lists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    void refreshFilteredTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 10,
      "junnbang": 2,
      "ArgVampir": 22,
      "tysng": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            storage.saveManager(new CentralManager(model.getCustomerManager(), model.getDriverManager(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    model.getTaskManager(), model.getIdManager()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredUnassignedTaskList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getUnassignedTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredAssignedTaskList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getAssignedTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCompletedTaskList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getCompletedTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public ObservableList\u003cTask\u003e getIncompleteTaskList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return model.getIncompleteTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cDriver\u003e getFilteredDriverList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getFilteredDriverList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void refreshFilteredTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        model.refreshFilteredTaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isStartAfresh() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return model.isStartAfresh();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 9,
      "junnbang": 8,
      "ArgVampir": 33,
      "tysng": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class AddCustomerCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addC\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the address book. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_NAME + \"CUSTOMER NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Customer added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Customer already exists.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddCustomerCommand(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer customerToAdd \u003d new Customer(model.getNextCustomerId(), name, phone, email, address, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (model.hasCustomer(customerToAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PERSON));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addCustomer(customerToAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, customerToAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 52,
      "junnbang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDriverCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class AddDriverCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addD\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the address book. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_NAME + \" DRIVER NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Driver added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Driver already exists.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddDriverCommand(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Driver driverToAdd \u003d new Driver(model.getNextDriverId(), name, phone, email, address, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (model.hasDriver(driverToAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PERSON));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addDriver(driverToAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, driverToAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 54,
      "junnbang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Adds a task into the task manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addT\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_GOODS + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER ID] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_GOODS + \"20 boxes of utensils \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_DATETIME + \"18/12/2019\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_ID \u003d \"Invalid customer id.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DATE_IS_IN_THE_PAST \u003d \"Date of delivery cannot be before today.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int customerId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddTaskCommand(Description description, LocalDate date, int customerId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(description, customerId, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if date is today onwards"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (date.isBefore(GlobalClock.dateToday())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_IS_IN_THE_PAST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToAdd \u003d new Task(model.getNextTaskId(), description, date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasCustomer(customerId)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CUSTOMER_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskToAdd.setCustomer(model.getCustomer(customerId));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(taskToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ALREADY_COMPLETED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ASSIGN_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_TODAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.SchedulingSuggestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Assigns a task with a Driver and a valid EventTime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_PROMPT_FORCE \u003d \"Use \u0027assign force\u0027 to overwrite the current assignment.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assign a driver the specified task, with a proposed \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"start and end time. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: [force] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_DRIVER + \"DRIVER_ID] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK_ID] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_EVENT_TIME + \"hMM - hMM] \" + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_DRIVER + \"1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_TASK + \"3 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_EVENT_TIME + \"930 - 1600\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private EventTime eventTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isForceAssign;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int driverId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driverId      driver\u0027s ID"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param taskId        task\u0027s ID"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime     successfully parsed EventTime object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param isForceAssign true if disregard suggestion messages"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public AssignCommand(int driverId, int taskId, EventTime eventTime, boolean isForceAssign) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.isForceAssign \u003d isForceAssign;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Assign the task at the given time to the specified driver, without checking the driver\u0027s schedule."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * The operation is atomic."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driver    driver"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task      task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime the time which the task is happening"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws SchedulingException when the proposed time conflicts with the driver\u0027s schedule"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void forceAssign(Driver driver, Task task, EventTime eventTime) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "            driver.assign(eventTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (SchedulingException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        task.setDriverAndEventTime(Optional.of(driver), Optional.of(eventTime));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds a String when a command is successful."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param suggestion the suggestion given by Schedule"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task       the assigned task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driver     the driver assigned"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime  the time to happen"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the string that used to return CommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static String buildSuccessfulResponse(SchedulingSuggestion suggestion, Task task, Driver driver,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "                                                 EventTime eventTime) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String additionalSuggestion \u003d suggestion.isEmpty() ? \"\" : \"\\n\" + suggestion;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(MESSAGE_ASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "                task.getId(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "                driver.getName().fullName,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "                eventTime.toString()) + additionalSuggestion;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks that the task if not already completed, and scheduled for today. Otherwise, throws an exception."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task the task to check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws CommandException with the error message"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void checkAssignPreconditions(Task task) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (task.getStatus().equals(TaskStatus.COMPLETED)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_COMPLETED);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!task.getDate().equals(GlobalClock.dateToday())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_TODAY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Task getTaskIfPresent(Model model, int taskId) throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!model.hasTask(taskId)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return model.getTask(taskId);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Driver getDriverIfPresent(Model model, int driverId) throws CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!model.hasDriver(driverId)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return model.getDriver(driverId);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks that the proposed time is not in the past; otherwise, throws an exception."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime the proposed time"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws CommandException with error message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void assertTimeIsNotPast(EventTime eventTime) throws CommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (eventTime.getStart().compareTo(GlobalClock.timeNow()) \u003c 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(String.format(Schedule.MESSAGE_EVENT_START_BEFORE_NOW_FORMAT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    GlobalClock.timeNow().format(EventTime.DISPLAY_TIME_FORMAT)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver driver \u003d getDriverIfPresent(model, driverId);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task task \u003d getTaskIfPresent(model, taskId);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "        checkAssignPreconditions(task);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // saving the state of event time"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional\u003cEventTime\u003e existingEventTime \u003d task.getEventTime();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isAlreadyAssigned \u003d task.getStatus() !\u003d TaskStatus.INCOMPLETE || task.getDriver().isPresent()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || task.getEventTime().isPresent();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isAlreadyAssigned) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "            resetTaskIfForced(task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTimeIsNotPast(eventTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "        SchedulingSuggestion suggestion \u003d driver.suggestTime(eventTime, GlobalClock.timeNow());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (suggestion.isFatal()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (isAlreadyAssigned \u0026\u0026 isForceAssign) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // restore task"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "                forceAssign(driver, task, existingEventTime.get());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(suggestion.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "        forceAssign(driver, task, eventTime);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(buildSuccessfulResponse(suggestion, task, driver, eventTime));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Handles the case where the task is already assign. It resets the task if the force flag, is"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * turned on; otherwise, throws an exception."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task the task to reset, if needed"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws CommandException when the forced flag is not turned on"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetTaskIfForced(Task task) throws CommandException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isForceAssign) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "            FreeCommand.freeDriverFromTask(task.getDriver().get(), task);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ASSIGNED + MESSAGE_PROMPT_FORCE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand that \u003d (AssignCommand) o;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return isForceAssign \u003d\u003d that.isForceAssign"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 driverId \u003d\u003d that.driverId"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 taskId \u003d\u003d that.taskId"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 Objects.equals(eventTime, that.eventTime);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(eventTime, isForceAssign, driverId, taskId);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 1,
      "ArgVampir": 1,
      "tysng": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Task / Driver / Customer List has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String CONFIRMATION_WORD \u003d \"CONFIRM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes all data from Customer, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Driver and Task list.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Once data are deleted, they CANNOT be retrieved back. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [CONFIRM] *CASE-SENSITIVE \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CONFIRMATION_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.resetCentralManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 8,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.logic.commands.GoCommand.DEFAULT_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private String tabType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.tabType \u003d DEFAULT_TAB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String tabType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.tabType \u003d tabType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String getTabType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return tabType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return !tabType.equals(DEFAULT_TAB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 20,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIdCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Deletes an entity using it\u0027s unique id from its list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Entity refers to Task, Driver and Customer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DeleteIdCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \": Deletes a Task / Driver / Customer using their UNIQUE ID.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_TASK + \" Task ID]  |  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_CUSTOMER + \" Customer ID]  |  \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_DRIVER + \" Driver ID] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_TASK + \" 10 \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_CUSTOMER + \" 2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid %1$s id.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted %1$s: %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_CANNOT_DELETE_IF_ALLOCATED \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            \"This %1$s has already been allocated to a current task or completed task, therefore, cannot delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DeleteIdCommand(String className, int id) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (className.equals(Task.class.getSimpleName())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!model.hasTask(id)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ID, className));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task taskToDelete \u003d model.getTask(id);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //if task has driver, free his schedule from the duration given in task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (taskToDelete.getStatus() \u003d\u003d TaskStatus.ON_GOING) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                //disregard check for optional empty because if a task is ON_GOING, there MUST be a driver and duration."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Driver driver \u003d taskToDelete.getDriver().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "                boolean isDeleteSuccess \u003d driver.deleteFromSchedule(taskToDelete.getEventTime().get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "                assert isDeleteSuccess;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, className, taskToDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        } else if (className.equals(Customer.class.getSimpleName())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Customer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            if (!model.hasCustomer(id)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ID, className));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            Customer customerToDelete \u003d model.getCustomer(id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //if customer is already allocated to a task, whether complete or incomplete"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (model.hasTaskBelongsToCustomer(customerToDelete)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CANNOT_DELETE_IF_ALLOCATED, className));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            model.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, className, customerToDelete));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Driver"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            if (!model.hasDriver(id)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CANNOT_DELETE_IF_ALLOCATED, className));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            Driver driverToDelete \u003d model.getDriver(id);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //if driver is already allocated to a task, whether complete or incomplete"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (model.hasTaskBelongsToDriver(driverToDelete)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CANNOT_DELETE_IF_ALLOCATED, className));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            model.deleteDriver(driverToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, className, driverToDelete));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 16,
      "junnbang": 83,
      "tysng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.exceptions.TaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Marks a task as completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Only works on on-going tasks, not incomplete tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \": Marks a task as COMPLETED.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [TASK_ID] \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid Task id.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_MARK_TASK_COMPLETED \u003d \"Task (TASK ID: %1$s) is marked \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + TaskStatus.COMPLETED + \" successfully.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_ONGOING \u003d \"Current Task Status: %1$s \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Task has to be ONGOING before it can be marked COMPLETED.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasTask(taskId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToMark \u003d model.getTask(taskId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (taskToMark.getStatus() \u003d\u003d TaskStatus.INCOMPLETE) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TASK_NOT_ONGOING, taskToMark.getStatus()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskToMark.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (TaskException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //if already completed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if task is ONGOING, it must have a driver and eventTime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        freeDriverFromTask(taskToMark.getDriver().get(), taskToMark.getEventTime().get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_TASK_COMPLETED, taskToMark.getId()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void freeDriverFromTask(Driver driver, EventTime eventTime) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        boolean isDriverFreeFromEventTime \u003d driver.deleteFromSchedule(eventTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert isDriverFreeFromEventTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * corresponding field value of the persgit on."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 1,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class EditCustomerCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editC\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"by the index number used in the displayed customer list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int customerId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final EditCustomerCommand.EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param customerId Unique id of the customer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditCustomerCommand(int customerId, EditCustomerCommand.EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(customerId, editCustomerDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerCommand.EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasCustomer(customerId)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Customer.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer customerToEdit \u003d model.getCustomer(customerId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!customerToEdit.isSameCustomer(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        model.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private static Customer createEditedCustomer(Customer customerToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                                                 EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Email updatedEmail \u003d editCustomerDescriptor.getEmail().orElse(customerToEdit.getEmail());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Address updatedAddress \u003d editCustomerDescriptor.getAddress().orElse(customerToEdit.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Customer(customerToEdit.getId(), updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                            updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!(other instanceof EditCustomerCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        EditCustomerCommand e \u003d (EditCustomerCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerId \u003d\u003d e.customerId"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * corresponding field value of the persgit on."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public EditCustomerDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerCommand.EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            if (!(other instanceof EditCustomerCommand.EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            EditCustomerCommand.EditCustomerDescriptor e \u003d (EditCustomerCommand.EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 208,
      "junnbang": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditDriverCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Edits the details of an existing driver in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class EditDriverCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editD\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the driver identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"by the index number used in the displayed driver list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_EDIT_DRIVER_SUCCESS \u003d \"Edited Driver: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DRIVER \u003d \"This driver already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int driverId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final EditDriverCommand.EditDriverDescriptor editDriverDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverId unique id of the driver."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param editDriverDescriptor details to edit the driver with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditDriverCommand(int driverId, EditDriverCommand.EditDriverDescriptor editDriverDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(driverId, editDriverDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        this.editDriverDescriptor \u003d new EditDriverCommand.EditDriverDescriptor(editDriverDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasDriver(driverId)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Driver.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Driver driverToEdit \u003d model.getDriver(driverId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Driver editedDriver \u003d createEditedDriver(driverToEdit, editDriverDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!driverToEdit.isSameDriver(editedDriver) \u0026\u0026 model.hasDriver(editedDriver)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DRIVER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        model.setDriver(driverToEdit, editedDriver);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DRIVER_SUCCESS, editedDriver));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Creates and returns a {@code Driver} with the details of {@code driverToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * edited with {@code editDriverDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private static Driver createEditedDriver(Driver driverToEdit, EditDriverDescriptor editDriverDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assert driverToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Name updatedName \u003d editDriverDescriptor.getName().orElse(driverToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Phone updatedPhone \u003d editDriverDescriptor.getPhone().orElse(driverToEdit.getPhone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Email updatedEmail \u003d editDriverDescriptor.getEmail().orElse(driverToEdit.getEmail());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Address updatedAddress \u003d editDriverDescriptor.getAddress().orElse(driverToEdit.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editDriverDescriptor.getTags().orElse(driverToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Driver(driverToEdit.getId(), updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!(other instanceof EditDriverCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        EditDriverCommand e \u003d (EditDriverCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverId \u003d\u003d e.driverId"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 editDriverDescriptor.equals(e.editDriverDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Stores the details to edit the driver with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * corresponding field value of the persgit on."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static class EditDriverDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public EditDriverDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public EditDriverDescriptor(EditDriverCommand.EditDriverDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            if (!(other instanceof EditDriverCommand.EditDriverDescriptor)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            EditDriverCommand.EditDriverDescriptor e \u003d (EditDriverCommand.EditDriverDescriptor) other;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 208,
      "junnbang": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Edits the details of an existing task in the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editT\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Edits the details of a task. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Indicate only the parameters you want to change.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[TASK ID] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_GOODS + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER ID] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATE]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_GOODS + \"10 ice boxes of red groupers \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_DATETIME + \"10/12/2019\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_EDIT \u003d \"At least one field need to be different to edit.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_CANNOT_BE_EDITED \u003d \"Completed Task cannot be edited.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DATE_IS_BEFORE \u003d \"Updated date of delivery cannot be before today.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskCommand(int id, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.editTaskDescriptor \u003d editTaskDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasTask(id)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToEdit \u003d model.getTask(id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check task is completed, then it cannot be edited."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (taskToEdit.getStatus() \u003d\u003d TaskStatus.COMPLETED) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_BE_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if the updated date is not same as original and if date is not today onwards"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!taskToEdit.getDate().equals(editedTask.getDate())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 editedTask.getDate().isBefore(GlobalClock.dateToday())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_DATE_IS_BEFORE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (taskToEdit.equals(editedTask)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_EDIT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if date is changed, the schedule of the driver will be free too."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //task will become incomplete"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        freeDriverIfDateIsChanged(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Empty Driver\u0027s schedule if the date of delivery has been changed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToEdit original task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param editedTask updated task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static void freeDriverIfDateIsChanged(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (taskToEdit.getDate() !\u003d editedTask.getDate() \u0026\u0026 taskToEdit.getDriver().isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //remove the driver from the original task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Driver driver \u003d taskToEdit.getDriver().get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "            boolean isDeleteSuccess \u003d driver.deleteFromSchedule(taskToEdit.getEventTime().get());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "            assert isDeleteSuccess;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //remove driver and eventTime from the editedTask."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editedTask.setDriverAndEventTime(Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                         Model model) throws CommandException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if customer id provided is valid"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cInteger\u003e customerId \u003d editTaskDescriptor.getCustomer();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId.isPresent() \u0026\u0026 !model.hasCustomer(customerId.get())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Customer.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer updatedCustomer;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId.isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the new customer to be assigned from customer list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int updatedCustomerId \u003d customerId.get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedCustomer \u003d model.getCustomer(updatedCustomerId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the original customer that is assigned to the task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedCustomer \u003d taskToEdit.getCustomer();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate updatedDate \u003d editTaskDescriptor.getDate().orElse(taskToEdit.getDate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d new Task(taskToEdit.getId(), updatedDescription, updatedDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setCustomer(updatedCustomer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //use the original driver and eventTime, no changes made to them."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setDriverAndEventTime(taskToEdit.getDriver(), taskToEdit.getEventTime());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return editedTask;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Integer driver;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Integer customer;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private EventTime eventTime;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDriver(toCopy.driver);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setCustomer(toCopy.customer);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setEventTime(toCopy.eventTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, date, driver, customer, eventTime);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cInteger\u003e getDriver() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(driver);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDriver(int driver) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.driver \u003d driver;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cInteger\u003e getCustomer() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(customer);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setCustomer(int customer) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cEventTime\u003e getEventTime() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(eventTime);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setEventTime(EventTime eventTime) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 219,
      "tysng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class FindCustomerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all customers whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public FindCustomerCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                || (other instanceof FindCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCustomerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindDriverCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class FindDriverCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findD\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all drivers whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public FindDriverCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                String.format(Messages.MESSAGE_DRIVERS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                || (other instanceof FindDriverCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindDriverCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FreeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Removes a driver from a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_FREE_SUCCESS \u003d \"Task #%1$s is no longer assigned to %2$s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_ASSIGNED \u003d \"Task #%1$s is not assigned to a driver.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \": Remove the assigned driver and the scheduled time of a task.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK_ID] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_TASK + \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param taskId task\u0027s ID"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public FreeCommand(int taskId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Removes a driver from a task, and set the driver free during the corresponding time in the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * The method will fail if the Task contains no EventTime, or the Driver\u0027s Schedule doesn\u0027t contain"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the EventTime."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driver driver to be freed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task   task to be freed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static void freeDriverFromTask(Driver driver, Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assert task.getEventTime().isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // remove the task from driver\u0027s schedule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isFreed \u003d driver.deleteFromSchedule(task.getEventTime().get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assert isFreed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // remove driver from the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        task.setDriverAndEventTime(Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!model.hasTask(taskId)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task task \u003d model.getTask(taskId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver driver \u003d task.getDriver()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(String.format(MESSAGE_TASK_NOT_ASSIGNED, task.getId())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "        freeDriverFromTask(driver, task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FREE_SUCCESS, task.getId(), driver.getName().fullName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "        FreeCommand that \u003d (FreeCommand) o;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return taskId \u003d\u003d that.taskId;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(taskId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 2,
      "tysng": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Navigates to the specified tab."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class GoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String DEFAULT_TAB \u003d \"default\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String HOME_TAB \u003d \"home\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String HISTORY_TAB \u003d \"history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_GO_SUCCESS \u003d \"Navigated to %s tab!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Navigates to the specified tab bar \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"the specified keywords (case-sensitive) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Parameters: TAB_NAME\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" history\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private String tabType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public GoCommand(String tabType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.tabType \u003d tabType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GO_SUCCESS, tabType), false, false, tabType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned all the Task\u0027s / Driver\u0027s / Customer\u0027s list \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"to its original view.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //reset any predicate that customer list has"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //reset any predicate that driver list has"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //reset any predicate that assigned and unassigned task list has"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReadIdCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Displays the full details of the entity using it\u0027s unique id from its list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Entity refers to Task, Driver and Customer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ReadIdCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"read\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \": Get the details of Task / Driver / Customer using their UNIQUE ID.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_TASK + \" Task ID]  |  \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_CUSTOMER + \" Customer ID]  |  \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_DRIVER + \" Driver ID]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_TASK + \" 1 \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_DRIVER + \" 3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid %1$s id.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ReadIdCommand(String className, int id) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (className.equals(Task.class.getSimpleName())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!model.hasTask(id)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ID, className));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(model.getTask(id).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else if (className.equals(Customer.class.getSimpleName())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!model.hasCustomer(id)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ID, className));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(model.getCustomer(id).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //for read driver"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!model.hasDriver(id)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ID, className));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(model.getDriver(id).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SavePdfCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.pdfmanager.exceptions.PdfNoTaskToDisplayException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Saves a PDF file with all drivers\u0027 tasks for a specific date assigned."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class SavePdfCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"savepdf\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String FILE_NAME \u003d \"DeliveryTasks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String DEFAULT_FILE_PATH \u003d \"./data/\" + FILE_NAME + \" %1$s.pdf\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully saved all drivers\u0027 task into a PDF document. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"It is saved in the same folder as your deliveria.jar file as \" + FILE_NAME + \".pdf\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Saves all drivers\u0027 tasks into PDF for the specific date. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Date field is optional. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"if a date is not specified, then today\u0027s date will be chosen. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[DATE] \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20/10/2019\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cLocalDate\u003e date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public SavePdfCommand(Optional\u003cLocalDate\u003e date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d DEFAULT_FILE_PATH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public SavePdfCommand(Optional\u003cLocalDate\u003e date, String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set date to today if date isn\u0027t indicated"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            date \u003d Optional.of(GlobalClock.dateToday());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate dateOfDelivery \u003d date.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String filePathWithDate \u003d String.format(filePath, dateOfDelivery);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            model.saveDriverTaskPdf(filePathWithDate, dateOfDelivery);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException | PdfNoTaskToDisplayException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.checkAssignPreconditions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.forceAssign;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.getTaskIfPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.optimizer.Candidate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.optimizer.ScheduleOptimizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Suggests a most optimum driver for an incoming task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_NO_DRIVER_AVAILABLE \u003d \"No driver is available for this duration. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Suggest and assign the most optimum driver for the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"task\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: [NUMBER_OF_HOURS] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK_ID] \" + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"1.5\" + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_TASK + \"3 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param taskId   task\u0027s ID"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param duration duration"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SuggestCommand(int taskId, Duration duration) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds a response when the command is succesfully executed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param result the chosen candidate to assign task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task the task assigned"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the response string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static String buildSuccessfulResponse(Candidate result, Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(Messages.MESSAGE_ASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "                task.getId(), result.getKey().getName().fullName, result.getValue().get().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task task \u003d getTaskIfPresent(model, taskId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "        checkAssignPreconditions(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // check whether the task is already scheduled"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTaskIncomplete(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ScheduleOptimizer optimizer \u003d new ScheduleOptimizer(model, task, duration);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Candidate result \u003d optimizer.start()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(MESSAGE_NO_DRIVER_AVAILABLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // optimizer always return an available driver and time slot"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        forceAssign(result.getKey(), task, result.getValue().get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.refreshAllFilteredList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(buildSuccessfulResponse(result, task));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks that the task is incomplete, throws an exception otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task the task to check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws CommandException with error message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void assertTaskIncomplete(Task task) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (task.getStatus() !\u003d TaskStatus.INCOMPLETE || task.getDriver().isPresent()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || task.getEventTime().isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCustomerTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * List the completed delivery task of a particular customer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class ViewCustomerTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewC\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the delivered tasks of the specified customer \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Parameters: \" + \"CUSTOMER_ID (must be a positive integer)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %s completed tasks delivered to the Customer ID #%s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private int customerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ViewCustomerTaskCommand(int customerId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!model.hasCustomer(customerId)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        model.viewCustomerTask(customerId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        int listSize \u003d model.getCurrentCompletedTaskList().size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, listSize, customerId));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewDriverTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * List completed delivery task allocated to the particular driver."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class ViewDriverTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewD\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the delivered tasks of the specified driver \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Parameters: \" + \"DRIVER_ID (must be a positive integer)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            + \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %s completed tasks assigned to the Driver ID #%s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private int driverId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ViewDriverTaskCommand(int driverId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!model.hasDriver(driverId)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DRIVER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        model.viewDriverTask(driverId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        int listSize \u003d model.getCurrentCompletedTaskList().size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, listSize, driverId));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/optimizer/Candidate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.optimizer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A convenient representation for a Driver-EventTime pair."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class Candidate extends Pair\u003cDriver, Optional\u003cEventTime\u003e\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Creates a new pair."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param key   The key for this pair"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param value The value to use for this pair"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Candidate(Driver key, Optional\u003cEventTime\u003e value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        super(key, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Gets a comparator between the EventTimes in the pair."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the comparator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Comparator\u003cCandidate\u003e comparator() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return (o1, o2) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "            // unpack"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "            Optional\u003cEventTime\u003e t1 \u003d o1.getValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "            Optional\u003cEventTime\u003e t2 \u003d o2.getValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (t1.isPresent() \u0026\u0026 t2.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return t1.get().compareTo(t2.get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "            } else if (t1.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/optimizer/ScheduleOptimizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.optimizer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " * An optimizer to suggest the best driver and best time for a task, based on rules and their priorities."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " * The optimizer is guaranteed not modifying the model, and is not designed to persist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": " * It exposes a convenient {@code ScheduleOptimizer#start} method to apply the rules and return the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class ScheduleOptimizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Constructs the optimizer object with the needed information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param model    the model which contains the state of the app"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task     the task to assign"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param duration the proposed duration of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ScheduleOptimizer(Model model, Task task, Duration duration) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the global optimum Driver-EventTime pair, based on the rules and priorities."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return an Optional of the pair if a suitable driver can be found; otherwise, an empty Optional"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cCandidate\u003e start() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // preferred"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .prioritizeSameCustomer()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // fall back"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .or(this::driverEarliestFit)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // in case other methods didn\u0027t check for this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .filter(candidate -\u003e candidate.getValue().isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the driver who has an earliest time slot to fit the proposed task, and the time slot as well."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return an Optional of the pair if a suitable driver can be found; otherwise, an empty Optional"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Optional\u003cCandidate\u003e driverEarliestFit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cDriver\u003e driverList \u003d model.getDriverManager().getDriverList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return driverList.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // for every driver, find whether he is able to block this duration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(driver -\u003e new Candidate(driver, driver.suggestTime(duration, GlobalClock.timeNow())))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // filter out the candidate who has no available time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .filter(candidate -\u003e candidate.getValue().isPresent())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // find the earliest driver-time pair"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .min(Candidate.comparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the driver who is already delivering to the same customer as the incoming task, and checks whether"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * he can take up the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return an Optional of the pair if a suitable driver can be found; otherwise, an empty Optional"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Optional\u003cCandidate\u003e prioritizeSameCustomer() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cTask\u003e taskList \u003d model.getTaskManager().getList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return taskList.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // find all the task whose customer is the same as the requested task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .filter(t -\u003e t.getCustomer().equals(task.getCustomer()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // get a distinct stream of drivers of the above tasks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(Task::getDriver)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .flatMap(Optional::stream) // get the list of drivers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "                // same as driverEarliestFit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(driver -\u003e new Candidate(driver, driver.suggestTime(duration, GlobalClock.timeNow())))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .filter(candidate -\u003e candidate.getValue().isPresent())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .min(Candidate.comparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Parses input arguments and creates a new AddCustomerDriverCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class AddCustomerCommandParser implements Parser\u003cAddCustomerCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerDriverCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * and returns an AddCustomerDriverCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public AddCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        //check all prefix are present"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new AddCustomerCommand(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 48,
      "junnbang": 1,
      "tysng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDriverCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.AddDriverCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Parses input arguments and creates a new AddCustomerDriverCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class AddDriverCommandParser implements Parser\u003cAddDriverCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerDriverCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * and returns an AddCustomerDriverCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public AddDriverCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        //check all prefix are present"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDriverCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new AddDriverCommand(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 49,
      "junnbang": 1,
      "tysng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GOODS, PREFIX_CUSTOMER, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_GOODS)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_GOODS).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int customerId \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new AddTaskCommand(description, date, customerId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 40,
      "tysng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.AddCustomerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.AddDriverCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DeleteIdCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditDriverCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.FindCustomerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.FindDriverCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.GoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.ReadIdCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.SavePdfCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.ViewCustomerTaskCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.ViewDriverTaskCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        case AddCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return new AddCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        case AddDriverCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return new AddDriverCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case EditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new EditCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case EditDriverCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new EditDriverCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new SuggestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new FreeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case DeleteIdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new DeleteIdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case ReadIdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new ReadIdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case SavePdfCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new SavePdfCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case FindCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new FindCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case FindDriverCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new FindDriverCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        case ViewCustomerTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new ViewCustomerTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        case ViewDriverTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new ViewDriverTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new GoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 6,
      "junnbang": 38,
      "ArgVampir": 13,
      "tysng": 12,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static ParseException getWrongFormatException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the parsed command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DRIVER, PREFIX_TASK, PREFIX_EVENT_TIME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw getWrongFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // check if the force flag is correctly spelled"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isForce \u003d argMultimap.getPreamble().equals(\"force\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isEmpty \u003d argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isEmpty \u003d\u003d isForce) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw getWrongFormatException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String driver \u003d argMultimap.getValue(PREFIX_DRIVER).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int driverId \u003d ParserUtil.parseId(driver);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String task \u003d argMultimap.getValue(PREFIX_TASK).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int taskId \u003d ParserUtil.parseId(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String time \u003d argMultimap.getValue(PREFIX_EVENT_TIME).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d ParserUtil.parseEventTime(time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new AssignCommand(driverId, taskId, proposed, isForce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a ClearCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!hasConfirmation(args)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private boolean hasConfirmation(String args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedStr \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return trimmedStr.equals(ClearCommand.CONFIRMATION_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.lang.reflect.Modifier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_DRIVER \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * For Persons (customer, driver)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * For Tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_EVENT_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_GOODS \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //Link Syntax to their respective classes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final HashMap\u003cString, String\u003e PREFIX_CLASS_MAP \u003d createPrefixClassMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a map for prefix to class name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return HashMap for prefix to class name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static HashMap\u003cString, String\u003e createPrefixClassMap() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        HashMap\u003cString, String\u003e classMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_TASK.getPrefix(), Task.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_CUSTOMER.getPrefix(), Customer.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_DRIVER.getPrefix(), Driver.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return classMap;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Prefix[] getAllPrefixes() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Field[] fields \u003d CliSyntax.class.getDeclaredFields();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPrefix\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        for (Field field : fields) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "            int modifier \u003d field.getModifiers();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if ((!Modifier.isFinal(modifier)) || (!Modifier.isStatic(modifier))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (!field.getType().getSimpleName().equals(\"Prefix\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "                result.add((Prefix) field.get(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return result.toArray(new Prefix[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junnbang": 25,
      "tysng": 37,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteIdCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DeleteIdCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new DeleteIdCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DeleteIdCommandParser implements Parser\u003cDeleteIdCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIdCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a DeleteIdCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DeleteIdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if only 1 of the 3 prefix is input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (ParserUtil.getNoOfPrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER) !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Prefix foundPrefix \u003d getPrefixPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int id \u003d ParserUtil.parseId(argMultimap.getValue(foundPrefix).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String className \u003d foundPrefix.getPrefixClass();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new DeleteIdCommand(className, id);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean areOneOfPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static Prefix getPrefixPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cPrefix\u003e prefixFound \u003d Stream"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .of(prefixes)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .findFirst();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (prefixFound.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return prefixFound.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int taskId \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new DoneCommand(taskId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.EditCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Parses input arguments and creates a new EditCustomerCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class EditCustomerCommandParser implements Parser\u003cEditCustomerCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCustomerCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * and returns an EditCustomerCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public EditCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int customerId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            customerId \u003d ParserUtil.parseId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    EditCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editCustomerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editCustomerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException(EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new EditCustomerCommand(customerId, editCustomerDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 79,
      "junnbang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditDriverCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.EditDriverCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.EditDriverCommand.EditDriverDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Parses input arguments and creates a new EditDriverCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class EditDriverCommandParser implements Parser\u003cEditDriverCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDriverCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * and returns an EditDriverCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public EditDriverCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int driverId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverId \u003d ParserUtil.parseId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDriverCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        EditDriverDescriptor editDriverDescriptor \u003d new EditDriverDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editDriverDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editDriverDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editDriverDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            editDriverDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDriverDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!editDriverDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException(EditDriverCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new EditDriverCommand(driverId, editDriverDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 79,
      "junnbang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GOODS, PREFIX_CUSTOMER, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            id \u003d ParserUtil.parseId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Create a temp task to track what fields needs to be edited"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set description into temp task if any"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GOODS).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_GOODS).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set Customer into temp task if any"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setCustomer(ParserUtil.parseId(argMultimap.getValue(PREFIX_CUSTOMER).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set date for delivery into temp task if any"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED + \"\\n\" + EditTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new EditTaskCommand(id, editTaskDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.FindCustomerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class FindCustomerCommandParser implements Parser\u003cFindCustomerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCustomerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * and returns a FindCustomerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public FindCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new FindCustomerCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindDriverCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.commands.FindDriverCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class FindDriverCommandParser implements Parser\u003cFindDriverCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindDriverCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * and returns a FindDriverCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public FindDriverCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDriverCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return new FindDriverCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FreeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class FreeCommandParser implements Parser\u003cFreeCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static ParseException getWrongFormatException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the parsed command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public FreeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // driver and task must both be present"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String task \u003d argMultimap.getValue(PREFIX_TASK).orElseThrow(FreeCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int taskId \u003d ParserUtil.parseId(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new FreeCommand(taskId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.logic.commands.GoCommand.HISTORY_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.logic.commands.GoCommand.HOME_TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.GoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Parses input arguments and creates a new GoCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class GoCommandParser implements Parser\u003cGoCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * and returns a GoCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @return the parsed command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public GoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        String tabName \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (tabName.equals(HOME_TAB)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new GoCommand(HOME_TAB);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } else if (tabName.equals(HISTORY_TAB)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new GoCommand(HISTORY_TAB);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMATTER_FOR_USER_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final int MINUTES_IN_AN_HOUR \u003d 60;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String HHMM_REGEX \u003d \"([0-9]{2}):[0-5][0-9]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            \"Invalid Date format. Date format should be \" + DATE_FORMAT + \". \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    + \"Chosen date should be from today onwards.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"ID should be a integer number and more than 0.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"The format of the number of hours is either a decimal \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"number (e.g. 1.5) or in hh:MM (e.g. 1:30)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if date format is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getDate(trimmedDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code string date} is a valid date according to our date format standard."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            LocalDate tempDateTime \u003d LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static LocalDate getDate(String date) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parse a number in string into an integer."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the string cannot be parse into an integer."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static int parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!isValidId(trimmedId)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Integer.parseInt(trimmedId);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if string can be parse into an integer and must be more than 0."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int tempId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return (Integer.parseInt(id) \u003e 0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String duration} is valid with a start and end time."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static EventTime parseEventTime(String duration) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!duration.matches(EventTime.VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new ParseException(EventTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime candidate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tysng"
        },
        "content": "        //split string into 3 parts to get start time, \"-\" and end time"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cString\u003e times \u003d Stream.of(duration.split(\"-\")).map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tysng"
        },
        "content": "            candidate \u003d EventTime.parse(times.get(0), times.get(1));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (candidate.getStart().compareTo(candidate.getEnd()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tysng"
        },
        "content": "                throw new ParseException(EventTime.MESSAGE_END_BEFORE_START);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (NumberFormatException | DateTimeParseException nfe) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(EventTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return candidate;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Parses a duration in hours, either 1.5 (a decimal), or 1:30 (in hh:MM) format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param input the string to be parsed"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the parsed Duration"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws ParseException when the String doesn\u0027t fit the required format"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Duration parseDuration(String input) throws ParseException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tysng"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tysng"
        },
        "content": "            // either 1.5 or 1:30"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (Pattern.matches(HHMM_REGEX, input)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tysng"
        },
        "content": "                String[] hourMinute \u003d input.split(\":\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tysng"
        },
        "content": "                long hour \u003d Long.parseLong(hourMinute[0]);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tysng"
        },
        "content": "                long minute \u003d Long.parseLong(hourMinute[1]);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tysng"
        },
        "content": "                if ((minute \u003c 0 || hour \u003c 0) || (minute \u003d\u003d 0 \u0026\u0026 hour \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tysng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return Duration.ofMinutes(hour * MINUTES_IN_AN_HOUR + minute);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tysng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tysng"
        },
        "content": "                long minutes \u003d Math.round(Double.parseDouble(input) * MINUTES_IN_AN_HOUR);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tysng"
        },
        "content": "                if (minutes \u003c\u003d 0) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tysng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return Duration.ofMinutes(minutes);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static int getNoOfPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return (int) Stream.of(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 102,
      "tysng": 68,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Get the Class Name that the prefix represents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Class Name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getPrefixClass() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String className \u003d CliSyntax.PREFIX_CLASS_MAP.get(prefix);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (className \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new NoSuchElementException(\"This prefix is not representing any class.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return className;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 15,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReadIdCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.ReadIdCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new ReadIdCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ReadIdCommandParser implements Parser\u003cReadIdCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReadIdCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a ReadIdCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ReadIdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (ParserUtil.getNoOfPrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER) !\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReadIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Prefix foundPrefix \u003d getPrefixPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int id \u003d ParserUtil.parseId(argMultimap.getValue(foundPrefix).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String className \u003d foundPrefix.getPrefixClass();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new ReadIdCommand(className, id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static Prefix getPrefixPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                           Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cPrefix\u003e prefixFound \u003d Stream"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .of(prefixes)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (prefixFound.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReadIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return prefixFound.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SavePdfCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.SavePdfCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new SavePdfCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class SavePdfCommandParser implements Parser\u003cSavePdfCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SavePdfCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a SavePdfCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public SavePdfCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new SavePdfCommand(Optional.empty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Optional\u003cLocalDate\u003e date \u003d Optional.of(ParserUtil.parseDate(args));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new SavePdfCommand(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SavePdfCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static ParseException getWrongFormatException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the parsed command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw getWrongFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String task \u003d argMultimap.getValue(PREFIX_TASK).orElseThrow(SuggestCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int taskId \u003d ParserUtil.parseId(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String duration \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Duration proposed \u003d parseDuration(duration);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new SuggestCommand(taskId, proposed);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCustomerTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.ViewCustomerTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Parses input arguments and creates a new ViewCustomerTaskCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class ViewCustomerTaskCommandParser implements Parser\u003cViewCustomerTaskCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCustomerTaskCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * and returns a ViewCustomerCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ViewCustomerTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            int customerId \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new ViewCustomerTaskCommand((customerId));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    ViewCustomerTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewDriverTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.commands.ViewDriverTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Parses input arguments and creates a new ViewDriverTaskCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class ViewDriverTaskCommandParser implements Parser\u003cViewDriverTaskCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewDriverTaskCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * and returns a ViewDriverCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ViewDriverTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            int driverId \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return new ViewDriverTaskCommand((driverId));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    ViewDriverTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CustomerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages the customer list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class CustomerManager extends EntityManager\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CustomerManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Retrieve customer using its unique customer id."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param customerId customer unique id."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Customer with the specified unique id."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .filter(customer -\u003e customer.getId() \u003d\u003d customerId)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .orElseThrow(PersonNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns an unmodifiable view of the customer list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * This list will not contain any duplicate customers."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @return Customer list without duplicate customers."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getCustomerList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return super.getPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Checks if the customer list has a customer with {@code Customer customer}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param customer customer to be checked"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return super.hasPerson(customer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the customer list has a customer with {@code int customerId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param customerId customer unique id."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(customer -\u003e customer.getId() \u003d\u003d customerId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setCustomer(Customer customerToEdit, Customer editedCustomer) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.setPerson(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager otherObject \u003d (CustomerManager) o;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getCustomerList().equals(otherObject.getCustomerList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 2,
      "junnbang": 52,
      "cheeyou": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Represents a Description of goods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \"Description allows all types of character and should not be over 255 characters in length.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^.{1,255}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Constructs a valid description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param description A valid Goods description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns true if a given string is valid ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description that \u003d (Description) o;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.equals(getValue(), that.getValue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 24,
      "ArgVampir": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DriverManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Manages the customer list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DriverManager extends EntityManager\u003cDriver\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public DriverManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the driver list has a driver with {@code int customerId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverId customer unique id."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(driver -\u003e driver.getId() \u003d\u003d driverId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Retrieve driver using its unique driver id."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverId driver unique id."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Driver with the specified unique id."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Optional\u003cDriver\u003e getOptionalDriver(int driverId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .filter(driver -\u003e driver.getId() \u003d\u003d driverId)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns an unmodifiable view of the driver list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * This list will not contain any duplicate drivers."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @return Driver list without duplicate drivers."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public ObservableList\u003cDriver\u003e getDriverList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return super.getPersonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Driver getDriver(int driverId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .filter(driver -\u003e driver.getId() \u003d\u003d driverId)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .orElseThrow(PersonNotFoundException::new);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Sorts driver list accordingly to the comparator provided."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cDriver\u003e getSortedDriverList(List\u003cDriver\u003e drivers, Comparator\u003cDriver\u003e comparator) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        drivers.sort(comparator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return drivers;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager otherObject \u003d (DriverManager) o;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getDriverList().equals(otherObject.getDriverList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 9,
      "cheeyou": 26,
      "junnbang": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EntityManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.UniqueEntityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "// TODO: edit JavaDoc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class EntityManager\u003cT extends Person\u003e implements ReadOnlyEntityManager\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final UniqueEntityList\u003cT\u003e persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        persons \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EntityManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EntityManager(ReadOnlyEntityManager\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData(ReadOnlyEntityManager\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean hasPerson(T person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void addPerson(T p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void removePerson(T key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ObservableList\u003cT\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (other instanceof EntityManager // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 persons.equals(((EntityManager) other).persons));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 17,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A EventTime contains a start time and an end time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class EventTime implements Comparable\u003cEventTime\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * The first and last 4 digits can be from 0 to 2359, includes optional leading zeros."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * There must be a \"-\" in middle the 2 time formats."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * There must have also a white space in front and behind of the dash."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(0?[0-9]?[0-5]?[0-9]|1[0-9][0-5][0-9]|2[0-3][0-5][0-9])\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\\\s*-\\\\s*\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"(0?[0-9]?[0-5]?[0-9]|1[0-9][0-5][0-9]|2[0-3][0-5][0-9])$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final DateTimeFormatter COMPACT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final DateTimeFormatter DISPLAY_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The proposed time slot needs to have a valid start and end time. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\" + \"Format: \" + TIME_FORMAT + \" - \" + TIME_FORMAT + \". \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: 1130 - 1300.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_END_BEFORE_START \u003d \"The event cannot end before it starts.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final DateTimeFormatter JSON_FORMATTER \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime start;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, Duration duration) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d start.plus(duration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds duration from two text representations of time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * This methods appends zeros to the front of the input, if"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the input is less than 4 digits. For example, \"900\" will be changed into \"0900\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param startTime start time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param endTime   end time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration with the specified start and end time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static EventTime parse(String startTime, String endTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // append front with zero"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String first \u003d String.format(\"%04d\", Integer.parseInt(startTime));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String second \u003d String.format(\"%04d\", Integer.parseInt(endTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new EventTime(LocalTime.parse(first, COMPACT_TIME_FORMAT), LocalTime.parse(second, COMPACT_TIME_FORMAT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Gets EventTime Object representation of duration of delivery task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check using {@code isValidEventTime(String duration) } before parse."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param duration startTime - endTime."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return the duration with the specified start and end time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static EventTime parse(String duration) throws DateTimeParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert isValidEventTime(duration) : \"duration is not following the correct format. Eg. 1230 - 1420.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cString\u003e times \u003d Stream.of(duration.split(\"-\")).map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return parse(times.get(0), times.get(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Convert EventTime Object to user input duration format for json file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Example: 1200 - 1330."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static String getStringFromDuration(EventTime duration) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String startTime \u003d duration.getStart().format(JSON_FORMATTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String endTime \u003d duration.getEnd().format(JSON_FORMATTER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return startTime + \" - \" + endTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String duration} is a valid duration."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidEventTime(String duration) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!duration.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //split string into 3 parts to get start time, \"-\" and end time"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cString\u003e times \u003d Stream.of(duration.split(\"-\")).map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String startTimeStr \u003d times.get(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String endTimeStr \u003d times.get(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "            //checks if it can be parsed into a EventTime"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "            EventTime candidate \u003d parse(startTimeStr, endTimeStr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (candidate.getStart().compareTo(candidate.getEnd()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "            //checks if Start time is before End time"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException | DateTimeParseException nfe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Concatenates two EventTimes. If the two EventTime overlaps, then returns a list of one element, which"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * is the result of the concatenation ; else, return a list of two elements."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param e1 a time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param e2 a time"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return a list of either one or two elements"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static List\u003cEventTime\u003e concat(EventTime e1, EventTime e2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime early \u003d e1.compareTo(e2) \u003e 0 ? e2 : e1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime late \u003d e1.compareTo(e2) \u003e 0 ? e1 : e2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (early.overlaps(late) || early.getEnd().equals(late.getStart())) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return List.of(new EventTime(early.getStart(), late.getEnd()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return List.of(early, late);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Appends a time to a list of EventTime. It will concatenate the incoming event time with an element in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * list if they overlap or connect."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param lst a list of event time"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param e the element"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return a non-connecting, non-overlapping list of EventTime"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static List\u003cEventTime\u003e append(List\u003cEventTime\u003e lst, EventTime e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (lst.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "            lst.add(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return lst;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Collections.sort(lst);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int last \u003d lst.size() - 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime lastEventTime \u003d lst.remove(last);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "        lst.addAll(EventTime.concat(lastEventTime, e));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the two durations overlap."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param other the other duration"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if they overlap"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean overlaps(EventTime other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime early \u003d this.compareTo(other) \u003e 0 ? other : this;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime late \u003d this.compareTo(other) \u003e 0 ? this : other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return early.getEnd().compareTo(late.getStart()) \u003e 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getEnd() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getStart() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Duration.between(this.start, this.end);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Outputs the duration as a string, in HH:mm format."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration in string"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String to24HrString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.toString(), end.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.format(DISPLAY_TIME_FORMAT), end.format(DISPLAY_TIME_FORMAT));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (obj instanceof EventTime // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.start.equals(((EventTime) obj).start)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.end.equals(((EventTime) obj).end)); // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(this.start, this.end);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int compareTo(EventTime o) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return !this.getStart().equals(o.getStart())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ? this.getStart().compareTo(o.getStart())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tysng"
        },
        "content": "                : this.getEnd().compareTo(o.getEnd());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 54,
      "tysng": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Goods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Deals with the description of the product to be delivered."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Goods {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Goods(Description description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return description.getValue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Edits the Name of the goods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param newDescription The new name to be changed into."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void setName(Description newDescription) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return description.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 4,
      "ArgVampir": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.pdfmanager.exceptions.PdfNoTaskToDisplayException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    Predicate\u003cDriver\u003e PREDICATE_SHOW_ALL_DRIVERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * {@code Predicate} that always evaluate to false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_EMPTY_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_EMPTY_CUSTOMERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Predicate\u003cDriver\u003e PREDICATE_SHOW_EMPTY_DRIVERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * {@code Predicate} that filters the task to incomplete status"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_UNASSIGNED \u003d task -\u003e task.getStatus().equals(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * {@code Predicate} that filters the task to on-going status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ASSIGNED \u003d task -\u003e task.getStatus().equals(TaskStatus.ON_GOING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * {@code Predicate} that filters the task to completed status"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_COMPLETED \u003d task -\u003e task.getStatus().equals(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * {@code Predicate} that filters the task to both incomplete and ongoing status"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_PREVIOUS_DAYS \u003d task -\u003e task.getDate().isBefore(GlobalClock.dateToday());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code target} must exist in the address book. The person identity of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // central manager"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void resetCentralManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // task manager"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void deleteTask(Task task);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTask(int taskId);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Task getTask(int taskId);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void setTask(Task taskToEdit, Task editedTask);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    TaskManager getTaskManager();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTaskBelongsToDriver(Driver driver);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTaskBelongsToCustomer(Customer customer);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the filtered unassigned task list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getUnassignedTaskList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the filtered assigned task list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getAssignedTaskList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Return a list of incomplete tasks from the previous days"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    ObservableList\u003cTask\u003e getIncompleteTaskList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the completed assigned task list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getCompletedTaskList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the current completed assigned task list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getCurrentCompletedTaskList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // customer manager"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    CustomerManager getCustomerManager();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    boolean hasCustomer(int customerId);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Customer getCustomer(int customerId);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void viewCustomerTask(int customerId);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void viewDriverTask(int driverId);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void setCustomer(Customer customerToEdit, Customer editedTask);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    void deleteCustomer(Customer customer);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // driver manager"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    DriverManager getDriverManager();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    boolean hasDriver(Driver driver);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasDriver(int driverId);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    Driver getDriver(int driverId);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    void setDriver(Driver driverToEdit, Driver editedTask);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    void updateFilteredDriverList(Predicate\u003cDriver\u003e predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    void addDriver(Driver driver);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    void deleteDriver(Driver driver);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate, FilteredList\u003cTask\u003e list);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void refreshFilteredTaskList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void refreshAllFilteredList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the filter of the completed filtered task list to filter by the given"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void updateCompletedTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the filtered customer list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void refreshFilteredCustomerList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the filtered driver list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    ObservableList\u003cDriver\u003e getFilteredDriverList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void refreshFilteredDriverList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    int getNextTaskId();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    int getNextCustomerId();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    int getNextDriverId();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    IdManager getIdManager();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean isStartAfresh();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveDriverTaskPdf(String filePathForPdf, LocalDate date) throws IOException, PdfNoTaskToDisplayException;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 28,
      "junnbang": 70,
      "cheeyou": 9,
      "ArgVampir": 77,
      "tysng": 27,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_ASSIGNED_TASK_FOR_THE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.pdfmanager.PdfCreator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.pdfmanager.exceptions.PdfNoTaskToDisplayException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final FilteredList\u003cTask\u003e unassignedTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final FilteredList\u003cTask\u003e completedTasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final FilteredList\u003cDriver\u003e filteredDrivers;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final CustomerManager customerManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final DriverManager driverManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final IdManager idManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d new IdManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerManager.getCustomerList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredDrivers \u003d new FilteredList\u003c\u003e(this.driverManager.getDriverList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ModelManager(CentralManager centralManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(centralManager, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        logger.fine(\"Initializing with central manager: \" + centralManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //temp"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //to pass addressbook test case"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(addressBook.getPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager \u003d centralManager.getCustomerManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager \u003d centralManager.getDriverManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager \u003d centralManager.getTaskManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d centralManager.getIdManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(customerManager.getCustomerList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        filteredDrivers \u003d new FilteredList\u003c\u003e(driverManager.getDriverList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(taskManager.getList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTasks \u003d new FilteredList\u003c\u003e(taskManager.getList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTasks \u003d new FilteredList\u003c\u003e(taskManager.getList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CentralManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Resets the {@link CentralManager} to a empty state. All data will be removed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void resetCentralManager() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager.setPersons(new CustomerManager().getPersonList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager.setPersons(new DriverManager().getPersonList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager.resetIdManager();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds task into task list. Records the last unique task id created in {@link IdManager}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        idManager.lastTaskIdPlusOne();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.deleteTask(task);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.hasTask(task);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.hasTask(taskId);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.getTask(taskId);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if driver is allocated to any task."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTaskBelongsToDriver(Driver driver) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.getList()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(task -\u003e {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    if (task.getDriver().isEmpty()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    return task.getDriver().get().equals(driver);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if customer is allocated to any task."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTaskBelongsToCustomer(Customer customer) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.getList()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(task -\u003e task.getCustomer().equals(customer));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CustomerManager getCustomerManager() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return customerManager.hasPerson(customer);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager.hasCustomer(customerId);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setCustomer(Customer customerToEdit, Customer editedCustomer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        customerManager.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager.getCustomer(customerId);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds Customer into customer list. Records the last unique customer id created in {@link IdManager}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        customerManager.addPerson(customer);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        idManager.lastCustomerIdPlusOne();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void deleteCustomer(Customer customer) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        customerManager.removePerson(customer);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Driver Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DriverManager getDriverManager() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public boolean hasDriver(Driver driver) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return driverManager.hasPerson(driver);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager.hasDriver(driverId);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setDriver(Driver driverToEdit, Driver editedDriver) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tysng"
        },
        "content": "        driverManager.setPerson(driverToEdit, editedDriver);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Driver getDriver(int driverId) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager.getDriver(driverId);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds Driver into driver list. Records the last unique driver id created in {@link IdManager}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void addDriver(Driver driver) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tysng"
        },
        "content": "        driverManager.addPerson(driver);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        idManager.lastDriverIdPlusOne();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void deleteDriver(Driver driver) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tysng"
        },
        "content": "        driverManager.removePerson(driver);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IdManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextTaskId() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager.getNextTaskId();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextCustomerId() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager.getNextCustomerId();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextDriverId() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager.getNextDriverId();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public IdManager getIdManager() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isStartAfresh() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager.isStartAfresh();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PdfCreator \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Saves drivers\u0027 tasks for a specified date in PDF format."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath directory to save the PDF file."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateOfDelivery date of delivery."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if directory is not found."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws PdfNoTaskToDisplayException if there is no assigned task on the day."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveDriverTaskPdf(String filePath, LocalDate dateOfDelivery)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throws IOException, PdfNoTaskToDisplayException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(filePath, dateOfDelivery);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cTask\u003e assignedTaskOnDateList \u003d getOnlyAssignedTaskOnDate(taskManager.getList(), dateOfDelivery);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cTask\u003e sortedByEventTimeTasks \u003d getSortedByEventTimeTasks(assignedTaskOnDateList);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (assignedTaskOnDateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new PdfNoTaskToDisplayException(String.format(MESSAGE_NO_ASSIGNED_TASK_FOR_THE_DATE, dateOfDelivery));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cDriver\u003e drivers \u003d getDriversFromTasks(assignedTaskOnDateList);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cDriver\u003e sortedByNameDrivers \u003d getSortedByNameDrivers(drivers);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfCreator pdfCreator \u003d new PdfCreator(filePath);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        pdfCreator.saveDriverTaskPdf(sortedByEventTimeTasks, sortedByNameDrivers, dateOfDelivery);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getOnlyAssignedTaskOnDate(List\u003cTask\u003e tasks, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Predicate\u003cTask\u003e assignedTaskOnDatePredicate \u003d task -\u003e task.getDate().equals(dateOfDelivery)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 !task.getStatus().equals(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cTask\u003e assignedTaskOnDateList \u003d TaskManager.getFilteredList(tasks, assignedTaskOnDatePredicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return assignedTaskOnDateList;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getSortedByEventTimeTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Comparator\u003cTask\u003e ascendingEventTimeComparator \u003d Comparator.comparing(t -\u003e {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //uses filtered assigned tasks, so eventTime must be present"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assert t.getEventTime().isPresent();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return t.getEventTime().get();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cTask\u003e sortedList \u003d TaskManager.getSortedList(tasks, ascendingEventTimeComparator);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cDriver\u003e getDriversFromTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return TaskManager.getDriversFromTasks(tasks);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cDriver\u003e getSortedByNameDrivers(List\u003cDriver\u003e drivers) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Comparator\u003cDriver\u003e sortByNameComparator \u003d Comparator.comparing(driver -\u003e driver.getName().toString());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cDriver\u003e sortedByNameDrivers \u003d DriverManager.getSortedDriverList(drivers, sortByNameComparator);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sortedByNameDrivers;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * internal list of {@code versionedAddressBook}."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager.equals(other.getCustomerManager())"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 driverManager.equals(other.getDriverManager())"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 taskManager.equals(other.getTaskManager())"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * internal list of {@code versionedAddressBook}."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the observable view of the filtered task list to the predicate."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate, FilteredList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        list.setPredicate(predicate);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an observable view of the list of that is filtered to unassigned tasks."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getUnassignedTaskList() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_UNASSIGNED, unassignedTasks);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return unassignedTasks;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an observable view of the list of that is filtered to assigned tasks."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ASSIGNED, filteredTasks);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an observable view of the list of that is filtered to completed tasks."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getCompletedTaskList() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_COMPLETED, completedTasks);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return completedTasks;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an observable view of the current completed task list."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentCompletedTaskList() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return completedTasks;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the observable view of the completed tasks to the predicate."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void updateCompletedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the observable view of the completed tasks according to the specified customer ID only."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param customerId customer ID."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void viewCustomerTask(int customerId) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateCompletedTaskList(task -\u003e task.getCustomer().getId() \u003d\u003d customerId"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                                \u0026\u0026 task.getStatus().equals(TaskStatus.COMPLETED));"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Updates the observable view of the completed tasks according to the specified driver ID only."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param driverId customer ID."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void viewDriverTask(int driverId) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateCompletedTaskList(task -\u003etask.getStatus().equals(TaskStatus.COMPLETED)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u0026\u0026 task.getDriver().get().getId() \u003d\u003d driverId);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Returns a observable view of the list of incomplete tasks from the previous days"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public ObservableList\u003cTask\u003e getIncompleteTaskList() {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        FilteredList\u003cTask\u003e incompleteTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getList());"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ASSIGNED.and(PREDICATE_SHOW_PREVIOUS_DAYS), incompleteTasks);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return incompleteTasks;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Refreshes the display of task list."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void refreshFilteredTaskList() {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //refresh assigned task list"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_EMPTY_TASKS, filteredTasks);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        getAssignedTaskList();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //refresh unassigned task list"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_EMPTY_TASKS, unassignedTasks);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        getUnassignedTaskList();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        updateCompletedTaskList(PREDICATE_SHOW_EMPTY_TASKS);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        getCompletedTaskList();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Refreshes unassigned task list, assigned task list, customer list and driver list."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void refreshAllFilteredList() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        refreshFilteredCustomerList();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        refreshFilteredDriverList();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        refreshFilteredTaskList();"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * internal list of {@code versionedAddressBook}."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Driver List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Refreshes the display of customer list."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void refreshFilteredCustomerList() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_EMPTY_CUSTOMERS);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Driver List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public ObservableList\u003cDriver\u003e getFilteredDriverList() {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return filteredDrivers;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void updateFilteredDriverList(Predicate\u003cDriver\u003e predicate) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        filteredDrivers.setPredicate(predicate);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Refreshes the display of driver list."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void refreshFilteredDriverList() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredDriverList(PREDICATE_SHOW_EMPTY_DRIVERS);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        updateFilteredDriverList(PREDICATE_SHOW_ALL_DRIVERS);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 31,
      "junnbang": 276,
      "cheeyou": 9,
      "ArgVampir": 130,
      "tysng": 17,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEntityManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "public interface ReadOnlyEntityManager\u003cT extends Person\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ObservableList\u003cT\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"deliveria.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/id/IdManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.id;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Keeps a record of the last unique id used by {@link Task}, {@link Customer} and {@link Driver}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class IdManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //all unique ids start with 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int lastTaskId \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int lastCustomerId \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int lastDriverId \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public IdManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public IdManager(int lastTaskId, int lastCustomerId, int lastDriverId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastTaskId \u003d lastTaskId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastCustomerId \u003d lastCustomerId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastDriverId \u003d lastDriverId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // getters for storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getLastTaskId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastTaskId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getLastCustomerId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastCustomerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getLastDriverId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastDriverId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextTaskId() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastTaskId + 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextCustomerId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastCustomerId + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getNextDriverId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastDriverId + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setLastTaskId(int lastId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastTaskId \u003d lastId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setLastCustomerId(int lastId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastCustomerId \u003d lastId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setLastDriverId(int lastId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastDriverId \u003d lastId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void lastTaskIdPlusOne() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastTaskId++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void lastCustomerIdPlusOne() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastCustomerId++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void lastDriverIdPlusOne() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastDriverId++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isStartAfresh() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getLastTaskId() \u003d\u003d 0 \u0026\u0026 getLastCustomerId() \u003d\u003d 0 \u0026\u0026 getLastDriverId() \u003d\u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Resets all the last id counters for all managers to zero."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void resetIdManager() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setLastTaskId(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setLastDriverId(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setLastCustomerId(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if unique id is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Unique id has to be more than or equal to zero."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int tempInt \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return (tempInt \u003e\u003d 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        IdManager that \u003d (IdManager) o;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getLastTaskId() \u003d\u003d that.getLastTaskId()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 getLastCustomerId() \u003d\u003d that.getLastCustomerId()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 getLastDriverId() \u003d\u003d that.getLastDriverId();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code EntityManager} instead"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 1,
      "junnbang": 1,
      "tysng": 4,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code ReadOnlyEntityManager} instead"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code UniqueEntityList} instead"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 6,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfCoverPageLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.ColorConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents the cover page in the PDF document."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfCoverPageLayout {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Document document;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfCoverPageLayout(Document document) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds a cover page to the PDF document."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param title title."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param subTitle secondary title."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addCoverPage(String title, String subTitle) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph titleParagraph \u003d createTitle(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph subTitleParagraph \u003d createSubTitle(subTitle);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(PdfLayout.alignParagraphMiddle(titleParagraph));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(PdfLayout.alignParagraphMiddle(subTitleParagraph));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table sampleTable \u003d createSampleTable();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(sampleTable);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a {@code Paragraph} object that consists of the title."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * The main title is being position in the center of the page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param title secondary title."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Paragraph createTitle(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Text titleText \u003d new Text(title);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        titleText.setFontColor(ColorConstants.RED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        titleText.setFontSize(48);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        titleText.setBold();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph titleParagraph \u003d new Paragraph(titleText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        titleParagraph.setFixedPosition(60, 550, 500);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return titleParagraph;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a {@code Paragraph} object that consists of the secondary title."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * The secondary title is being position in the center of the page, below the main title."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param subTitle secondary title."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Paragraph createSubTitle(String subTitle) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Text subTitleText \u003d new Text(subTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        subTitleText.setFontColor(ColorConstants.BLUE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        subTitleText.setItalic();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph subTitleParagraph \u003d new Paragraph(subTitleText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        subTitleParagraph.setFixedPosition(60, 530, 500);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return subTitleParagraph;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a table used to display a sample layout of the task information."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table createSampleTable() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfSampleLayout sampleLayout \u003d new PdfSampleLayout();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table sampleTable \u003d sampleLayout.createTable();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTable.setFixedPosition(60, 200, sampleTable.getWidth());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sampleTable;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfCreator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Creates and saves details provided into a PDF file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfCreator {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfCreator(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Saves drivers` tasks for a specific date into a PDF file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks tasks list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateOfDelivery date of delivery."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if directory used for saving is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveDriverTaskPdf(List\u003cTask\u003e tasks, List\u003cDriver\u003e drivers, LocalDate dateOfDelivery)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Document document \u003d createDocument();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        insertCoverPage(document, dateOfDelivery);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        insertDriverTask(document, tasks, drivers, dateOfDelivery);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //close to save"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void createFileIfMissing() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        FileUtil.createIfMissing(Paths.get(filePath));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a PDF document."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return PDF document ready to be filled with content."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if file path is not created or found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Document createDocument() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        createFileIfMissing();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfDocument pdf \u003d new PdfDocument(new PdfWriter(filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Document newDocument \u003d new Document(pdf);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newDocument.setMargins(30, 30, 30, 30);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return newDocument;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Inserts cover page into the PDF document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param document PDF document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateOfDelivery date of delivery."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void insertCoverPage(Document document, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add cover page"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String title \u003d \"Deliveria\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String subTitle \u003d \"Delivery Tasks for \" + dateOfDelivery;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfCoverPageLayout coverPageLayout \u003d new PdfCoverPageLayout(document);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        coverPageLayout.addCoverPage(title, subTitle);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void insertDriverTask(Document document, List\u003cTask\u003e tasks, List\u003cDriver\u003e drivers, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfWrapperLayout wrapperLayout \u003d new PdfWrapperLayout(document);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        wrapperLayout.populateDocumentWithTasks(tasks, drivers, dateOfDelivery);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfCustomerLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a customer\u0027s information in a table format in the PDF document."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfCustomerLayout {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfCustomerLayout(Customer customer) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a table to encapsulate the customer\u0027 information of each task in the PDF document."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table createTable() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //setting the basic layout"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table customerTable \u003d new Table(10).useAllAvailableWidth().setFixedLayout();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //populate the table"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell customerIdCell \u003d getCustomerIdCell(customer.getId());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell nameCell \u003d getNameCell(customer.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell phoneNumberCell \u003d getPhoneNumberCell(customer.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell addressCell \u003d getAddressCell(customer.getAddress());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerTable.addCell(customerIdCell);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerTable.addCell(nameCell);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerTable.addCell(phoneNumberCell);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerTable.addCell(addressCell);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table designedCustomerTable \u003d designTable(customerTable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return designedCustomerTable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getCustomerIdCell(int customerId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String idStr \u003d \"Customer ID \\n\" + customerId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 2, idStr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getNameCell(Name name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String nameStr \u003d \"Customer\\n\" + name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 6, nameStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getPhoneNumberCell(Phone phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String phoneNumberStr \u003d \"Contact No \\n\" + phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 3, phoneNumberStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getAddressCell(Address address) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String addressStr \u003d \"Address: \" + address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 10, addressStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Table designTable(Table customerTable) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerTable;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfDriverLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a driver\u0027s information in a table format in the PDF document."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfDriverLayout {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Driver driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Document document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private LocalDate dateOfDelivery;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfDriverLayout(Document document, Driver driver, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driver \u003d driver;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.dateOfDelivery \u003d dateOfDelivery;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a paragraph that consists of the driver\u0027s information in the PDF document."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void createDriverDetails() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //populate Paragraph"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph dateParagraph \u003d getDateOfDelivery(dateOfDelivery);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph driverIdParagraph \u003d getDriverIdCell(driver.getId());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph nameParagraph \u003d getNameCell(driver.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph phoneNumberParagraph \u003d getPhoneNumberCell(driver.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(dateParagraph);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(driverIdParagraph);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(nameParagraph);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(phoneNumberParagraph);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph getDriverIdCell(int id) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String idStr \u003d \"Driver ID: \" + id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createParagraph(idStr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph getNameCell(Name name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String nameStr \u003d \"Driver: \" + name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createParagraph(nameStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph getPhoneNumberCell(Phone phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String phoneStr \u003d \"Contact No: \" + phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createParagraph(phoneStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph getDateOfDelivery(LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String dateOfDelivery \u003d \"Date of Delivery: \" + date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createParagraph(dateOfDelivery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.property.HorizontalAlignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.property.TextAlignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.property.VerticalAlignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Consists of functions to aid creation and formatting of the content in a layout."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfLayout {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a {@code Cell} object with the message and the measurement specified."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param rowSpan row height."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param colSpan column length."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param message message to be displayed in the cell."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return populated cell with the message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Cell createCell(int rowSpan, int colSpan, String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell newCell \u003d new Cell(rowSpan, colSpan).add(new Paragraph(message));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell designedCell \u003d alignCellMiddle(newCell);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return designedCell;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a {@code Paragraph} object using the string specified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param str words to be insert."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Paragraph createParagraph(String str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph paragraph \u003d new Paragraph(str);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return paragraph;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adjusts the position of the words to the center."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param paragraph a block of words."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Paragraph alignParagraphMiddle(Paragraph paragraph) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        paragraph.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        paragraph.setVerticalAlignment(VerticalAlignment.MIDDLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        paragraph.setHorizontalAlignment(HorizontalAlignment.CENTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return paragraph;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adjusts the content in the cell to the center."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param cell Cell of a table in the PDF document."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Cell alignCellMiddle(Cell cell) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setHorizontalAlignment(HorizontalAlignment.CENTER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setVerticalAlignment(VerticalAlignment.MIDDLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setMargin(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setPadding(5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return cell;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Sets the font in the cell to bold."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param cell Cell of a table in the PDF document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Cell boldCell(Cell cell) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setBold();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return cell;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Inserts padding into the cell."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param cell Cell of a table in the PDF document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Cell insertPadding(Cell cell) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        cell.setPadding(20);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return cell;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfPageHeaderLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.ColorConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents the page header details in the PDF document."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfPageHeaderLayout {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Document document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfPageHeaderLayout(Document document) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a page header for each page in the PDF document."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void createPageHeader() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Paragraph headerParagraph \u003d getPageHeader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        document.add(designParagraph(headerParagraph));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph getPageHeader() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createParagraph(\"Deliveria\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds design to {@code Paragraph} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Paragraph designParagraph(Paragraph paragraph) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        paragraph.setFontSize(36);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        paragraph.setFontColor(ColorConstants.RED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return paragraph;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfSampleLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a sample layout to show how the information in the PDF document is represented."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfSampleLayout {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfSampleLayout() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a table to show a sample layout of the tasks displayed in the PDF document."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table createTable() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table sampleTable \u003d new Table(10).useAllAvailableWidth().setFixedLayout();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell titleCell \u003d PdfLayout.createCell(1, 10, \"SAMPLE DRIVER\u0027S TASK.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        titleCell.setBold();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell eventTimeCell \u003d PdfLayout.createCell(2, 2, \"Duration of Delivery\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell taskDetailCell \u003d PdfLayout.createCell(1, 8, \"Task\u0027s Information\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell customerDetailCell \u003d PdfLayout.createCell(1, 8, \"Customer\u0027s Information\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTable.addCell(titleCell);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTable.addCell(PdfLayout.insertPadding(eventTimeCell));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTable.addCell(PdfLayout.insertPadding(taskDetailCell));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTable.addCell(PdfLayout.insertPadding(customerDetailCell));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sampleTable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfTableHeaderLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.ColorConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a table header\u0027s details in a table format in the PDF document."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfTableHeaderLayout {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfTableHeaderLayout() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a table to encapsulate the table header\u0027s details in the PDF document."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table createTable() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table headerTable \u003d new Table(10).useAllAvailableWidth().setFixedLayout();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell eventTimeTitle \u003d getEventTimeTitle();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell taskTitle \u003d getTaskTitle();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        headerTable.addCell(PdfLayout.boldCell(eventTimeTitle));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        headerTable.addCell(PdfLayout.boldCell(taskTitle));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return designTable(headerTable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getEventTimeTitle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 2, \"Duration\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Cell getTaskTitle() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 8, \"Task\u0027s Details\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Table designTable(Table headerTable) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        headerTable.setFontColor(ColorConstants.BLACK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return headerTable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfTaskLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.ColorConstants;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.kernel.colors.DeviceRgb;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a task\u0027s information in a table format in the PDF document."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfTaskLayout {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean toggleColor \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfTaskLayout(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a table to encapsulate the tasks\u0027 information in the PDF document."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table createTable() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //setting basic layout"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table taskTable \u003d new Table(10).useAllAvailableWidth().setFixedLayout();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //populate cells"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell taskIdCell \u003d getTaskIdCell(task.getId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell descriptionCell \u003d getDescriptionCell(task.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell statusCell \u003d getStatusCell(task.getStatus());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e optionalEventTime \u003d task.getEventTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert optionalEventTime.isPresent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell eventTimeCell \u003d getEventTimeCell(optionalEventTime.get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskTable.addCell(PdfLayout.alignCellMiddle(eventTimeCell));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskTable.addCell(PdfLayout.alignCellMiddle(taskIdCell));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskTable.addCell(descriptionCell);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskTable.addCell(statusCell);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //create customer table"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        PdfCustomerLayout customerLayout \u003d new PdfCustomerLayout(task.getCustomer());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table customerTable \u003d customerLayout.createTable();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add customer table into task table"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Cell customerTableCell \u003d new Cell(1, 8).add(customerTable);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskTable.addCell(customerTableCell);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Table designedTable \u003d designTable(taskTable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return designedTable;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Cell getTaskIdCell(int taskId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String idStr \u003d \"Task ID\\n\" + taskId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 1, idStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Cell getDescriptionCell(Description description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String descriptionStr \u003d \"Goods\\n\" + description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 5, descriptionStr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Cell getStatusCell(TaskStatus status) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String statusStr \u003d \"Status\\n\" + status;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(1, 2, statusStr)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .setFontColor((status.equals(TaskStatus.ON_GOING)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                        ? ColorConstants.RED"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                        : ColorConstants.GREEN));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Cell getEventTimeCell(EventTime eventTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String eventTimeStr \u003d eventTime.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return PdfLayout.createCell(2, 2, eventTimeStr);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Alternates the color of the rows in the table."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Table designTable(Table taskTable) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (toggleColor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskTable.setBackgroundColor(ColorConstants.WHITE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Color lightGrey \u003d new DeviceRgb(240, 240, 240);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskTable.setBackgroundColor(lightGrey);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        toggleColor \u003d !toggleColor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskTable;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/PdfWrapperLayout.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.AreaBreak;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.itextpdf.layout.property.AreaBreakType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A outer layout that encapsulates all the layouts used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfWrapperLayout {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Document document;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfWrapperLayout(Document document) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Inserts the summary of each driver\u0027s tasks into the PDF document."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateOfDelivery date of delivery."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void populateDocumentWithTasks(List\u003cTask\u003e tasks, List\u003cDriver\u003e drivers, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //initialise outerlayout"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        insertDriverTasksIntoDocument(drivers, tasks, dateOfDelivery);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds all the delivery tasks that were assigned to each drivers into the PDF document."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverList drivers that were available on the day."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskList tasks that were assigned to the drivers on the day."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateOfDelivery date of delivery."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void insertDriverTasksIntoDocument(List\u003cDriver\u003e driverList, List\u003cTask\u003e taskList, LocalDate dateOfDelivery) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (Driver driver : driverList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //line break"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            document.add(new AreaBreak(AreaBreakType.NEXT_PAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //create page header layout"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            PdfPageHeaderLayout pageHeaderLayout \u003d new PdfPageHeaderLayout(document);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            pageHeaderLayout.createPageHeader();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //create driver layout which contains his tasks for the day."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            PdfDriverLayout driverLayout \u003d new PdfDriverLayout(document, driver, dateOfDelivery);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverLayout.createDriverDetails();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //create Table header layout"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            PdfTableHeaderLayout tableHeaderLayout \u003d new PdfTableHeaderLayout();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Table headerTable \u003d tableHeaderLayout.createTable();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            document.add(headerTable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //loop through the task list and append this driver\u0027s tasks into the layout"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                addTaskUnderDriver(driver, task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Appends delivery tasks under the driver layout if the tasks belong to him."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driver driver on duty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param task task to be append if task belongs to driver."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void addTaskUnderDriver(Driver driver, Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //since the task list is filtered to only have assigned tasks, then driver WILL NOT be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert task.getDriver().isPresent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Driver driverAssigned \u003d task.getDriver().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverAssigned.equals(driver)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            PdfTaskLayout taskLayout \u003d new PdfTaskLayout(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Table taskTable \u003d taskLayout.createTable();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //ensure no splitting tables"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskTable.setKeepTogether(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            document.add(taskTable);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdfmanager/exceptions/PdfNoTaskToDisplayException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.pdfmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error that relates to a PDF creation and saving."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class PdfNoTaskToDisplayException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public PdfNoTaskToDisplayException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class Customer extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid customer ID.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Customer(int id, Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns true if both customers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * This defines a weaker notion of equality between two customers."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean isSameCustomer(Customer otherCustomer) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 (otherCustomer.getPhone().equals(getPhone()) || otherCustomer.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherCustomer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Checks if {@code String id} can be parse into an integer and must be more than 0."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param id a unique number in string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            int tempInt \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return (tempInt \u003e 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Returns a string representation of the customer, with identity fields visible to the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @return string representation of customer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        StringBuilder customerBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        customerBuilder.append(\" Customer stats: \\n\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .append(\" id: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                .append(super.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return customerBuilder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 59,
      "junnbang": 2,
      "cheeyou": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Driver.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Represents a Driver available for work."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Gurantees: details are present and not null, field values are validated, id is immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class Driver extends Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid driver ID.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NOT_AVAILABLE \u003d \"Driver(ID: %1$s) is not available\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Driver(int id, Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@see Schedule#remove}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean deleteFromSchedule(EventTime durationToRemove) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule.remove(durationToRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addToSchedule(EventTime durationToAdd) throws SchedulingException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        schedule.add(durationToAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isScheduleAvailable(EventTime durationToAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return schedule.isAvailable(durationToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingSuggestion suggestTime(EventTime eventTime, LocalTime timeNow) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule.getSchedulingSuggestion(eventTime, timeNow);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cEventTime\u003e suggestTime(Duration duration, LocalTime timeNow) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule.findFirstAvailableSlot(timeNow, duration);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void assign(EventTime eventTime) throws SchedulingException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.schedule.add(eventTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns true if both drivers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * This defines a weaker notion of equality between two drivers."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean isSameDriver(Driver otherDriver) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (otherDriver \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return otherDriver !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherDriver.getName().equals(getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 (otherDriver.getPhone().equals(getPhone()) || otherDriver.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        if (!(other instanceof Driver)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        Driver otherDriver \u003d (Driver) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return otherDriver.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherDriver.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherDriver.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherDriver.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherDriver.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 otherDriver.getSchedule().equals(getSchedule())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                \u0026\u0026 otherDriver.getTags().equals(getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns a string representation of the driver, with identity fields visible to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @return string representation of driver"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        StringBuilder driverBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        driverBuilder.append(\" Driver stats: \\n\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(\" id: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(super.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return driverBuilder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 8,
      "cheeyou": 74,
      "junnbang": 15,
      "tysng": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.NavigableSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Manages the availability of the owner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE \u003d \"On standby\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EARLIER_AVAILABLE \u003d \"An earlier time slot is available. \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_SUGGEST_TIME_FORMAT \u003d \"Suggested Time: %s \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_CONFLICT \u003d \"The duration conflicts with the existing schedule. \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EVENT_START_BEFORE_NOW_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "            \"The event cannot happen in the past. The time now is %s. \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String START_WORK_TIME \u003d \"0900\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String END_WORK_TIME \u003d \"2100\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static EventTime workingHours \u003d EventTime.parse(START_WORK_TIME, END_WORK_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_OUTSIDE_WORKING_HOURS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "            String.format(\"The person does not work during the specified time. Working Hours: %s\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    workingHours.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private NavigableSet\u003cEventTime\u003e schedule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Constructs a schedule within the working hours."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.schedule \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime beforeWorkingHours \u003d EventTime.parse(\"0000\", START_WORK_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime afterWorkingHours \u003d EventTime.parse(END_WORK_TIME, \"2359\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(beforeWorkingHours);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(afterWorkingHours);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingSuggestion getSchedulingSuggestion(EventTime eventTime, LocalTime timeNow) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional\u003cEventTime\u003e suggestedEventTime \u003d findFirstAvailableSlot(timeNow, eventTime.getDuration());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isOutsideWorkingHours(eventTime)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new SchedulingSuggestion(MESSAGE_OUTSIDE_WORKING_HOURS, suggestedEventTime, eventTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isAvailable(eventTime)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new SchedulingSuggestion(MESSAGE_SCHEDULE_CONFLICT, suggestedEventTime, eventTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new SchedulingSuggestion(\"\", suggestedEventTime, eventTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Blocks off the owner\u0027s schedule with the given duration. This action doesn\u0027t check the current time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime incoming task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void add(EventTime eventTime) throws SchedulingException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isOutsideWorkingHours(eventTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_OUTSIDE_WORKING_HOURS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isAvailable(eventTime)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_SCHEDULE_CONFLICT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!schedule.add(eventTime)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "            // this operation should always succeed, and this line shouldn\u0027t be called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(\"An unknown error has occurred. The schedule is unable\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    + \" to add the EventTime\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the earliest available EventTime has the length of proposed, and fits in the schedule."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * This method will check against the input current time."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param timeNow  time now"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param proposed a proposed duration"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return Optional of the earliest EventTime that can fit in the schedule; if the proposed time is already the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * earliest, return an Optional of the proposed time; if no slot available, return an empty Optional."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cEventTime\u003e findFirstAvailableSlot(LocalTime timeNow, Duration proposed) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // get a view of the schedule, from system time to the last EventTime in the schedule"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime lastCandidate \u003d schedule.last();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // HACK: using a zero minute event time to get the tailset"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime now \u003d new EventTime(timeNow, timeNow);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime firstCandidate \u003d schedule.lower(now);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // this should always be non null, since an event starting at midnight will always be the smallest"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assert firstCandidate !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!firstCandidate.overlaps(now)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "            schedule.add(now);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "            firstCandidate \u003d now;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "        NavigableSet\u003cEventTime\u003e candidates \u003d schedule.subSet(firstCandidate, true, lastCandidate, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Iterator\u003cEventTime\u003e iter \u003d candidates.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime prev \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (iter.hasNext()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d iter.next();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "            EventTime head \u003d iter.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "            boolean canFit \u003d Duration.between(prev.getEnd(), head.getStart()).compareTo(proposed) \u003e\u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (canFit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "                schedule.remove(now); // it\u0027s okay if now doesn\u0027t exist in the set"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return Optional.of(new EventTime(prev.getEnd(), proposed));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d head;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.remove(now); // it\u0027s okay if now doesn\u0027t exist in the set"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Removes the scheduled event."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime an existing event in the owner\u0027s schedule"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true when the event exists in the schedule, and removed successfully"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean remove(EventTime eventTime) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule.remove(eventTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isOutsideWorkingHours(EventTime eventTime) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return (eventTime.getEnd().compareTo(eventTime.getStart()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (eventTime.getStart().compareTo(workingHours.getStart()) \u003c 0)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (eventTime.getEnd().compareTo(workingHours.getEnd()) \u003e 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the incoming duration clashes with the existing schedule."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime task duration"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if the duration clashes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isAvailable(EventTime eventTime) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime previous \u003d schedule.floor(eventTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime next \u003d schedule.ceiling(eventTime);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((previous !\u003d null) \u0026\u0026 (eventTime.overlaps(previous))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((next !\u003d null) \u0026\u0026 (eventTime.overlaps(next))) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .subSet(EventTime.parse(\"0000\", START_WORK_TIME), false,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "                        EventTime.parse(END_WORK_TIME, \"2359\"), false).stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .collect(ArrayList::new, EventTime::append, ArrayList::addAll).stream()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(EventTime::to24HrString)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .reduce((str1, str2) -\u003e str1 + \", \" + str2)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElse(MESSAGE_EMPTY_SCHEDULE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule1 \u003d (Schedule) o;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule.equals(schedule1.schedule);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(schedule);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junnbang": 1,
      "cheeyou": 1,
      "tysng": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SchedulingSuggestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.MESSAGE_PROMPT_FORCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.model.person.Schedule.MESSAGE_EARLIER_AVAILABLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.model.person.Schedule.MESSAGE_SUGGEST_TIME_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A wrapper around the suggestion returned by Schedule. It has a convenient {@code toString} method for printing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SchedulingSuggestion {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Optional\u003cEventTime\u003e suggestedTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingSuggestion(String errorMessage, Optional\u003cEventTime\u003e suggestedTime, EventTime requestedTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (suggestedTime.isPresent() \u0026\u0026 suggestedTime.get().equals(requestedTime)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "            // requested time is the same as the suggested time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "            // no better time slot exists"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "            this.suggestedTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "            this.suggestedTime \u003d suggestedTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingSuggestion(String errorMessage, Optional\u003cEventTime\u003e suggestedTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.suggestedTime \u003d suggestedTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean isFatal() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return !errorMessage.isEmpty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return suggestedTime.isEmpty() \u0026\u0026 errorMessage.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cEventTime\u003e getSuggestedTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return suggestedTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isFatal()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return errorMessage + getSuggestedTime()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    .map(x -\u003e \"\\n\" + String.format(MESSAGE_SUGGEST_TIME_FORMAT, x.toString()))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "                    .orElse(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } else if (suggestedTime.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return MESSAGE_EARLIER_AVAILABLE + suggestedTime.get() + \"\\n\" + MESSAGE_PROMPT_FORCE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return \"\"; // no suggestion, command is good"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class UniqueEntityList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(UniqueEntityList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (other instanceof UniqueEntityList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntityList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean personsAreUnique(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 15,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/SchedulingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Signals that the incoming duration will result in a scheduling conflict (i.e. outside working hours, or conflict"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": " * with existing schedule)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SchedulingException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingException(String e) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.exceptions.TaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a delivery task. All the tasks are represented by a unique id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * for differentiation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid task ID.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_TASK_IS_ALREADY_COMPLETED \u003d \"Task\u0027s status is already set to %1$s.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_FOR_PRINT \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER_FOR_USER_INPUT \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cDriver\u003e driver;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cEventTime\u003e eventTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskStatus status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task(int id, Description description, LocalDate date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        status \u003d TaskStatus.INCOMPLETE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driver \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        eventTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //get methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskStatus getStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDatePrint() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return date.format(DATE_FORMAT_FOR_PRINT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cDriver\u003e getDriver() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driver;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cEventTime\u003e getEventTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static LocalDate getDateFromString(String date) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static LocalDate getParsedLocalDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return LocalDate.parse(localDate.format(DATE_FORMATTER_FOR_USER_INPUT), DATE_FORMAT_FOR_PRINT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isAssigned() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driver.isPresent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isDurationAssigned() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return eventTime.isPresent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //set methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setStatus(TaskStatus status) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this.status \u003d\u003d status) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskException(String.format(MESSAGE_TASK_IS_ALREADY_COMPLETED, status));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDescription(Description description) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDriver(Optional\u003cDriver\u003e driver) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driver.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setStatus(TaskStatus.ON_GOING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driver.isEmpty() \u0026\u0026 getStatus().equals(TaskStatus.ON_GOING)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setStatus(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driver \u003d driver;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setEventTime(Optional\u003cEventTime\u003e eventTime) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDriverAndEventTime(Optional\u003cDriver\u003e optionalDriver, Optional\u003cEventTime\u003e optionalEventTime) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setDriver(optionalDriver);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setEventTime(optionalEventTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setCustomer(Customer customer) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //check methods"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String id} can be parse into an integer and must be more than 0."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param id a unique number in string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int tempInt \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return (tempInt \u003e 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task otherTask \u003d (Task) o;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return otherTask.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDriver().equals(getDriver())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getEventTime().equals(getEventTime());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(this);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        builder.append(\" Task ID: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Goods: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getDatePrint())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Customer ID: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getCustomer().getId())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Delivery Person ID: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(isAssigned() ? getDriver().get().getId() : \"UNASSIGNED\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(isDurationAssigned() ? getEventTime().get() : \"NOT ALLOCATED\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getStatus());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 197,
      "tysng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a list of delivery tasks. The `TaskList` class supports a minimal set"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * of list operations. List sort and filter operations are provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasksUnmodifiable \u003d FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(task -\u003e task.getId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (foundTask.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the task list has a task with the {@code int taskId}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskId Unique task id."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(currentTask -\u003e currentTask.getId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check if task exists in the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(currentTask -\u003e currentTask.equals(task))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds tasks into the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param newTask task to be added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToRemove task to be deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(taskToRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(taskToRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.remove(taskToRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Updates the details of the task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToEdit task to be edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param editedTask task that is to replace the original task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(taskToEdit)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (task \u003d\u003d taskToEdit) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                tasks.set(i, editedTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasksUnmodifiable;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cTask\u003e getSortedList(List\u003cTask\u003e tasks, Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.sort(comparator);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cTask\u003e getFilteredList(List\u003cTask\u003e tasks, Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .filter(predicate)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a driver list out of task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * NOTE: task list must be filtered by assigned tasks so that all the tasks contains a driver."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param assignedTasks list of task that is assigned to drivers."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return driver list that contains only drivers with assigned tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cDriver\u003e getDriversFromTasks(List\u003cTask\u003e assignedTasks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        HashSet\u003cDriver\u003e driverSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (Task task : assignedTasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assert task.getDriver().isPresent();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Driver driver \u003d task.getDriver().get();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverSet.add(driver);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        List\u003cDriver\u003e driverList \u003d new ArrayList\u003c\u003e(driverSet);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Iterator\u003cTask\u003e getIterator() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return tasks.iterator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(List\u003cTask\u003e savedTasks) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setAll(savedTasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return getList().size() + \" tasks\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 5,
      "junnbang": 159,
      "ArgVampir": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager(TaskList savedTasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d savedTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //task list operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(taskToRemove);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getTask(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.hasTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.hasTask(taskId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTaskList(taskList.getList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cTask\u003e getSortedList(List\u003cTask\u003e tasks, Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return TaskList.getSortedList(tasks, comparator);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cTask\u003e getFilteredList(List\u003cTask\u003e tasks, Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return TaskList.getFilteredList(tasks, predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static List\u003cDriver\u003e getDriversFromTasks(List\u003cTask\u003e assignedTasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return TaskList.getDriversFromTasks(assignedTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager otherObject \u003d (TaskManager) o;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getList().equals(otherObject.getList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents the status of a delivery task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    INCOMPLETE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    ON_GOING,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    COMPLETED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Task status has to be INCOMPLETE / ON_GOING / COMPLETED.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error that relates to a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error when a tasks is not found in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(\"Task not found.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final int SAMPLE_LAST_TASK_ID \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final int SAMPLE_LAST_CUSTOMER_ID \u003d 6;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final int SAMPLE_LAST_DRIVER_ID \u003d 6;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Customer[] getSampleCustomer() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Customer[]{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(1, new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(2, new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@hotmail.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(3, new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@gmail.com\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(4, new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@hotmail.com\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(5, new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@gmail.com\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Customer(6, new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@yahoo.com\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Driver[] getSampleDriver() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Driver[]{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(1, new Name(\"Aloysius Chan\"), new Phone(\"92837163\"), new Email(\"aloysius@gmail.com\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 123 Bukit Panjang Street 10, #11-04\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(2, new Name(\"Chloe Low\"), new Phone(\"93771823\"), new Email(\"lidavid@hotmail.com\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 357 Joo Seng Road #07-01 OLIVINE BUILDING, 368357\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(3, new Name(\"Neo Swee Lian\"), new Phone(\"81678973\"), new Email(\"nsl1980@hotmail.com\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 34 Boon Lay Street 72, #09-14\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(4, new Name(\"Russell Lim Wan Bo\"), new Phone(\"82273613\"), new Email(\"wanbo@hotmail.com\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 305 Lorong 19 Sennett Street 10, #13-01\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(5, new Name(\"Gerald Guo Weiliang \"), new Phone(\"81739102\"), new Email(\"gerald2000@hotmail.com\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 384 Boon Lay Street 37, #16-12\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Driver(6, new Name(\"John Lim\"), new Phone(\"99283312\"), new Email(\"john2222@gmail.com\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new Address(\"Blk 300 Paya Lebar Street 30, #03-30\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task[] getSampleTask(CustomerManager customerManager, DriverManager driverManager) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask1 \u003d new Task(1, new Description(\"20 frozen boxes of Red groupers\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Task.getDateFromString(\"10/10/2019\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask1.setCustomer(customerManager.getCustomer(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e driverOptional \u003d Optional.of(driverManager.getDriver(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e eventTimeOptional \u003d Optional.of(EventTime.parse(\"1000 - 1200\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask1.setDriverAndEventTime(driverOptional, eventTimeOptional);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask1.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask2 \u003d new Task(2, new Description(\"25 boxes of A4 paper\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Task.getParsedLocalDate(LocalDate.now()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask2.setCustomer(customerManager.getCustomer(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask3 \u003d new Task(3, new Description(\"25 packs of frozen chicken wings\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Task.getParsedLocalDate(LocalDate.now()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask3.setCustomer(customerManager.getCustomer(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e optionalDriver \u003d Optional.of(driverManager.getDriver(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e optionalEventTime \u003d Optional.of(EventTime.parse(\"1000 - 1200\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        sampleTask3.setDriverAndEventTime(optionalDriver, optionalEventTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driverManager.getDriver(1).addToSchedule(EventTime.parse(\"1000 - 1200\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Task sampleTask4 \u003d new Task(4, new Description(\"5 boxes of Chicken Nuggets\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                Task.getDateFromString(\"10/10/2019\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask4.setCustomer(customerManager.getCustomer(2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Optional\u003cDriver\u003e driverOptional2 \u003d Optional.of(driverManager.getDriver(2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Optional\u003cEventTime\u003e eventTimeOptional2 \u003d Optional.of(EventTime.parse(\"1000 - 1200\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask4.setDriverAndEventTime(driverOptional2, eventTimeOptional2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask4.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Task sampleTask5 \u003d new Task(5, new Description(\"1 Lakewood Guitar\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                Task.getDateFromString(\"10/10/2019\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask5.setCustomer(customerManager.getCustomer(3));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Optional\u003cDriver\u003e driverOptional3 \u003d Optional.of(driverManager.getDriver(1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Optional\u003cEventTime\u003e eventTimeOptional3 \u003d Optional.of(EventTime.parse(\"1400 - 1600\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask5.setDriverAndEventTime(driverOptional3, eventTimeOptional3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        sampleTask5.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return new Task[]{sampleTask1, sampleTask2, sampleTask3, sampleTask4, sampleTask5};"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static CentralManager getSampleCentralManager() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager sampleCustomerManager \u003d getSampleCustomerManager();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager sampleDriverManager \u003d getSampleDriverManager();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager sampleTaskManager \u003d getSampleTaskManager(sampleCustomerManager, sampleDriverManager);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        IdManager sampleIdManager \u003d getSampleIdManager();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CentralManager(sampleCustomerManager, sampleDriverManager, sampleTaskManager, sampleIdManager);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static CustomerManager getSampleCustomerManager() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager sampleCustomerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (Customer customer : getSampleCustomer()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            sampleCustomerManager.addPerson(customer);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sampleCustomerManager;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static DriverManager getSampleDriverManager() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager sampleDriverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (Driver driver : getSampleDriver()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            sampleDriverManager.addPerson(driver);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sampleDriverManager;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static TaskManager getSampleTaskManager(CustomerManager sampleCustomerManager,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                    DriverManager sampleDriverManager) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager sampleTaskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (Task task : getSampleTask(sampleCustomerManager, sampleDriverManager)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            sampleTaskManager.addTask(task);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return sampleTaskManager;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static IdManager getSampleIdManager() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new IdManager(SAMPLE_LAST_TASK_ID, SAMPLE_LAST_CUSTOMER_ID, SAMPLE_LAST_DRIVER_ID);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 124,
      "ArgVampir": 18,
      "tysng": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *                                 format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws IOException             if there was any problem when reading from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *                                 the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CentralManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A wrapper manager that consists of all the managers used for saving purpose."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class CentralManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private CustomerManager customerManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private DriverManager driverManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private IdManager idManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CentralManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d new IdManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CentralManager(CustomerManager customerManager, DriverManager driverManager,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                          TaskManager taskManager, IdManager idManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager \u003d customerManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager \u003d driverManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager \u003d taskManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d idManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CustomerManager getCustomerManager() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DriverManager getDriverManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public IdManager getIdManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManager that \u003d (CentralManager) o;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getCustomerManager().equals(that.getCustomerManager())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 getDriverManager().equals(that.getDriverManager())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 getTaskManager().equals(that.getTaskManager())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 getIdManager().equals(that.getIdManager());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(getCustomerManager(), getDriverManager(), getTaskManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CentralManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a storage for {@link CentralManager}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public interface CentralManagerStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Path getManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Optional\u003cCentralManager\u003e readManager() throws DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Optional\u003cCentralManager\u003e readManager(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveManager(CentralManager centralManager) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveManager(CentralManager centralManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCustomer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class JsonAdaptedCustomer extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public static final String INVALID_INTEGER_ID \u003d \"Customer has a invalid integer id.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final String customerId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"customerId\") String customerId, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                               @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                               @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(name, phone, email, address, tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerId \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        Person person \u003d super.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        final Name modelName \u003d person.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        final Phone modelPhone \u003d person.getPhone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        final Email modelEmail \u003d person.getEmail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        final Address modelAddress \u003d person.getAddress();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d person.getTags();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Customer.isValidId(customerId)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelCustomerId \u003d Integer.parseInt(customerId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Customer(modelCustomerId, modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 60,
      "junnbang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDriver.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Jackson-friendly version of {@link Driver}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonAdaptedDriver extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_INTEGER_ID \u003d \"Driver has a invalid integer id.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final String driverId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonAdaptedDriver} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedDriver(@JsonProperty(\"driverId\") String driverId, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(name, phone, email, address, tagged);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedDriver(Driver source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driverId \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Driver toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Person person \u003d super.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Name modelName \u003d person.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Phone modelPhone \u003d person.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Email modelEmail \u003d person.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Address modelAddress \u003d person.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d person.getTags();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Customer.isValidId(driverId)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modeDriverId \u003d Integer.parseInt(driverId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Driver(modeDriverId, modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Jackson-friendly version of {@link IdManager}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonAdaptedId {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"IdManager\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_INTEGER_ID \u003d \"IdManager\u0027s %s field has a invalid integer id.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String lastTaskId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String lastCustomerId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String lastDriverId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts a given {@code IdManager} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedId(IdManager idManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastTaskId \u003d String.valueOf(idManager.getLastTaskId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastCustomerId \u003d String.valueOf(idManager.getLastCustomerId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastDriverId \u003d String.valueOf(idManager.getLastDriverId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonAdaptedId} with the given Ids."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedId(@JsonProperty(\"lastTaskId\") String lastTaskId,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                         @JsonProperty(\"lastCustomerId\") String lastCustomerId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                         @JsonProperty(\"lastDriverId\") String lastDriverId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastTaskId \u003d lastTaskId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastCustomerId \u003d lastCustomerId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.lastDriverId \u003d lastDriverId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public IdManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (lastTaskId \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"lastTaskId\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!IdManager.isValidId(lastTaskId)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, \"lastTaskId\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelLastTaskId \u003d Integer.parseInt(lastTaskId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (lastCustomerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"lastCustomerId\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!IdManager.isValidId(lastCustomerId)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, \"lastCustomerId\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelLastCustomerId \u003d Integer.parseInt(lastCustomerId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (lastDriverId \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"lastDriverId\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!IdManager.isValidId(lastDriverId)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, \"lastDriverId\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelLastDriverId \u003d Integer.parseInt(lastDriverId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new IdManager(modelLastTaskId, modelLastCustomerId, modelLastDriverId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMATTER_FOR_USER_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_INTEGER_ID \u003d \"Task\u0027s %s field has a invalid integer id.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_DATE_FORMAT \u003d \"Invalid Date format. Date format should be \" + DATE_FORMAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //using String data type for fields to accommodate null value and prevent precision loss."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String customerId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String driverId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedTask(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        id \u003d String.valueOf(task.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        description \u003d task.getDescription().getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerId \u003d String.valueOf(task.getCustomer().getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        date \u003d task.getDate().format(DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e driver \u003d task.getDriver();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driver.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverId \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverId \u003d String.valueOf(task.getDriver().get().getId());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e eventTime \u003d task.getEventTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (eventTime.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            duration \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            duration \u003d EventTime.getStringFromDuration(task.getEventTime().get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        status \u003d task.getStatus().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"taskId\") String id, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"customerId\") String customerId, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"driverId\") String driverId, @JsonProperty(\"duration\") String duration,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task toModelType(CustomerManager customerManager, DriverManager driverManager) throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Task ID \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Task.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Task.isValidId(id)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, Task.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelTaskId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Description \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Customer ID \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Customer.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Task.isValidId(customerId) || !customerManager.hasCustomer(Integer.parseInt(customerId))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(Customer.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Customer modelCustomer \u003d customerManager.getCustomer(Integer.parseInt(customerId));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Delivery Date \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!ParserUtil.isValidDate(date)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final LocalDate modelDate \u003d Task.getDateFromString(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Driver ID \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //driverId can be null"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if driver is not null, check if the id a valid, then check if there exist a driver with driverId."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId !\u003d null \u0026\u0026 (!Task.isValidId(driverId) || !driverManager.hasDriver(Integer.parseInt(driverId)))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(Driver.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Duration \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Duration\u0027s can be null"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (duration !\u003d null \u0026\u0026 !EventTime.isValidEventTime(duration)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Create Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task \u003d new Task(modelTaskId, modelDescription, modelDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        task.setCustomer(modelCustomer);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId !\u003d null \u0026\u0026 duration !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            Optional\u003cDriver\u003e driverOptional \u003d driverManager.getOptionalDriver(Integer.parseInt(driverId));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (driverOptional.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new IllegalValueException(Driver.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            final EventTime modelEventTime \u003d EventTime.parse(duration);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setDriverAndEventTime(driverOptional, Optional.of(modelEventTime));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //status cannot be null"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(TaskStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if status is incomplete, then ignore, because by default is incomplete"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (status.equals(TaskStatus.ON_GOING.toString())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //if status is ongoing, then load the eventTime to driver schedule"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            Driver driver \u003d driverManager.getDriver(Integer.parseInt(driverId));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Schedule driverSchedule \u003d driver.getSchedule();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverSchedule.add(EventTime.parse(duration));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else if (status.equals(TaskStatus.COMPLETED.toString())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //task is completed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 3,
      "junnbang": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "                JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCentralManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A class to access CentralManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * CentralManager contains all the managers needed such as Customer Manager, Driver Manager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * and Task Manager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonCentralManagerStorage implements CentralManagerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCentralManagerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonCentralManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Path getManagerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cCentralManager\u003e readManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return readManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns a CentralManager which contains all the managers populated with data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cCentralManager\u003e readManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cJsonSerializableCentralManager\u003e jsonCentralManager \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                JsonSerializableCentralManager.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if unable to read file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!jsonCentralManager.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.of(jsonCentralManager.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Saves the given {@link CentralManager} to the storage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param centralManager Manager that contains all the managers needed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveManager(CentralManager centralManager) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        saveManager(centralManager, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Similar to #saveManager(CentralManager)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param centralManager cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveManager(CentralManager centralManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(centralManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCentralManager(centralManager), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCentralManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Contains all managers that are serializable to JSON format. Managers such as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * {@code CustomerManager}, {@code DriverManager} and {@code TaskManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@JsonRootName(value \u003d \"deliveria\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonSerializableCentralManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"%1$s\u0027s list contains duplicate(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final List\u003cJsonAdaptedDriver\u003e drivers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private JsonAdaptedId idManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonSerializableCentralisedManager} with the given lists of entity."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Entity such as customers, drivers and tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * It is used for loading JSON adapted objects, which comes from JSON file, into"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * their respective List for {@code toModelType()} usage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonSerializableCentralManager(@JsonProperty(\"customers\") List\u003cJsonAdaptedCustomer\u003e customers,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                          @JsonProperty(\"drivers\") List\u003cJsonAdaptedDriver\u003e drivers,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                          @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                          @JsonProperty(\"idManager\") JsonAdaptedId idManager) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customers.addAll(customers);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.drivers.addAll(drivers);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d idManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts all the managers in {@link CentralManager} for JSON use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * It is used for saving into JSON adapted objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param centralManager future changes to this will not affect created {@code JsonSerializableCentralisedManager}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonSerializableCentralManager(CentralManager centralManager) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager customerManager \u003d centralManager.getCustomerManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customers.addAll(customerManager.getPersonList().stream().map(JsonAdaptedCustomer::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager driverManager \u003d centralManager.getDriverManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        drivers.addAll(driverManager.getPersonList().stream().map(JsonAdaptedDriver::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager taskManager \u003d centralManager.getTaskManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addAll(taskManager.getList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        IdManager idManager \u003d centralManager.getIdManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.idManager \u003d new JsonAdaptedId(idManager);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts all the managers in {@code CentralManager} into the model\u0027s manager objects."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * It is used for loading from JSON adapted objects."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CentralManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager customerManager \u003d getPopulatedCustomerManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager driverManager \u003d getPopulatedDriverManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //task depends on customer and driver, so need those managers as inputs."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager taskManager \u003d getPopulatedTaskManager(customerManager, driverManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        IdManager idManager \u003d getPopulatedIdManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CentralManager(customerManager, driverManager, taskManager, idManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskManager getPopulatedTaskManager(CustomerManager customerManager,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                DriverManager driverManager) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType(customerManager, driverManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (taskManager.hasTask(task)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_DUPLICATE_ENTITY, Task.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private CustomerManager getPopulatedCustomerManager() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CustomerManager customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (customerManager.hasPerson(customer)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_DUPLICATE_ENTITY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                                Customer.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            customerManager.addPerson(customer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private DriverManager getPopulatedDriverManager() throws IllegalValueException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DriverManager driverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (JsonAdaptedDriver jsonAdaptedDriver : drivers) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Driver driver \u003d jsonAdaptedDriver.toModelType();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (driverManager.hasPerson(driver)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_DUPLICATE_ENTITY, Driver.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverManager.addPerson(driver);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private IdManager getPopulatedIdManager() throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return idManager.toModelType();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Path getManagerFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Optional\u003cCentralManager\u003e readManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Optional\u003cCentralManager\u003e readManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveManager(CentralManager centralManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveManager(CentralManager centralManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 9,
      "tysng": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private CentralManagerStorage jsonCentralManagerStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public StorageManager(CentralManagerStorage jsonCentralManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.jsonCentralManagerStorage \u003d jsonCentralManagerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Managers methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Path getManagerFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return jsonCentralManagerStorage.getManagerFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cCentralManager\u003e readManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return readManager(jsonCentralManagerStorage.getManagerFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cCentralManager\u003e readManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return jsonCentralManagerStorage.readManager(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveManager(CentralManager centralManager) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        saveManager(centralManager, jsonCentralManagerStorage.getManagerFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveManager(CentralManager centralManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        jsonCentralManagerStorage.saveManager(centralManager, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 32,
      "tysng": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignedTaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class AssignedTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label customerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label deliverTo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label assigned;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label taskId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public AssignedTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        taskId.setText(\"Task ID: #\" + task.getId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assigned.setText(\"Assigned: \" + task.getEventTime().map(EventTime::toString).orElse(\"NOT ALLOCATED\") + \" @ \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                + task.getDriver().get().getName().fullName + \" (#\" + task.getDriver().get().getId()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                + \") - \" + task.getDriver().get().getPhone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        deliverTo.setText(\"Deliver To: \" + task.getCustomer().getName().fullName"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                + \" (#\" + task.getCustomer().getId() + \") - \" + task.getCustomer().getPhone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        address.setText(\"Address: \" + task.getCustomer().getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        date.setText(\"Date: \" + task.getDatePrint());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!(other instanceof AssignedTaskCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        AssignedTaskCard card \u003d (AssignedTaskCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 78,
      "tysng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignedTaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class AssignedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"AssignedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignedTaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private ListView\u003cTask\u003e assignedTaskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public AssignedTaskListPanel(ObservableList\u003cTask\u003e assignedTaskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        assignedTaskListView.setItems(assignedTaskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        assignedTaskListView.setCellFactory(listView -\u003e new AssignedTaskListPanel.AssignedTaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code AssignedTaskCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    class AssignedTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new AssignedTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Handles the Send button clicked event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private void handleCommandClicked() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 12,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CompletedTaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class CompletedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"CompletedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignedTaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private ListView\u003cTask\u003e completedTaskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CompletedTaskListPanel(ObservableList\u003cTask\u003e completedTaskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTaskListView.setItems(completedTaskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTaskListView.setCellFactory(listView -\u003e new CompletedTaskListPanel.CompletedTaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code UnassignedTaskCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    class CompletedTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new AssignedTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CustomerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label customerId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        customerId.setText(\"Customer ID: #\" + customer.getId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        phone.setText(\"Phone: \" + customer.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        address.setText(\"Address: \" + customer.getAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        email.setText(\"Email: \" + customer.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 16,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CustomerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code PersonCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DriverCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class DriverCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"DriverListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final Driver driver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label driverId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label availability;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public DriverCard(Driver driver, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.driver \u003d driver;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        name.setText(driver.getName().fullName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        phone.setText(\"Phone: \" + driver.getPhone().value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        driverId.setText(\"Driver ID: #\" + driver.getId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        availability.setText(\"Unavailable Time: \" + driver.getSchedule());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!(other instanceof DriverCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        DriverCard card \u003d (DriverCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u0026\u0026 driver.equals(card.driver);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DriverListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class DriverListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"DriverListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DriverListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private ListView\u003cDriver\u003e driverListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public DriverListPanel(ObservableList\u003cDriver\u003e driverList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        driverListView.setItems(driverList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        driverListView.setCellFactory(listView -\u003e new DriverListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Driver} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    class DriverListViewCell extends ListCell\u003cDriver\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        protected void updateItem(Driver driver, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            super.updateItem(driver, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (empty || driver \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new DriverCard(driver, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-f14-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private DriverListPanel driverListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private IncompleteTaskListPanel incompleteTaskListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private StackPane driverListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private StackPane incompleteTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 10,
      "junnbang": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IncompleteTaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class IncompleteTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private static final String FXML \u003d \"IncompleteTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IncompleteTaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private ListView\u003cTask\u003e incompleteTaskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public IncompleteTaskListPanel(ObservableList\u003cTask\u003e incompleteTaskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        incompleteTaskListView.setItems(incompleteTaskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        incompleteTaskListView.setCellFactory(listView -\u003e new IncompleteTaskListPanel.IncompleteTaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    class IncompleteTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new UnassignedTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 44,
      "ArgVampir": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATA_START_NEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.logic.commands.GoCommand.HISTORY_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.logic.commands.GoCommand.HOME_TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private NotificationWindow notificationWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private AssignedTaskListPanel assignedTaskListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private UnassignedTaskListPanel unassignedTaskListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private CustomerListPanel customerListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private DriverListPanel driverListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private CompletedTaskListPanel completedTaskListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private StackPane assignedTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private StackPane unassignedTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private StackPane customerListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private StackPane driverListPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private StackPane completedTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        assignedTaskListPanel \u003d new AssignedTaskListPanel(logic.getFilteredAssignedTaskList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        assignedTaskListPanelPlaceholder.getChildren().add(assignedTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTaskListPanel \u003d new UnassignedTaskListPanel(logic.getFilteredUnassignedTaskList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTaskListPanelPlaceholder.getChildren().add(unassignedTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTaskListPanel \u003d new CompletedTaskListPanel(logic.getFilteredCompletedTaskList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        completedTaskListPanelPlaceholder.getChildren().add(completedTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        customerListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        customerListPanelPlaceholder.getChildren().add(customerListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        driverListPanel \u003d new DriverListPanel(logic.getFilteredDriverList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        driverListPanelPlaceholder.getChildren().add(driverListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (logic.isStartAfresh()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            resultDisplay.setFeedbackToUser(MESSAGE_DATA_START_NEW);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Screen screen \u003d Screen.getPrimary();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        Rectangle2D bounds \u003d screen.getVisualBounds();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        primaryStage.setX(bounds.getMinX());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        primaryStage.setY(bounds.getMinY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        primaryStage.setWidth(bounds.getWidth());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        primaryStage.setHeight(bounds.getHeight());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //maximize the window size, and disable resize button."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Navigates to the tab."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private void handleSwitchTab(String param) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (param.equalsIgnoreCase(HOME_TAB)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            selectionModel.select(0);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        } else if (param.equalsIgnoreCase(HISTORY_TAB)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            selectionModel.select(1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                handleSwitchTab(commandResult.getTabType());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 1,
      "junnbang": 9,
      "ArgVampir": 66,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotificationWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class NotificationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private static final String FXML \u003d \"NotificationWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private IncompleteTaskListPanel incompleteTaskListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private StackPane incompleteTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private Button okayButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private StackPane okayButtonPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public NotificationWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        incompleteTaskListPanel \u003d new IncompleteTaskListPanel(this.logic.getIncompleteTaskList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        incompleteTaskListPanelPlaceholder.getChildren().add(incompleteTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public NotificationWindow(Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Shows the notification window."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        logger.fine(\"Showing page about the incomplete task from the previous day.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Frees driver\u0027s schedule from tasks in the past"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private void freeDriver() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        ObservableList\u003cTask\u003e tasksToBeCleared \u003d logic.getIncompleteTaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        for (Task task: tasksToBeCleared) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            Driver driver \u003d task.getDriver().orElseThrow();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            FreeCommand.freeDriverFromTask(driver, task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        logic.refreshFilteredTaskList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private NotificationWindow notificationWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            notificationWindow \u003d new NotificationWindow(logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            notificationWindow.show();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            notificationWindow.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 4,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UnassignedTaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class UnassignedTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"UnassignedTaskListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label customerId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label deliverTo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Label taskId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public UnassignedTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        taskId.setText(\"Task ID: #\" + task.getId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        deliverTo.setText(\"Deliver To: \" + task.getCustomer().getName().fullName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                + \" (#\" + task.getCustomer().getId() + \") - \" + task.getCustomer().getPhone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        address.setText(\"Address: \" + task.getCustomer().getAddress().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        date.setText(\"Date: \" + task.getDatePrint());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        if (!(other instanceof UnassignedTaskCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        UnassignedTaskCard card \u003d (UnassignedTaskCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UnassignedTaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class UnassignedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private static final String FXML \u003d \"UnassignedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UnassignedTaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private ListView\u003cTask\u003e unassignedTaskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public UnassignedTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTaskListView.setItems(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        unassignedTaskListView.setCellFactory(listView -\u003e new UnassignedTaskListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code AssignedTaskCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    class UnassignedTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                setGraphic(new UnassignedTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 47
    }
  },
  {
    "path": "src/main/resources/view/AssignedTaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cToolBar prefHeight\u003d\"36.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "       \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003cLabel text\u003d\"On-going Delivery Tasks\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "       \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cListView fx:id\u003d\"assignedTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 15
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "   \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCommandClicked\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "           text\u003d\"Send\" style\u003d\"-fx-background-color: #456248\" textAlignment\u003d\"RIGHT\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "           textFill\u003d\"#98c34d\" StackPane.alignment\u003d\"CENTER_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/CompletedTaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cToolBar prefHeight\u003d\"36.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel text\u003d\"Completed Delivery Tasks\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cListView fx:id\u003d\"completedTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 15
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "      \u003cLabel fx:id\u003d\"customerId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customerId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "   \u003cToolBar prefHeight\u003d\"36.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "      \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "         \u003cLabel text\u003d\"Customer List\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "      \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "   \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 15
    }
  },
  {
    "path": "src/main/resources/view/DriverListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"driverId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$driverId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"availability\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$availability\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 35
    }
  },
  {
    "path": "src/main/resources/view/DriverListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cToolBar prefHeight\u003d\"30.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel text\u003d\"Driver List\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cListView fx:id\u003d\"driverListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 15
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/IncompleteTaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003cToolBar prefHeight\u003d\"36.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            \u003cLabel text\u003d\"Uncompleted Delivery Tasks from Previous Days\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003cListView fx:id\u003d\"incompleteTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "         title\u003d\"Deliveria\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.7\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cInsets bottom\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003ctabs\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003cTab text\u003d\"Home\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cSplitPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003cVBox fx:id\u003d\"driverList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"250\" prefWidth\u003d\"250\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"driverListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003cVBox fx:id\u003d\"customerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" prefWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"customerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003cTab text\u003d\"History\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cSplitPane dividerPositions\u003d\"0.4\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003cVBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003cVBox fx:id\u003d\"completedTaskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"completedTaskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/tabs\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                     minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003cInsets top\u003d\"15\" right\u003d\"10\" bottom\u003d\"15\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003cSplitPane orientation\u003d\"VERTICAL\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003cStackPane fx:id\u003d\"assignedTaskListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cVBox fx:id\u003d\"unassignedTaskList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cStackPane fx:id\u003d\"unassignedTaskListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "junnbang": 1,
      "ArgVampir": 58,
      "tysng": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/NotificationWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Notification\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cVBox fx:id\u003d\"incompleteTaskListPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"800\" prefWidth\u003d\"800\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                          minHeight\u003d\"520\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"incompleteTaskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cButton fx:id\u003d\"okayButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#freeDriver\" text\u003d\"Okay\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"okayButtonPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 50
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$taskId\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"assigned\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$assigned\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"deliverTo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliverTo\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 35
    }
  },
  {
    "path": "src/main/resources/view/UnassignedTaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$taskId\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"deliverTo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliverTo\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 34
    }
  },
  {
    "path": "src/main/resources/view/UnassignedTaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cToolBar prefHeight\u003d\"36.0\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \u003cLabel text\u003d\"Incomplete Delivery Tasks\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    \u003cListView fx:id\u003d\"unassignedTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.JsonCentralManagerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManagerStorage centralManagerStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new JsonCentralManagerStorage(temporaryFolder.resolve(\"deliveria.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(centralManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String deleteCommand \u003d \"editT 100000 g/description\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandException(deleteCommand, Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManagerStorage centralManagerStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new JsonCentralManagerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(centralManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // Execute add Customer command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String addCustomerCommand \u003d \"addC n/Alex Yeoh p/87438807 \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"e/alexyeoh@gmail.com a/Blk 30 Geylang Street 29, #06-40\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer expectedCustomer \u003d new Customer(1, new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Email(\"alexyeoh@gmail.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addCustomer(expectedCustomer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(addCustomerCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static class JsonCentralManagerIoExceptionThrowingStub extends JsonCentralManagerStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private JsonCentralManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void saveManager(CentralManager centralManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 29,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.pdfmanager.exceptions.PdfNoTaskToDisplayException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void resetCentralManager() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTaskBelongsToDriver(Driver driver) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTaskBelongsToCustomer(Customer customer) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public ObservableList\u003cTask\u003e getUnassignedTaskList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public ObservableList\u003cTask\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate, FilteredList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public ObservableList\u003cTask\u003e getIncompleteTaskList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public ObservableList\u003cTask\u003e getCompletedTaskList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public ObservableList\u003cTask\u003e getCurrentCompletedTaskList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void refreshFilteredTaskList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void refreshAllFilteredList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public void updateCompletedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public void viewCustomerTask(int customerId) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        public void viewDriverTask(int driverId) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setCustomer(Customer customerToEdit, Customer editedCustomer) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void deleteCustomer(Customer customer) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public CustomerManager getCustomerManager() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void refreshFilteredCustomerList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public boolean hasDriver(Driver driver) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void setDriver(Driver driverToEdit, Driver editedDriver) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        };"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public Driver getDriver(int driverId) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        public void addDriver(Driver driver) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void deleteDriver(Driver driver) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public DriverManager getDriverManager() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public void updateFilteredDriverList(Predicate\u003cDriver\u003e predicate) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        public ObservableList\u003cDriver\u003e getFilteredDriverList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void refreshFilteredDriverList() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public int getNextTaskId() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public int getNextCustomerId() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public int getNextDriverId() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public IdManager getIdManager() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean isStartAfresh() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void saveDriverTaskPdf(String filePathForPdf, LocalDate date)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throws IOException, PdfNoTaskToDisplayException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 28,
      "junnbang": 147,
      "cheeyou": 23,
      "ArgVampir": 50,
      "tysng": 2,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.model.person.Schedule.MESSAGE_EVENT_START_BEFORE_NOW_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.model.person.Schedule.MESSAGE_SCHEDULE_CONFLICT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.SampleEntity.THIRD_VALID_TASK_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DRIVER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_TASK_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getSampleFreshModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.SchedulingSuggestion;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "class AssignCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Sets the clock to 15 Oct 2019, 2pm."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    static void setStaticClock() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        GlobalClock.setFixedClock();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    static void setNormalClock() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        GlobalClock.setRealClock();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void setFreshModel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.model \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void execute_addTaskNow_shouldSucceed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand cmd \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, proposed, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // construct expected by setting both driver and task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Model expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver targetDriver \u003d expectedModel.getDriver(VALID_DRIVER.getId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task targetTask \u003d expectedModel.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetDriver.getSchedule().add(proposed);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetTask.setDriverAndEventTime("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(expectedModel.getDriver(VALID_DRIVER.getId())),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(proposed));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String response \u003d AssignCommand.buildSuccessfulResponse("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "                new SchedulingSuggestion(\"\", Optional.empty(), proposed),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetTask,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetDriver,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "                proposed);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandSuccess(cmd, model, new CommandResult(response), expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void execute_addLateTime_shouldSucceed() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"1600\", \"1700\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand cmd \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, proposed, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // construct expected by setting both driver and task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Model expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver targetDriver \u003d expectedModel.getDriver(VALID_DRIVER.getId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task targetTask \u003d expectedModel.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetDriver.getSchedule().add(proposed);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetTask.setDriverAndEventTime("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(expectedModel.getDriver(VALID_DRIVER.getId())),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(proposed));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String response \u003d AssignCommand.buildSuccessfulResponse("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "                new SchedulingSuggestion(\"\", Optional.of(EventTime.parse(\"1400\", \"1500\"))),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetTask,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetDriver,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "                proposed);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandSuccess(cmd, model, new CommandResult(response), expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void execute_addPastTime_throwsException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"900\", \"1100\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand cmd \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, proposed, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandFailure(cmd, model, String.format(MESSAGE_EVENT_START_BEFORE_NOW_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "                GlobalClock.timeNow().format(EventTime.DISPLAY_TIME_FORMAT)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void execute_addConflictingTime_throwsException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime existing \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand addExisting \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, existing, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "            addExisting.execute(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"1430\", \"1600\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand addProposed \u003d new AssignCommand(VALID_DRIVER.getId(), THIRD_VALID_TASK_ID, proposed, false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandFailure(addProposed, model, new SchedulingSuggestion("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "                MESSAGE_SCHEDULE_CONFLICT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(EventTime.parse(\"1500\", \"1630\"))).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void executeForce_taskWithDriver_shouldSucceed() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime existing \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand addExisting \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, existing, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "            addExisting.execute(model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"1430\", \"1600\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand addProposed \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, proposed, true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // construct expected by setting both driver and task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Model expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver targetDriver \u003d expectedModel.getDriver(VALID_DRIVER.getId());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task targetTask \u003d expectedModel.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetDriver.getSchedule().add(proposed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "        targetTask.setDriverAndEventTime("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(expectedModel.getDriver(VALID_DRIVER.getId())),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(proposed));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String response \u003d AssignCommand.buildSuccessfulResponse("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "                new SchedulingSuggestion(\"\", Optional.of(EventTime.parse(\"1400\", \"1530\"))),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetTask,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "                targetDriver,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "                proposed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandSuccess(addProposed, model, new CommandResult(response), expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void executeForce_taskWithUnavailableDriver_throwsExceptionAndModelNotChanged() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime existing1 \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime existing2 \u003d EventTime.parse(\"1500\", \"1600\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand cmd1 \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, existing1, false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand cmd2 \u003d new AssignCommand(VALID_DRIVER.getId(), THIRD_VALID_TASK_ID, existing2, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "            cmd1.execute(model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "            cmd2.execute(model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed \u003d EventTime.parse(\"1430\", \"1600\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand addProposed \u003d new AssignCommand(VALID_DRIVER.getId(), VALID_TASK_ID, proposed, true);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // construct expected by setting both driver and task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Model expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": "            cmd1.execute(expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "            cmd2.execute(expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertCommandFailure(addProposed, model, new SchedulingSuggestion("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": "                MESSAGE_SCHEDULE_CONFLICT,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": "                Optional.of(EventTime.parse(\"1600\", \"1730\"))).toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getSampleCentralManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute_emptyCentralManager_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute_nonEmptyCentralManager_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManager populatedCentralManager \u003d getSampleCentralManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Model model \u003d new ModelManager(populatedCentralManager, new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.resetCentralManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CentralManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.DoneCommand.MESSAGE_MARK_TASK_COMPLETED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.DoneCommand.MESSAGE_TASK_NOT_ONGOING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_CUSTOMER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_EVENT_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_TASK_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_TASK_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleCompletedTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleDriver;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleOnGoingTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getSampleFreshModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.testutil.SampleEntity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //get a sample data with no assigned tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_markIncompleteTaskAsDone_cannotMarkNotOnGoingTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(VALID_TASK_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task incompleteTask \u003d model.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASK_NOT_ONGOING, incompleteTask.getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(doneCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_markCompletedTaskAsDone_cannotMarkNotOnGoingTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add a completed task into model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task completedTask \u003d getFourthSampleCompletedTask();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(completedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(FOURTH_VALID_TASK_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(Task.MESSAGE_TASK_IS_ALREADY_COMPLETED, completedTask.getStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(doneCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_markOnGoingTaskAsDone_successfullyMarked() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add an ongoing task into model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task onGoingTask \u003d getFourthSampleOnGoingTask();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(onGoingTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //on going task driver -\u003e driver schedule should not be available at that time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Driver onGoingTaskDriver \u003d onGoingTask.getDriver().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Schedule driverSchedule \u003d onGoingTaskDriver.getSchedule();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(driverSchedule.isAvailable(FOURTH_VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(FOURTH_VALID_TASK_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MARK_TASK_COMPLETED, onGoingTask.getId());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d SampleEntity.getCompleteTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                GlobalClock.getStaticDate(), FOURTH_VALID_CUSTOMER, getFourthSampleDriver(), FOURTH_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if driver schedule is free for that duration after task is done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertTrue(driverSchedule.isAvailable(FOURTH_VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.EditTaskCommand.MESSAGE_CANNOT_BE_EDITED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.EditTaskCommand.MESSAGE_DATE_IS_BEFORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.EditTaskCommand.MESSAGE_NOTHING_TO_EDIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_CUSTOMER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_EVENT_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_TASK_ID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_CUSTOMER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_CUSTOMER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DAY_AFTER_TODAY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DAY_BEFORE_TODAY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DRIVER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_TODAY_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleCompletedTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getOnGoingTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getSampleFreshModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getUnassignedTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class EditTaskCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    static void setTodayToFixedDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        GlobalClock.setFixedClock();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    static void setClockBackToRealTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        GlobalClock.setRealClock();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //get a sample data thats contains first and second valid tasks that is not assigned"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel \u003d getSampleFreshModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_invalidTaskId_invalidId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                FOURTH_VALID_CUSTOMER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //sample data task id only has 1 and 2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int invalidId \u003d 1000;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(invalidId, editTaskDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d Task.MESSAGE_INVALID_ID;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editToSameValue_nothingEdited() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, MESSAGE_NOTHING_TO_EDIT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editOnlyDescription_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change only description, same customer, and date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeDescriptionTo(SECOND_VALID_DESCRIPTION).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //expected model"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change FOURTH_VALID_DESCRIPTION to SECOND_VALID_DESCRIPTION"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, SECOND_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TASK_SUCCESS, expectedTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editOnlyCustomer_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change only customer, same description and date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeCustomerTo(SECOND_VALID_CUSTOMER.getId()).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //expected model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change VALID_CUSTOMER to SECOND_VALID_CUSTOMER"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                SECOND_VALID_CUSTOMER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TASK_SUCCESS, expectedTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editToDateBeforeToday_updatedDateCannotBeBeforeToday() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //edit to before today"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeDateTo(VALID_DAY_BEFORE_TODAY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, MESSAGE_DATE_IS_BEFORE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editToDateToday_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //task that is day before today, edit to today date"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeDateTo(VALID_TODAY_DATE).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //expected model"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change FOURTH_VALID_LOCAL_DATE to VALID_TODAY_DATE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, VALID_TODAY_DATE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TASK_SUCCESS, expectedTask);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editToDateAfterToday_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //task that is today, edit to day after today"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, VALID_TODAY_DATE,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(sampleTask);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(sampleTask)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeDateTo(VALID_DAY_AFTER_TODAY).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //expected model"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, VALID_DAY_AFTER_TODAY,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TASK_SUCCESS, expectedTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editCompletedTask_completedTaskCannotEdit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task completedTask \u003d getFourthSampleCompletedTask();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(completedTask);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(completedTask).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, MESSAGE_CANNOT_BE_EDITED);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_editDateToLaterDateForOnGoingTask_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //edit ongoing task\u0027s date (also checks if the driver is freed)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task onGoingTask \u003d getOnGoingTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, VALID_CUSTOMER,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_DRIVER, FOURTH_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(onGoingTask);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptorBuilder(onGoingTask)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .changeDateTo(VALID_DAY_AFTER_TODAY).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(FOURTH_VALID_TASK_ID, editTaskDescriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //on going task driver -\u003e driver schedule should not be available at that time."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Driver onGoingTaskDriver \u003d onGoingTask.getDriver().get();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Schedule driverSchedule \u003d onGoingTaskDriver.getSchedule();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(driverSchedule.isAvailable(FOURTH_VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //expected model"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change Ongoing task\u0027s today date to VALID_DAY_AFTER_TODAY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedOnGoingTask \u003d getUnassignedTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_DAY_AFTER_TODAY, VALID_CUSTOMER);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        expectedModel.addTask(expectedOnGoingTask);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_TASK_SUCCESS, expectedOnGoingTask);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //after changing delivery date, driver should be available now"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertTrue(driverSchedule.isAvailable(FOURTH_VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SavePdfCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_ASSIGNED_TASK_FOR_THE_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_EVENT_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.FOURTH_VALID_TASK_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getCompleteTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleCompletedTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFourthSampleDriver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.testutil.SampleEntity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class SavePdfCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static final String tempFilePath \u003d \"tempForSavePdf.pdf\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //builds a temporary directory which will be deleted after the test case regardless if it fails or pass"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private LocalDate fixedToday \u003d GlobalClock.getStaticDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String getTempFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return testFolder.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //get a sample data with no assigned tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model \u003d SampleEntity.getSampleFreshModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        testFolder \u003d testFolder.resolve(tempFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_noAssignedTask_noAssignedTaskForTheDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test savepdf today date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        SavePdfCommand savePdfCommand \u003d new SavePdfCommand(Optional.of(fixedToday), getTempFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NO_ASSIGNED_TASK_FOR_THE_DATE, fixedToday);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandFailure(savePdfCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_hasAssignedTaskToday_savePdfFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add a complete task today into the manager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task completedTask \u003d getCompleteTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, fixedToday,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                FOURTH_VALID_CUSTOMER, getFourthSampleDriver(), FOURTH_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(completedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        SavePdfCommand savePdfCommand \u003d new SavePdfCommand(Optional.of(fixedToday), getTempFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //no change to model."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(savePdfCommand, model, SavePdfCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void execute_hasAssignedTaskOtherDate_savePdfFile() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add a complete task on other date into the manager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate otherDate \u003d FOURTH_VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task completedTask \u003d getFourthSampleCompletedTask();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(completedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        SavePdfCommand savePdfCommand \u003d new SavePdfCommand(Optional.of(otherDate), getTempFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //no change to model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertCommandSuccess(savePdfCommand, model, SavePdfCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 4,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EventTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "class EventTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void parse_nonZeroPaddedInput_returnsCorrectTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime \u003d EventTime.parse(\"920\", \"1600\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(9, eventTime.getStart().getHour());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(20, eventTime.getStart().getMinute());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(16, eventTime.getEnd().getHour());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(0, eventTime.getEnd().getMinute());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_partialOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0101\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_fullOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0001\", \"1900\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0030\", \"0200\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_discreteTime_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0100\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void equals_sameStartEndTime_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(eventTime1, eventTime2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/container/EntityManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.container;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonEntityManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EntityManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.ReadOnlyEntityManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "class EntityManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final EntityManager\u003cPerson\u003e personEntityManager \u003d new EntityManager\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Collections.emptyList(), personEntityManager.getPersonList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personEntityManager.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManager\u003cPerson\u003e newData \u003d getTypicalPersonEntityManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(newData, personEntityManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManagerStub newData \u003d new EntityManagerStub(newPersons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personEntityManager.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personEntityManager.hasPerson(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(personEntityManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(personEntityManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(personEntityManager.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personEntityManager.getPersonList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static class EntityManagerStub implements ReadOnlyEntityManager\u003cPerson\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManagerStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final LocalTime TEN_AM \u003d LocalTime.of(10, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final LocalTime TWO_PM \u003d LocalTime.of(14, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Gets a sample schedule with two events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return sample schedule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Schedule sampleSchedule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"900\", \"1000\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1200\", \"1500\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_outsideWorkingHours_throwsSchedulingException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime outsideWorkingHours \u003d EventTime.parse(\"0200\", \"0400\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(outsideWorkingHours));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_OUTSIDE_WORKING_HOURS, thrown.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_conflictingTask_throwsSchedulingException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime conflict \u003d EventTime.parse(\"0930\", \"1130\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"0900\", \"1000\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1100\", \"1400\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(conflict));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_SCHEDULE_CONFLICT, thrown.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void remove_isSuccessful() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime slot \u003d EventTime.parse(\"0900\", \"1000\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(slot);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.remove(slot);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_EMPTY_SCHEDULE, schedule.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_lateButAvail_returnsEarlySlot() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime expected \u003d EventTime.parse(\"1000\", \"1100\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1500\", \"1600\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(expected, sample.findFirstAvailableSlot(expected.getStart(), oneHourTask.getDuration()).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_schedulingConflict_returnsAvailableSlot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime expected \u003d EventTime.parse(\"1000\", \"1100\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(expected, sample.findFirstAvailableSlot(expected.getStart(), oneHourTask.getDuration()).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_alreadyEarliest_returnsItself() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime threeHourTask \u003d EventTime.parse(\"1500\", \"1800\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(threeHourTask, sample.findFirstAvailableSlot(TEN_AM, threeHourTask.getDuration()).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_notAvailable_returnsEmpty() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime fourHourTask \u003d EventTime.parse(\"1400\", Schedule.END_WORK_TIME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(sample.findFirstAvailableSlot(TEN_AM, fourHourTask.getDuration()).isEmpty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_duringOngoingTask_returnAvailableSlot() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime twoHourTask \u003d EventTime.parse(\"1400\", \"1600\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime expected \u003d EventTime.parse(\"1500\", \"1700\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(expected, sample.findFirstAvailableSlot(TWO_PM, twoHourTask.getDuration()).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.UniquePersonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_TASK_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_TASK_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFirstSampleCompletedTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getSecondSampleCompletedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void getTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskFound \u003d tasks.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(expectedTask, taskFound);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void getTask_noTaskFound_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e tasks.getTask(SECOND_VALID_TASK_ID));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void hasTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToFind \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertTrue(tasks.hasTask(taskToFind));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskNotInList \u003d getSecondSampleCompletedTask();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(tasks.hasTask(taskNotInList));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasks.hasTask(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d getSecondSampleCompletedTask();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(tasks.hasTask(newTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasks.deleteTask(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask_taskNotFound_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskNotInList \u003d getSecondSampleCompletedTask();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e tasks.deleteTask(taskNotInList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToEdit \u003d tasks.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setDate(SECOND_VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task updatedTask \u003d tasks.getTask(VALID_TASK_ID);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(editedTask, updatedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if task to be edited is null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasks.setTask(tasks.getTask(VALID_TASK_ID), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if edited task is null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setDate(SECOND_VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasks.setTask(null, editedTask));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask_taskToEditNotFound_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskNotInList \u003d getSecondSampleCompletedTask();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d getSecondSampleCompletedTask();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setDate(SECOND_VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e tasks.setTask(taskNotInList, editedTask));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_CUSTOMER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_DRIVER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_EVENT_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.SECOND_VALID_TASK_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_CUSTOMER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_DRIVER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_EVENT_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_LOCAL_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.VALID_TASK_ID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getCompleteTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getFirstSampleCompletedTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.testutil.SampleEntity.getUnassignedTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.exceptions.TaskException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //featureUnderTest_testScenario_expectedBehavior()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void isValidId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //isValidId should only work for number and more than 0."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String number \u003d \"3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertTrue(Task.isValidId(number));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String zero \u003d \"0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(Task.isValidId(zero));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String strWithLetters \u003d \"3d\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(Task.isValidId(strWithLetters));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String strWithSpace \u003d \"    \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(Task.isValidId(strWithSpace));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String nullValue \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertFalse(Task.isValidId(nullValue));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDriver() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d getUnassignedTask(VALID_TASK_ID, VALID_DESCRIPTION, VALID_LOCAL_DATE, VALID_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setDriver(Optional.of(VALID_DRIVER));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(VALID_DRIVER, newTask.getDriver().get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setEventTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d getUnassignedTask(VALID_TASK_ID, VALID_DESCRIPTION, VALID_LOCAL_DATE, VALID_CUSTOMER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setEventTime(Optional.of(VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(VALID_EVENT_TIME, newTask.getEventTime().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task expectedTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToCompare \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(expectedTask, taskToCompare);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different task id -\u003e false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherTaskId \u003d getCompleteTask(SECOND_VALID_TASK_ID, VALID_DESCRIPTION, VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_CUSTOMER, VALID_DRIVER, VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherTaskId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different description -\u003e false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherDescription \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskWithAnotherDescription.setDescription(SECOND_VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherDescription);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different local date -\u003e false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherDate \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskWithAnotherDate.setDate(SECOND_VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different customer -\u003e false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherCustomer \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskWithAnotherCustomer.setCustomer(SECOND_VALID_CUSTOMER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherCustomer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different driver -\u003e false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherDriver \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskWithAnotherDriver.setDriver(Optional.of(SECOND_VALID_DRIVER));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherDriver);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //test different event time -\u003e false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskWithAnotherEventTime \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskWithAnotherEventTime.setEventTime(Optional.of(SECOND_VALID_EVENT_TIME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotEquals(expectedTask, taskWithAnotherEventTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setStatus_noChangeInStatus_taskExceptionThrown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task sampleTask \u003d getFirstSampleCompletedTask();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertThrows(TaskException.class, () -\u003e sampleTask.setStatus(TaskStatus.COMPLETED));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSampleCentralManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManagerStorage centralManagerStorage \u003d new JsonCentralManagerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        storageManager \u003d new StorageManager(centralManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void centralManagerReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManager original \u003d getSampleCentralManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        storageManager.saveManager(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        CentralManager retrieved \u003d storageManager.readManager().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void getManagerFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertNotNull(storageManager.getManagerFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code Task}\u0027s details"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setDate(task.getDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setCustomer(task.getCustomer().getId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e optionalDriver \u003d task.getDriver();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        optionalDriver.ifPresent(driver -\u003e descriptor.setDriver(driver.getId()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e optionalEventTime \u003d task.getEventTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        optionalEventTime.ifPresent(eventTime -\u003e descriptor.setEventTime(eventTime));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskDescriptorBuilder changeDescriptionTo(Description description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setDescription(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Sets the {@code Customer} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskDescriptorBuilder changeCustomerTo(int customerId) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setCustomer(customerId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Sets the {@code LocalDate} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskDescriptorBuilder changeDateTo(LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        descriptor.setDate(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SampleEntity.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.GlobalClock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.CustomerManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.DriverManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.storage.CentralManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A utility class containing sample {@link Task} details to be used for testing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class SampleEntity {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final LocalDate VALID_DAY_BEFORE_TODAY \u003d GlobalClock.getStaticDate().minusDays(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final LocalDate VALID_TODAY_DATE \u003d GlobalClock.getStaticDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final LocalDate VALID_DAY_AFTER_TODAY \u003d GlobalClock.getStaticDate().plusDays(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final int VALID_TASK_ID \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Description VALID_DESCRIPTION \u003d new Description(\"20 frozen boxes of Red groupers\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final LocalDate VALID_LOCAL_DATE \u003d GlobalClock.getStaticDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final EventTime VALID_EVENT_TIME \u003d EventTime.parse(\"1000 - 1230\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final int SECOND_VALID_TASK_ID \u003d 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Description SECOND_VALID_DESCRIPTION \u003d new Description(\"1 cupboard\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final LocalDate SECOND_VALID_LOCAL_DATE \u003d Task.getDateFromString(\"13/11/2019\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final EventTime SECOND_VALID_EVENT_TIME \u003d EventTime.parse(\"1200 - 1430\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final int THIRD_VALID_TASK_ID \u003d 3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Description THIRD_VALID_DESCRIPTION \u003d new Description(\"10 boxes of Blood Oranges\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final LocalDate THIRD_VALID_LOCAL_DATE \u003d GlobalClock.getStaticDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final int FOURTH_VALID_TASK_ID \u003d 4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Description FOURTH_VALID_DESCRIPTION \u003d new Description(\"20 Hilti Drills\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final LocalDate FOURTH_VALID_LOCAL_DATE \u003d Task.getDateFromString(\"14/11/2019\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final EventTime FOURTH_VALID_EVENT_TIME \u003d EventTime.parse(\"1100 - 1200\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Customer VALID_CUSTOMER \u003d new Customer(1, new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Email(\"alexyeoh@gmail.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Customer SECOND_VALID_CUSTOMER \u003d new Customer(2, new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Phone(\"99272758\"), new Email(\"berniceyu@hotmail.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Customer FOURTH_VALID_CUSTOMER \u003d new Customer(4, new Name(\"David Li\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Phone(\"91031282\"), new Email(\"lidavid@hotmail.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Please use getFirstSampleDriver() / getSecondSampleDriver() instead."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Driver contains mutable elements, so a inappropriately designed test case may"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * contaminate the driver, despite it being static and final."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Driver VALID_DRIVER \u003d getFirstSampleDriver();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Driver SECOND_VALID_DRIVER \u003d getSecondSampleDriver();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds a fresh Driver."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return a fresh driver."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Driver getFirstSampleDriver() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new Driver(1, new Name(\"Aloysius Chan\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Phone(\"92837163\"), new Email(\"aloysius@gmail.com\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Address(\"Blk 123 Bukit Panjang Street 10, #11-04\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Driver getSecondSampleDriver() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new Driver(2, new Name(\"Chloe Low\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Phone(\"93771823\"), new Email(\"lidavid@hotmail.com\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Address(\"Blk 357 Joo Seng Road #07-01 OLIVINE BUILDING, 368357\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Driver getFourthSampleDriver() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Driver(4, new Name(\"Russell Lim Wan Bo\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Phone(\"82273613\"), new Email(\"wanbo@hotmail.com\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Address(\"Blk 305 Lorong 19 Sennett Street 10, #13-01\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Task getUnassignedTask(int taskId, Description description, LocalDate date, Customer customer) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task t \u003d new Task(taskId, description, date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "        t.setCustomer(customer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Gets a sample on going task. The date will always be set in a fixed today date so that"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * we can populate the driver today schedule."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getOnGoingTask(int taskId, Description description, Customer customer,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                      Driver driver, EventTime eventTime) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d new Task(taskId, description, GlobalClock.getStaticDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setCustomer(customer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setDriver(Optional.of(driver));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setEventTime(Optional.of(eventTime));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //populate driver schedule"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driver.addToSchedule(eventTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getCompleteTask(int taskId, Description description, LocalDate date, Customer customer,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                       Driver driver, EventTime eventTime) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d new Task(taskId, description, date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setCustomer(customer);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setDriver(Optional.of(driver));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setEventTime(Optional.of(eventTime));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        newTask.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getFourthSampleOnGoingTask() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getOnGoingTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                FOURTH_VALID_CUSTOMER, getFourthSampleDriver(), FOURTH_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getFirstSampleCompletedTask() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getCompleteTask(VALID_TASK_ID, VALID_DESCRIPTION, VALID_LOCAL_DATE, VALID_CUSTOMER,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                VALID_DRIVER, VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getSecondSampleCompletedTask() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getCompleteTask(SECOND_VALID_TASK_ID, SECOND_VALID_DESCRIPTION, SECOND_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                SECOND_VALID_CUSTOMER, SECOND_VALID_DRIVER, SECOND_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Task getFourthSampleCompletedTask() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getCompleteTask(FOURTH_VALID_TASK_ID, FOURTH_VALID_DESCRIPTION, FOURTH_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                FOURTH_VALID_CUSTOMER, getFourthSampleDriver(), FOURTH_VALID_EVENT_TIME);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns a typical Central Manager for testing. Everything inside is a new object. This is the Deliveria"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * equivalent to the {@code getSamplesAddressbook}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * It includes: 2 drivers, 2 customer and 2 task. One of the task is scheduled for \"today\" - the static date"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * defined in GlobalClock, the other is scheduled for some day in the future. Both has no driver or EventTime"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * assigned."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return a typical central manager"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static CentralManager getSampleCentralManager() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "        CustomerManager customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "        customerManager.addPerson(VALID_CUSTOMER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "        customerManager.addPerson(SECOND_VALID_CUSTOMER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": "        DriverManager driverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "        driverManager.addPerson(getFirstSampleDriver());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "        driverManager.addPerson(getSecondSampleDriver());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "        taskManager.addTask(getUnassignedTask(VALID_TASK_ID, VALID_DESCRIPTION, VALID_LOCAL_DATE, VALID_CUSTOMER));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "        taskManager.addTask(getUnassignedTask(SECOND_VALID_TASK_ID, SECOND_VALID_DESCRIPTION, SECOND_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": "                SECOND_VALID_CUSTOMER));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": "        taskManager.addTask(getUnassignedTask(THIRD_VALID_TASK_ID, THIRD_VALID_DESCRIPTION, THIRD_VALID_LOCAL_DATE,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": "                SECOND_VALID_CUSTOMER));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CentralManager(customerManager, driverManager, taskManager, new IdManager("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "                SECOND_VALID_TASK_ID, SECOND_VALID_CUSTOMER.getId(), SECOND_VALID_DRIVER.getId()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static Model getSampleFreshModel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new ModelManager(SampleEntity.getSampleCentralManager(), new UserPrefs());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 118,
      "tysng": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EntityManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static EntityManager\u003cPerson\u003e getTypicalPersonEntityManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManager\u003cPerson\u003e ab \u003d new EntityManager\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 13,
      "-": 75
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 6
    }
  }
]
