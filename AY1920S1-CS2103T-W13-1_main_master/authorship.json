[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "\u003d ModuleBook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "Have you ever felt the urge to get organized but don\u0027t know how? ModuleBook is your one-stop destination to keep track and plan out your tasks and deadlines!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-W13-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-W13-1/main\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W13-1/main/badge.svg?branch\u003dmaster[\"Coverage Status\", link\u003d\"https://coveralls.io/github/AY1920S1-CS2103T-W13-1/main?branch\u003dmaster\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "* ModuleBook is a module planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "* ModuleBook helps to track deadlines and tasks, sends reminders, as well as information on modules to help students plan their timetables."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "* Our target audience are currently NUS computing students, but we intend to expand our scope in future versions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bitterg0d"
        },
        "content": "* We would like to acknowledge the original source of the code, AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* We would also like to acknowledge https://nusmods.com[\"NUSmods\"] for providing sample module data from NUS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "bitterg0d": 7,
      "geshuming": 5,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "mainClassName \u003d \u0027seedu.module.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    implementation \u0027org.apache.commons:commons-text:1.8\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027commons-validator\u0027, name: \u0027commons-validator\u0027, version: \u00271.4.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    archiveName \u003d \u0027modulebook.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geshuming"
        },
        "content": "task extrachecks(type: Exec) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    commandLine \u0027bash\u0027, \u0027./config/travis/run-checks.sh\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "tasks.check {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    dependsOn extrachecks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u0027site-name\u0027: \u0027ModuleBook\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W13-1/main\u0027,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "geshuming": 9,
      "alexwxh": 2,
      "-": 150,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBook was developed by the https://ay1920s1-cs2103t-w13-1.github.io/main/[CS2103T-W13] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Ge Shuming"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::geshuming.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "{empty}[https://github.com/geshuming[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Responsibilities: Storage design"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Wang Rong Shirley"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::bitterg0d.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "{empty}[https://github.com/bitterg0d[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Responsibilities: GUI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Murugesan Karthika"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::kzrthikz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "{empty}[https://github.com/Kzrthikz[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Responsibilities: Deadline Manager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Alex Wu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::alexwxh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "{empty}[https://github.com/alexwxh[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Responsibilities: Deadline Manager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Guo Zili"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::cowsaysbaa.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "{empty}[https://github.com/CowSaysBaa[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Responsibilities: Parser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 1,
      "-": 32,
      "CowSaysBaa": 23
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d ModuleBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "geshuming": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d ModuleBook - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "By: `Team AY1920S1-W13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `add CS2103T`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".Component interactions for `add CS2103T` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".  `Logic` uses the `ModuleBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"add CS2103T\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".Interactions Inside the Logic Component for the `Add CS2103T` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "NOTE: The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* stores the ModuleBook data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModule\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* can save the `TrackedModule` data in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* can read the `ArchivedModule` data from json format."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Classes used by multiple components are in the `seedu.module.commons` package."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geshuming"
        },
        "content": "// tag::moduleview[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Module View Feature"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geshuming"
        },
        "content": "The module view feature allows users to view a module to access extra information about the module. The user can view (and unview) a module using the `view` (and `back`) commands."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geshuming"
        },
        "content": "The module view feature is facilitated by `displayedModule` in `ModelManager`. The following describes how the `displayedModule` is modified and read to the `Ui`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". The user enters a view command in the `Ui`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". `LogicManager` parses the user input, constructs and executes the `ViewCommand`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". The `ViewCommand` attempts to find the matching module from the list of Tracked Modules, else it attempts to find the matching module from the list of Archived Modules, else it throws an exception."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". The `ViewCommand` sets the `displayedModule` in the `Model` and returns the `CommandResult` to the `LogicManager`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". The `LogicManager` returns the `CommandResult` to the `Ui`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geshuming"
        },
        "content": ". The `Ui` gets the `displayedModule` from `LogicManager` and updates the Ui to display the module."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "geshuming"
        },
        "content": "The following sequence diagram shows how the module view feature is executed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".Module View Sequence Diagram"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geshuming"
        },
        "content": "image::ModuleViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geshuming"
        },
        "content": "The `BackCommand` mostly follows the same sequence as described above, except that it does not need to find any module, and sets the displayed module to `null`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geshuming"
        },
        "content": "The following sequence diagram shows how the `ViewCommand` attempts to find the module from the `Model`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".Reference Diagram for finding a matching module"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geshuming"
        },
        "content": "image::ModuleViewSequenceDiagram_FindModule.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "geshuming"
        },
        "content": "`TrackedModule` composes of an `ArchivedModule`. If a `TrackedModule` is found, it is guaranteed the corresponding `ArchivedModule` can be found."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updating the Ui"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Current Implementation**: New field in the `CommandResult` that the Ui will check to determine if it needs to update."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Simple and easy to control what command updates the Ui."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* More difficult to maintain over the course of the project. New Ui elements require new fields to update the Ui."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Alternate Implementation**: Every command updates the Ui."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Maintainance free."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Potentially inefficient."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Possible side effects from certain commands."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geshuming"
        },
        "content": "// end::moduleview[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// tag::searchfitering[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Search filtering feature"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "The search filtering feature Uses different categories of predicates"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "to narrow down the search space of the archived module list. The user is able to able to combine different categories"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "of search to find modules that passes all the user defined filters. This can be achieved through the use of `Predicate`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "which can be chained with additional predicates and applied to a `FilteredList`. This requires additional predicate classes that searches their individual fields"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "for the keywords.:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `ModuleCodeContainsKeywordsPredicate#test()` -- Tests that a `module` module code matches any of the keywords given."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `DescriptionContainsKeywordsPredicate#test()` -- Tests that a `module` description matches the keyword or sentence given."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `PrerequisiteContainsKeywordsPredicate()#test()` -- Tests that a `module` prerequisites matches any of the keywords given."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `PreclusionContainsKeywordsPredicate()#test()` -- Tests that a `module` preclusions matches any of the keywords given."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `SemesterContainsKeywordsPredicate()#test()` -- Tests that a `module` semester matches any of the keywords given."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "The user is able to use any combination of filters and the order of input should not matter. Examples of valid find commands:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `find module\\ cs2` : Should display a list of modules with module code containing \"cs2\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* `find module\\ cs2 prereq\\ cs2040` : Should display a list of modules with module code containing \"cs\" and with prerequisite of \"cs2040\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "The following sequence diagram shows how the find operation wold work:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".Proposed sequence diagram for search filtering."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "image::FindSequenceDiagram.png[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "NOTE: The lifeline for `FindCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "As represented in Fig 9, when a `FindCommandParser` is constructed by `ModuleBookParser#parseCommand`, the `FindCommandParser` would construct a list"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "of `Predicate\u003cmodule\u003e` based on the parsed arguments, which is used to construct a `FindCommand`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "During the execution of `FindCommand#execute()`, each predicate is chained and applied to the `FilteredList`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Finally, a `FilteredList` of `Modules` that passes all of the filters will be displayed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Requirements."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* **Module field requirements:** Information from the `archivedModules.json` would have to be abstracted out"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "as individual fields in the `ArchivedModule` object."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** pros: Added fields can be used for future developments."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** cons: Can potentially slow down `Module` construction and operations due to increased size for each `Module` object."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Incremental development."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* **Adding new search filters:** Developing and integrating new filters."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** pros: Filters can be developed independently and incrementally, filters can be integrated based on priority."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** pros: Can be further adapted to search fields from `Deadline` and `Links`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// end::searchfiltering[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "// tag::deadline[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d Deadline Feature"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Deadline allows users to manage deadline tasks for a module."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Users can add, edit, mark as done or in-progress, tag priority,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "sort and delete deadline tasks."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d Add Deadline"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d 3.3.3.1. Implementation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "The format to add deadline command is as follows:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "...."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deadline 2 a/add d/description t/dateAndTime"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "...."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "The add deadline mechanism is facilitated by `AddDeadlineCommand` and `AddDeadlineCommandParser`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "It takes in the following input from the user: `MODULE_CODE`, `DESCRIPTION`, `DATE_AND_TIME`,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "which will construct individual Deadline object to be added to the deadline list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Given below is an example usage scenario of how add deadline mechanism behaves at each step."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 1. The user executes:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "...."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deadline 2 a/add d/do homework t/2/12/2019 1645"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "...."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 2. `LogicManager` would use `ModuleBookParser#parseCommand()` to parse input from the user."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 3. `ModuleBookParser` would determine which command is being used and creates the respective parser."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "In this case, `DeadlineCommandParser` is being created from the COMMAND.WORD: `deadline` and"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "the user’s input would be passed in as a parameter."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 4. `DeadlineCommandParser` would then determine which action is being used and creates the respective parser."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "In this case, `AddDeadlineCommandParser` is created and user\u0027s input would be parsed in as a ArgumentMultimap parameter."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 5. `AddDeadlineCommandParser` would do a validation check on the user’s input before creating"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "and returning a `AddDeadlineCommand` with `index` and `Deadline` as its attribute."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 6. `LogicManager` would execute `AddDeadlineCommand#execute()`,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "checks whether there is an existing module,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "then adds the `TrackedModule` into the `Model` which is handled by the `ModelManager`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Step 7. `AddDeadlineCommand` would return a `CommandResult`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "to the `LogicManager` which would then be returned back to the user."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "The following sequence diagram shows how the add deadline operation works:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ".Add Deadline Command Sequence Diagram"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "image::AddDeadlineSequenceDiagram.png[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d 3.3.3.2. Design Considerations"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Aspect: Data Structure used to support add command"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "*  Alternative 1(Current choice) : Use of ArrayList to store deadline tasks of each module."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "** Pros: Other commands (eg. edit, sort, delete) can be easily supported"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "by a list operations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "** Pros: One and only one list is created for each TrackedModule."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "** Cons: More difficult to maintain over the course of the project."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "New commands(eg. done, priority) need to edit and maintain the list constantly."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "** Cons: Potential side effects from certain commands."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "// end::deadline[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d Link Management Feature"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "The link management feature allows users to add and manage a set of website links that will be associated with a given module."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "The link management feature is facilitated by the `link` class."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Each `link` object is stored in an `ArrayList\u003cLink\u003e`, which in turn is stored in its corresponding `TrackedModule`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "The link feature currently supports add, delete, edit and launch commands."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "An example usage scenario of an *add link* operation is given below and the behavior of the link management feature is shown."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "1. The user launches the application with an existing save file. `ModuleBook` is initialized with existing `TrackedModule`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "2. The user inputs `link MODULE_INDEX a/add n/LINK_NAME l/LINK_URL` to add a link with name `LINK_NAME`, linked to `LINK_URL` to the `TrackedModule` with the corresponding `MODULE_INDEX`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "3. `LogicManager` receives user input and parses it using `ModuleBookParser#parseCommand()`.  `ModuleBookParser` reads the `COMMAND_WORD` and identifies the input as a `Link` related command and passes the input to `LinkCommandParser`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "4. `LinkCommandParser` determines the `add` action required through the `a/` prefix argument. It then proceeds to pass the relevant input to  `AddLinkCommandParser`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "5. `AddLinkCommandParser` checks for the validity of `LINK_URL` given by the user and creates the relevant `Link` and `AddLinkCommand` objects."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "6. `AddLinkCommand` calls `Model#get(MODULE_INDEX)` to find the required module. If it does not exist or is not currently tracked, `AddLinkCommand` throws a `CommandException`. Otherwise, it then proceeds to call `TrackedModule#hasLinkTitle(LINK_NAME)` to check for an existing `Link` object with the same `LINK_NAME`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "7. If such a `Link` object exists, `AddLinkCommand` aborts and throws a `CommandException`. Otherwise, the created `Link` will be added to the specified `TrackedModule`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "8. If the operation is successful, a `CommandResult` with the success message will be returned."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ".Sequence diagram for add link operation"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "image::AddLinkCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ".Reference of add link to module function from sequence diagram shown above"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "image::AddLinkCommandSequenceDiagramExtension.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Aspect: Data structure used for link management"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* Alternative 1 (current choice): All `TrackedModule` maintain a `ArrayList\u003cLink\u003e`. Adding `Link` objects will add to this `ArrayList`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "** Pros: Easy to implement and edit for beginner programmers."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "** Cons: Accessing and editing existing `Link` might be less efficient. If number of `Link` objects maintained increases, `ArrayList` may not be optimal."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* Alternative 2: Use `HashSet\u003cLink\u003e` to maintain `Link` in each `TrackedModule`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "** Pros: Reduces access time, since `Link` objects can be obtained by giving `LINK_TITLE`, rather than searching the list linearly for a matching object."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "** Cons: Difficult to add features. Future implmentations may add a `Priority` feature to `Link` objects. `HashSet` does not support any form of sorting and thus may pose a problem."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* is a student of National University of Singapore (NUS)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* prefer desktop apps over web apps"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "geshuming"
        },
        "content": "*Value proposition*: manage modules faster and with less hassle than the traditional web apps deployed by the institution"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |user |track a module I\u0027m currently taking |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |user |untrack a module |remove entries that I no longer need"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |user |find a module |locate details of modules that NUS provides"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |curious student |view a module\u0027s details |check out if I want to take the module"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |busy student |manage deadlines |keep track of my assignments and tasks"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* * *` |organized student |manage my grades |know roughly how well I\u0027m doing in the module"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |new student |schedule my modules |plan how to approach my future focus areas"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |graduating student |check what modules I need to complete |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |computing student |plan my focus area modules |choose a specialization"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |competitive student |calculate my GPA |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |busy student |prioritize certain modules (and their deadlines) |manage my time better"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |organized student |manage files related to a module |add and tag files"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`* *` |student |catalog past modules |access the content conveniently"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`*` |student |generate a sample module planner |plan my modules"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "geshuming"
        },
        "content": "|`*` |hardworking student |access past exam papers |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "geshuming"
        },
        "content": "(For all use cases below, the *System* is the `ModuleBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Use case: Find and Track a Module"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "geshuming"
        },
        "content": "1.  User requests to find a module with incomplete keyword (e.g. \u0027CS2\u0027)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "geshuming"
        },
        "content": "2.  ModuleBook shows a list of modules matching the keyword (e.g. \u0027CS2030, CS2040, CS2100, CS2101, etc.\u0027)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "geshuming"
        },
        "content": "3.  User requests to track a module"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "geshuming"
        },
        "content": "4.  ModuleBook tracks the module"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "geshuming"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Use case: Add a deadline for a tracked module"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "geshuming"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "geshuming"
        },
        "content": "1.  User requests to view the specific tracked module"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "geshuming"
        },
        "content": "2.  ModuleBook displays the module details"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "geshuming"
        },
        "content": "3.  User requests to add a deadline"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "geshuming"
        },
        "content": "4.  ModuleBook adds the deadline"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "geshuming"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "geshuming"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* 2a. The module is not currently tracked"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "geshuming"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "geshuming"
        },
        "content": "** 2a1. User requests to track the module"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "geshuming"
        },
        "content": "** 2a2. The module is now tracked"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Use case resumes at step 3"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "geshuming"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* 3a. ModuleBook requests for a description"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "geshuming"
        },
        "content": "** 3a1. User provides a description"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "geshuming"
        },
        "content": "** 3a2. ModuleBook requests for a datetime"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "geshuming"
        },
        "content": "** 3a3. User provides a datetime"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LumiNUS"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Good deadline system"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Working file management system"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* A lot of GUI navigation involved"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Cannot add user-generated deadlines"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Cannot view past module details or content"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "geshuming"
        },
        "content": "NUSMods"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Easy to use and powerful module search feature"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Modules come with schedules for tutorials, lectures, etc"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Not applicable for managing modules (such as deadlines, grades)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003d\u003d\u003d Deleting a module"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ". Deleting a module while all modules are listed"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".. Prerequisites: List all modules using the `list` command. Multiple modules in the list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".. Test case: `delete cs2103t` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "   Expected: Module with module code cs2103t is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ".. Test case: `delete INVALID_MODULE_CODE` +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "   Expected: No module is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "geshuming": 122,
      "Kzrthikz": 60,
      "alexwxh": 51,
      "-": 318,
      "CowSaysBaa": 60
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d ModuleBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "geshuming": 2,
      "-": 121
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all modules who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "The above method can be used to get a printable string representing a bunch of module details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "-": 214,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d ModuleBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "e.g. `seedu.module.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "e.g. `seedu.module.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "e.g. `seedu.module.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "geshuming": 5,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d ModuleBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "By: `AY1920S1-Team W13-1`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBook is a standalone application that tracks and manages modules from National University of Singapore (NUS). The application contains many features useful for module management, such as deadline tracking, lesson scheduling and grade calculator."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBook is for NUS students who *want a desktop app for managing modules*. More importantly, ModuleBook is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ModuleBook can manage your tasks more efficiently than traditional GUI apps. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "//.  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* *`list`* : lists all modules."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* **`add`**`cs2103t` : adds a module with module code `cs2103t` to be tracked by ModuleBook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* **`delete`**`cs2103t` : deletes tracked module with module code CS2103T from the list of tracked module if the module exists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "* **`deadline`**`cs2103t`**`d/complete UG and DG`**`t/time` : adds deadline to module with code \u0027cs2103t\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "See \u003c\u003cGlossary\u003e\u003e for more information on terms such as `Tracked` Module and `Archived` Module."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add MODULE_CODE`, `MODULE_CODE` is a parameter which can be used as `add CS1101S`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Items in square brackets are optional e.g `MODULE_CODE [MODULE_TITLE]` can be used as `CS1231 discrete structures`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "//* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "//* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Exiting the program: `exit`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Listing all tracked modules : `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Shows a list of all current tracked modules. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Viewing a module: `view`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Views a module and enters the module view. Can be a tracked module or an archived module."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Format: `view \u003cMODULE_CODE\u003e`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Example: `view cs1231`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Return from module view: `back`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Returns from the module view."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Format: `back`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Finding an archived module: `find`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Find archived modules with the the given prefix and keyword. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Format: `find PREFIX\\ KEYWORD ...`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "It is possible to use any number or combination of filters. Prefixes not present will not be considered in the search."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Prefixes: (case sensitive)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `all\\` : List all the modules. *Overrides* all other prefixes."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find mod\\ cs all\\` all\\ will override mod\\ and list all the modules."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `mod\\` : Find all modules with *module code* that contains the given *keyword(s)*."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find mod\\ cs ma st` will list all modules with module code containing `cs` or `ma` or `st`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `title\\` : Find all modules with *title* that contains the given *sentence*."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find title\\ software engineering` will list all modules with titles containing `\"software engineering\"`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `desc\\` : Find all modules with *description* that contains the given *sentence*."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find desc\\ software engineering` will list all modules with description containing `\"software engineering\"`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `prereq\\` : Find all modules with *prerequisites* that match the given *keyword(s)*."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find prereq\\ cs2030 cs2040` will list all modules with prerequisite of `cs2030` or `cs2040`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `preclu\\` : Find all modules with *preclusion* that match the given *keyword(s)*."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find preclu\\ cs2030 cs2040` will list all modules with preclusion of `cs2030` or `cs2040`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** `sem\\` : Find all modules offered in a particular sem 1 - 4. (Sem 3 and 4 are special terms 1 and 2)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "*** Example: `find sem\\ 1 3` will list all modules offered in semester 1 or special term 1."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* The prefixes can be used together in any order to filter modules that passes all the search requirements."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** Example: `find mod\\ cs2 cs3 desc\\ software engineering sem\\ 1` will show all modules with module code containing `cs2`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "or `cs3` with description containing `\"software engineering\"` offered in semester 1."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* The keywords are case insensitive. e.g `cs2103t` will match `CS2103T`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Sentences used in title\\ and desc\\ are tolerant of minor spelling mistakes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** Example: `find desc\\ enginering` will display results similar to `find desc\\ engineering`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Search is performed using string matching, which can result results being shown by searching random keywords."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Invalid prefixes and keywords before a valid prefix will be ignored."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "** Eg: `find INVALID\\ invalidKeyword mod\\ cs` the `INVALID\\ invalidKeyword` will be ignored."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "title\\ and desc\\ will seach a single sentence. mod\\, prereq\\, preclu\\ and sem\\ will search for all modules with any of the keywords without checking for spelling errors."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Modules are imported from NUSMods database."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d Adding a module: `add`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Adds a module to be tracked. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `add MODULE_CODE`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* The add is case insensitive. e.g `cs2103t` will match `CS2103T`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Only module code is searched for module to be added."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "* Only full words will be matched e.g. `cs2103` will not match `cs2103t`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Modules are imported from NUSMods database."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* `add cs2103t`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Deleting a module: `delete`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Untracks a module. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Format: `delete MODULE_CODE`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* The delete is case insensitive. e.g `cs2103t` will match `CS2103T`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Only module code is searched for module to be added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* Only full words will be matched e.g. `cs2103` will not match `cs2103t`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* `delete cs2103t`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d Manage deadline tasks: `deadline`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `add`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/add d/DESCRIPTION t/TIME p/PRIORITY`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Adds deadline task consisting of description, time and priority tag to the respective module."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "If deadline list is empty, creates a list. Else, adds to the end of the list. Priority tags can be"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "`HIGH`, `MEDIUM` OR `LOW`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 1 a/add d/tutorial 1 t/22/10/2019 2359 p/HIGH`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `edit`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "1.Edit Description"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/edit task/TASK_NUMBER_IN_LIST d/NEW_DESCRIPTION`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Edits description from the deadline task numbered in deadline list for the respective module."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 2 a/edit task/2 d/finish increments`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "2.Edit Time"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/edit task/TASK_NUMBER_IN_LIST t/NEW_TIME`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Edits time from the deadline task numbered in deadline list for the respective module."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 3 a/edit task/2 t/29/10/2018 2359`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `done`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/done task/TASK_NUMBER_IN_LIST`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Marks the deadline task numbered in deadline list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "as *done* with a tick on the checkbox for the respective module."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 1 a/done task/2`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `in Progress`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/inProgress task/TASK_NUMBER_IN_LIST`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Marks the deadline task numbered in deadline list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "as *in-progress* with a dash on the checkbox for the respective module."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 1 a/inProgress task/1`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `sort`(Coming in mid V1.4)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "1.Sort by Time"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/sort by/time`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Sorts deadline tasks according to time, latest deadline at the top and later ones below."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 1 a/sort by/time`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "2.Sort by Priority"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/sort by/priority`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Sorts deadline tasks according to priority, highest priority at the top, followed"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "by medium priority and lastly low priority at the bottom."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 2 a/sort by/priority`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u003d\u003d\u003d\u003d `delete`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Format: `deadline MODULE_LIST_NUM a/delete task/TASK_NUMBER_IN_LIST`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Deletes deadline task numbered from the respective module."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Example: `deadline 1 a/delete task/2`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d Manage links in modules: `link`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Link commands are only available when viewing a module and only valid on currently displayed tracked modules."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d `add`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `link add n/LINK_NAME l/LINK_URL`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Adds link provided to the respective module."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Example: `link add n/course website l/https://www.comp.nus.edu.sg/~cs1231/`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d `edit`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `link edit n/LINK_NAME [nn/EDITED_NAME nl/EDITED_LINK]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Edits the link identified by its current title for the respective module."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Example: `link edit n/course website nn/module website`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d `go`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `link go n/LINK_NAME`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Launches the link in the user system\u0027s default browser."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Example: `link go n/module website`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d `delete`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `link delete n/LINK_NAME`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Deletes the link with the given link title in the respective module."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Example: `link delete n/module website`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d\u003d `mark`/`unmark`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Format: `link mark n/LINK_NAME`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Marks/unmarks the link with the given link title in the respective module"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Example: `link mark n/module website`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBook data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Grade Manager `[Coming Soon]`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Tracks grades inputted by the user."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d File Manager `[Coming in v2.0]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Users can add files related to the module, and open them."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d CAP Calculator `[Coming in v2.0]`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Calculates the cumulative GPA of all tracked modules."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003d\u003d\u003d List View"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "* *View* `view MODULE_CODE` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "e.g. `view cs2100`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* *Back* `back`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* *Find* : `find PREFIx\\ KEYWORD(s) ...` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "e.g. `find mod\\ cs2 cs3 desc\\ software engineering prereq\\ cs2030 sem\\ 1 2`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* *Add* `add MODULE_CODE` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "geshuming"
        },
        "content": "e.g. `add cs2101`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "geshuming"
        },
        "content": "* *Delete* : `delete MODULE_CODE` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "geshuming"
        },
        "content": "e.g. `delete cs2101`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Common Application terms"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Home view** - The state of the application that displays the home page in the main panel."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Module view** - The state of the application that displays the specified module in the main panel."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003d\u003d\u003d Common Module terms"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Archived** - A module that the institution provides. Can be viewed and tracked."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "geshuming"
        },
        "content": "**Tracked** - A module that is tracked. References an archived module. Can be viewed."
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 73,
      "geshuming": 46,
      "alexwxh": 70,
      "-": 91,
      "CowSaysBaa": 42
    }
  },
  {
    "path": "docs/diagrams/AddDeadlineSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \":ModuleBookParser\" as ModuleBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \":AddDeadlineCommandParser\" as AddDeadlineCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \"a:AddDeadlineCommand\" as AddDeadlineCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "skinparam ParticipantFontSize 16"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "skinparam defaultFontSize 16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "[-\u003e LogicManager : execute(\"deadline 2 a/add d/... t/...\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "LogicManager -\u003e ModuleBookParser : parseCommand(\"deadline 2 a/add d/... t/...\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate ModuleBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "create AddDeadlineCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "ModuleBookParser -\u003e AddDeadlineCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate AddDeadlineCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommandParser --\u003e ModuleBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate AddDeadlineCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "ModuleBookParser -\u003e AddDeadlineCommandParser : parse(\"deadline 2 a/add d/... t/...\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate AddDeadlineCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "create AddDeadlineCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommandParser -\u003e AddDeadlineCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate AddDeadlineCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand --\u003e AddDeadlineCommandParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate AddDeadlineCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommandParser --\u003e ModuleBookParser : a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate AddDeadlineCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommandParser -[hidden]-\u003e ModuleBookParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "destroy AddDeadlineCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "ModuleBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate ModuleBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "LogicManager -\u003e AddDeadlineCommand : execute()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate AddDeadlineCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand -\u003e Model : updateFilteredModuleList(pred)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Model --\u003e AddDeadlineCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand -\u003e Model : addDeadline(Deadline)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Model --\u003e AddDeadlineCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand -\u003e Model : displayTrackedList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "Model --\u003e AddDeadlineCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "CommandResult --\u003e AddDeadlineCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "AddDeadlineCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate AddDeadlineCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 84
    }
  },
  {
    "path": "docs/diagrams/AddLinkCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":ModuleBookParser\" as ModuleBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":LinkCommandParser\" as LinkCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":AddLinkCommandParser\" as AddLinkCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \"a:AddLinkCommand\" as AddLinkCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \"link:Link\" as Link MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[-\u003e LogicManager : execute(USER_INPUT)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LogicManager -\u003e ModuleBookParser : parseCommand(\"link ...\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate ModuleBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "create LinkCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBookParser -\u003e LinkCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate LinkCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LinkCommandParser --\u003e ModuleBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate LinkCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBookParser -\u003e LinkCommandParser : parse(\"MODULE_INDEX ... \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate LinkCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "create AddLinkCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LinkCommandParser -\u003e AddLinkCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate AddLinkCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommand --\u003e LinkCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate AddLinkCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LinkCommandParser -\u003e AddLinkCommandParser : parse(\"MODULE_INDEX n/LINK_NAME ...\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "create Link"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommandParser -\u003e Link : Link(LINK_NAME, LINK_URL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate Link"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "Link --\u003e AddLinkCommandParser : link"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate Link"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "create AddLinkCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommandParser -\u003e AddLinkCommand : AddLinkCommand(INDEX, link)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate AddLinkCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommand --\u003e AddLinkCommandParser : a"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate AddLinkCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommandParser --\u003e LinkCommandParser: a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate AddLinkCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommandParser -[hidden]-\u003e LinkCommandParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "destroy AddLinkCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LinkCommandParser --\u003e ModuleBookParser : a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate LinkCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LinkCommandParser -[hidden]-\u003e ModuleBookParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "destroy LinkCommandParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ModuleBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate ModuleBookParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "LogicManager -\u003e AddLinkCommand : execute()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate AddLinkCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "ref over AddLinkCommand, Model : add link to module"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "CommandResult --\u003e AddLinkCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "AddLinkCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate AddLinkCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 88
    }
  },
  {
    "path": "docs/diagrams/AddLinkCommandSequenceDiagramExtension.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "participant \"t:TrackedModule\" as TrackedModule MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[-\u003e Model : get(MODULE_INDEX)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[\u003c-- Model : t"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[-\u003e TrackedModule : addLink(link)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate TrackedModule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[\u003c-- TrackedModule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate TrackedModule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[-\u003e Model : setDisplayedModule(t)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "[\u003c--Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 27
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":ModuleBookParser\" as ModuleBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[-\u003e LogicManager : execute(\"add CS2103T\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "LogicManager -\u003e ModuleBookParser : parseCommand(\"add CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate ModuleBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommandParser --\u003e ModuleBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser -\u003e AddCommandParser : parse(\"CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommandParser --\u003e ModuleBookParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommandParser -[hidden]-\u003e ModuleBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate ModuleBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand -\u003e Model : updateFilteredArchivedModuleList(pred)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand -\u003e Model : addModule(CS2103T)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand -\u003e Model : displayTrackedList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 81
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"add CS2103T\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"add CS2103T\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : updateFilteredArchivedModuleList(CS2103T)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "model --[MODEL_COLOR]\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addModule(CS2103T)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "model --[MODEL_COLOR]\u003e logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : displayTrackedList()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveModuleBook(moduleBook)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "CowSaysBaa": 16
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":ModuleBookParser\" as ModuleBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager -\u003e ModuleBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate ModuleBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "DeleteCommandParser --\u003e ModuleBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "DeleteCommandParser --\u003e ModuleBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ModuleBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate ModuleBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "DeleteCommand -\u003e Model : deleteModule(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "geshuming": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":ModuleBookParser\" as ModuleBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "participant \":XYZContainsKeywordsPredicate\" as XYZContainsKeywordsPredicate MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[-\u003e LogicManager : execute(\"find module\\cs2 prereq\\cs2103t\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "LogicManager -\u003e ModuleBookParser : parseCommand(\"find module\\cs2 prereq\\cs2103t\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate ModuleBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommandParser --\u003e ModuleBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser -\u003e FindCommandParser : parse(\"find module\\cs2 prereq\\cs2103t\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "loop until all keywords parsed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create XYZContainsKeywordsPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommandParser -\u003e XYZContainsKeywordsPredicate: construct predicate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate XYZContainsKeywordsPredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "XYZContainsKeywordsPredicate --\u003e FindCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate XYZContainsKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommandParser --\u003e ModuleBookParser : f"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommandParser -[hidden]-\u003e ModuleBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "ModuleBookParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate ModuleBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "loop until all predicates applied"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommand -\u003e Model : updateFilteredArchivedModuleList(pred)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "end"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommand -\u003e Model : displayTrackedList()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 86
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Interface ReadOnlyModuleBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class ModuleBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class ReadOnlyModuleBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Package Module {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class ArchivedModule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class ArchivedModuleList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class TrackedModule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class TrackedModuleList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Interface Module \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBook .right.|\u003e ReadOnlyModuleBook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModelManager o-down-\u003e \"1\" ModuleBook"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "UserPrefs .right.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBook *-right-\u003e \"1\" TrackedModuleList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModuleBook *-down-\u003e \"1\" ArchivedModuleList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "TrackedModuleList o-down-\u003e \"*\" TrackedModule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ArchivedModuleList o-down-\u003e \"*\" ArchivedModule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "TrackedModule *-right-\u003e \"1\" ArchivedModule : references \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "TrackedModule .down.|\u003e Module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ArchivedModule .down.|\u003e Module"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ModelManager o-down-\u003e\"*\" Module : observes \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "geshuming": 25,
      "-": 22
    }
  },
  {
    "path": "docs/diagrams/ModuleViewSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "actor user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":ViewCommandParser\" as ViewCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":ViewCommand\" as ViewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "user -\u003e MainWindow : \"view cs2103t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "MainWindow -\u003e LogicManager : executeCommand(\"view cs2103t\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager -\u003e ViewCommandParser ** : parse(\"view cs2103t\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommandParser -\u003e ViewCommand **"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommand --\u003e ViewCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommandParser --\u003e LogicManager : ViewCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "destroy ViewCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager -\u003e ViewCommand : execute()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ref over ViewCommand, Model : find matching module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommand -\u003e Model : setDisplayedModule(m)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Model --\u003e ViewCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommand --\u003e LogicManager : CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate ViewCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "destroy ViewCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager --\u003e MainWindow : CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "MainWindow -\u003e MainWindow : handleShowModule()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "MainWindow -\u003e LogicManager : getDisplayedModule()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager -\u003e Model : getDisplayedModule()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Model --\u003e LogicManager : Module"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "LogicManager --\u003e MainWindow : Module"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "MainWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "MainWindow --\u003e user : updated Ui"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "geshuming": 78
    }
  },
  {
    "path": "docs/diagrams/ModuleViewSequenceDiagram_FindModule.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":ViewCommand\" as ViewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \"tml:TrackedModuleList\" as TrackedModuleList MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "participant \"aml:TrackedModuleList\" as ArchivedModuleList MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate ViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommand -\u003e Model : getFilteredModuleList()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Model --\u003e ViewCommand : tml"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "ViewCommand -\u003e TrackedModuleList : Find matching module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "activate TrackedModuleList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "TrackedModuleList --\u003e ViewCommand : Module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "deactivate TrackedModuleList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "opt module not found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    ViewCommand -\u003e Model : getFilteredArchivedModuleList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Model --\u003e ViewCommand : aml"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    ViewCommand -\u003e ArchivedModuleList : Find matching module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    activate ArchivedModuleList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    ArchivedModuleList --\u003e ViewCommand : Module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    deactivate ArchivedModuleList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "end"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "geshuming": 42
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Package Storage \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Interface ModuleBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class JsonModuleBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class JsonSerializableModule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class JsonSerializableModuleBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class JsonArchivedModuleList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class JsonAdaptedArchivedModule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "HiddenOutside ..\u003e Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "StorageManager o--\u003e ModuleBookStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "JsonModuleBookStorage .left.|\u003e ModuleBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "JsonModuleBookStorage .right.\u003e JsonArchivedModuleList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "JsonModuleBookStorage .down.\u003e JsonSerializableModuleBookStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "JsonSerializableModuleBookStorage .right.\u003e JsonSerializableModule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "JsonArchivedModuleList .down.\u003e JsonAdaptedArchivedModule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "geshuming": 18,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/module/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 2,
      "-": 20,
      "CowSaysBaa": 5
    }
  },
  {
    "path": "src/main/java/seedu/module/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.ModuleBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ModuleBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBookStorage moduleBookStorage \u003d new JsonModuleBookStorage(userPrefs.getModuleBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        storage \u003d new StorageManager(moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s module book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The data from the sample module book will be used instead if {@code storage}\u0027s module book is not found,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * or an empty module book will be used instead if errors occur when reading {@code storage}\u0027s module book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ReadOnlyModuleBook initialData \u003d storage.readModuleBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ModuleBook\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.info(\"Starting ModuleBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Module Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 135,
      "CowSaysBaa": 32
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String LOG_FILE \u003d \"modulebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_INVALID_SEARCH_FIELD \u003d \"The search field cannot be empty.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, TypeReference\u003cT\u003e typeReferenceClass) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return objectMapper.readValue(json, typeReferenceClass);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 12,
      "-": 139,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "src/main/java/seedu/module/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the current displayed list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ObservableList\u003cModule\u003e getDisplayedList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns the Optional active {@code Module} that is being viewed by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Optional\u003cModule\u003e getDisplayedModule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the user prefs\u0027 Module book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 5,
      "-": 35,
      "CowSaysBaa": 12
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.ModuleBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ModuleBookParser moduleBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBookParser \u003d new ModuleBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        Command command \u003d moduleBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            storage.saveModuleBook(model.getModuleBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cModule\u003e getDisplayedList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return model.getDisplayedList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cModule\u003e getDisplayedModule() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return model.getDisplayedModule();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return model.getModuleBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 3,
      "-": 56,
      "CowSaysBaa": 19
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Adds module to be tracked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Module to the ModuleBook. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"module code\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"cs2103\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the module book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"This module is not found within the archive.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final SameModuleCodePredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public AddCommand(SameModuleCodePredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.updateFilteredArchivedModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d model.findArchivedModule(predicate).orElseThrow(()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            -\u003e new CommandException(MESSAGE_MODULE_NOT_FOUND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule toAdd \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 predicate.equals(((AddCommand) other).predicate));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "CowSaysBaa": 63
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Returns from a module-view state (from {@code ViewCommand})."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Effectively does nothing when not in that state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \": Returns from the Module View.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_BACK_COMMAND_SUCCESS \u003d \"Returned to Home Page.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_BACK_COMMAND_NOT_EFFECTIVE \u003d \"Already on Home Page.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (model.getDisplayedModule().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return new CommandResult(MESSAGE_BACK_COMMAND_NOT_EFFECTIVE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setDisplayedModule(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new CommandResult(MESSAGE_BACK_COMMAND_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 34
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Determines if there is a need to update the display of the active module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final boolean showModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showModule, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.showModule \u003d showModule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean isShowModule() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return showModule;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u0026\u0026 showModule \u003d\u003d otherCommandResult.showModule"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showModule, exit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 14,
      "-": 64,
      "CowSaysBaa": 7
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Deletes a Module identified using it\u0027s displayed index from the Module book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \": Deletes the Module identified by the Module code in the displayed Module list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Parameters: MODULE CODE\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted module: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \"This module is not found within the list of tracked modules.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final SameModuleCodePredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public DeleteCommand(SameModuleCodePredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModuleToDelete \u003d model.findTrackedModule(predicate).orElseThrow(()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            -\u003e new CommandException(MESSAGE_MODULE_NOT_FOUND));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.deleteModule(trackedModuleToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, trackedModuleToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 predicate.equals(((DeleteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "-": 28,
      "CowSaysBaa": 20
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Module Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "-": 15,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Finds and lists all modules in Module book ArchivedModuleList with names that contain any of the argument keywords"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * based on keyword predicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all Modules in the archive of all modules with\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \" fields that contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Parameters:[field]\\\\ KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" module\\\\ cs2103 ma1521\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cPredicate\u003cModule\u003e\u003e listOfPredicates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cModule\u003e\u003e listOfPredicates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.listOfPredicates \u003d listOfPredicates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.updateFilteredArchivedModuleList(listOfPredicates.stream().reduce(x -\u003e true, Predicate::and));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.updateFilteredModuleList(listOfPredicates.stream().reduce(x -\u003e true, Predicate::and));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.updateDisplayedList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW, model.getFilteredArchivedModuleList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 listOfPredicates.equals(((FindCommand) other).listOfPredicates)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 2,
      "-": 28,
      "CowSaysBaa": 19
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "-": 18,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Lists all Modules in the Module book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tracked Modules\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "CowSaysBaa": 22
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Views a Module identified by the module code. The viewed module could either be a tracked module"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * or an archived module yet to be tracked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \": Views the Module identified by the module code.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \"Parameters: module code\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2103t\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_VIEW_MODULE_SUCCESS \u003d \"Viewing module: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"This module is not found within the archive.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ViewCommand(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        SameModuleCodePredicate findModulePredicate \u003d new SameModuleCodePredicate(moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.updateFilteredArchivedModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        Module toDisplay \u003d model.findTrackedModule(findModulePredicate)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .map(module -\u003e (Module) module)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .or(() -\u003e model.findArchivedModule(findModulePredicate))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(MESSAGE_MODULE_NOT_FOUND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setDisplayedModule(toDisplay);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_MODULE_SUCCESS, moduleCode),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ViewCommand) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 51,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Adds deadline to a module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class AddDeadlineCommand extends DeadlineCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds  a Deadline task to the Module. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_ACTION + \"add\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_TIME + \"TIME\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_DESCRIPTION + \" tutorial 1 \" + PREFIX_TIME + \"2/2/2019 2359 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_TAG + \" HIGH\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_ADD_DEADLINE_SUCCESS \u003d \"Added deadline to Module: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"Unable to add deadline to module: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public AddDeadlineCommand(Index index, Deadline deadline) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToAddDeadline \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        moduleToAddDeadline.addDeadline(deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToAddDeadline),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the deadline is added to or removed from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleToAddDeadline}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToAddDeadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d !deadline.getDescription().isEmpty() ? MESSAGE_ADD_DEADLINE_SUCCESS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                : MESSAGE_DELETE_DEADLINE_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToAddDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (!(other instanceof AddDeadlineCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        AddDeadlineCommand e \u003d (AddDeadlineCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return index.equals(e.deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 74,
      "geshuming": 1,
      "alexwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Adds, Edits or Deletes a Deadline in a Module depending on input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public abstract class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 12,
      "alexwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/DeleteDeadlineTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Deletes a specified deadline task from a module\u0027s deadline list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DeleteDeadlineTaskCommand extends DeadlineCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"Deleted the deadline task from module: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_FAIL \u003d \"Unable to delete the deadline task from module: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \": Deletes Deadline task identified by the index number used in the displayed Module list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"TASK(must be a positive integer) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Example: deadline 2 \" + PREFIX_ACTION + \" \" + COMMAND_WORD + \" \" + PREFIX_TASK_LIST_NUMBER + \" 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int taskListNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private TrackedModule moduleToDeleteDeadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public DeleteDeadlineTaskCommand(Index index, int taskListNum) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.taskListNum \u003d taskListNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToDeleteDeadline \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        moduleToDeleteDeadline.deleteDeadlineTask(taskListNum - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToDeleteDeadline),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the deadline task is removed from"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleToDeleteDeadline}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToDeleteDeadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d MESSAGE_DELETE_DEADLINE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToDeleteDeadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 56,
      "geshuming": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/DoneDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Marks a specified deadline task from a module\u0027s deadline list as \u0027Done\u0027 with a tick."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DoneDeadlineCommand extends DeadlineCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_DONE_DEADLINE_SUCCESS \u003d \"Marked deadline task as \u0027Done\u0027 for module: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_DONE_DEADLINE_FAIL \u003d \"Unable to mark deadline task as \u0027Done\u0027 for module: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \": Marks the deadline task identified by the index and task number as done.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"TASK(must be a positive integer) \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Example: deadline 2 \" + PREFIX_ACTION + \" \" + COMMAND_WORD + \" \" + PREFIX_TASK_LIST_NUMBER + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int taskListNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private TrackedModule moduleToMarkDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public DoneDeadlineCommand(Index index, int taskListNum) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.taskListNum \u003d taskListNum;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToMarkDone \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        moduleToMarkDone.markDeadlineTaskAsDone(taskListNum - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToMarkDone),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the deadline task is marked as done from"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleMarkDone}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToMarkDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d MESSAGE_DONE_DEADLINE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToMarkDone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 55,
      "geshuming": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/EditDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Represents an Edit deadline command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public abstract class EditDeadlineCommand extends DeadlineCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \": Edits the deadline task identified by the index and task number.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"TASK(must be a positive integer), \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Example: deadline 2 \" + PREFIX_ACTION + \" \" + COMMAND_WORD + \" \" + PREFIX_TASK_LIST_NUMBER + \" 1 \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + PREFIX_DESCRIPTION + \" new description \" + PREFIX_TIME + \" new time \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_EDIT_DEADLINE_SUCCESS \u003d \"Edited deadline task to Module: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_EDIT_DEADLINE_FAIL \u003d \"Unable to edit deadline task to Module: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 24
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/EditDeadlineDescCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Edits deadline description of a module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class EditDeadlineDescCommand extends EditDeadlineCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int taskListNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public EditDeadlineDescCommand(Index index, String description, int taskListNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.taskListNum \u003d taskListNum;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToEditDescription \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadline \u003d moduleToEditDescription.getDeadlineList().get(taskListNum - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadline.editDescription(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToEditDescription),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the description of deadline task is edited in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleToEditDescription}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToEditDescription) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d !deadline.getDescription().isEmpty() ? MESSAGE_EDIT_DEADLINE_SUCCESS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                : MESSAGE_EDIT_DEADLINE_FAIL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToEditDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 47,
      "geshuming": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/EditDeadlineTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Edits deadline time of a module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class EditDeadlineTimeCommand extends EditDeadlineCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int taskListNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public EditDeadlineTimeCommand(Index index, String time, int taskListNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.taskListNum \u003d taskListNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToEditTime \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadline \u003d moduleToEditTime.getDeadlineList().get(taskListNum - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadline.editTime(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToEditTime),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the time of deadline task is edited in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleToEditTime}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToEditTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d !deadline.getDescription().isEmpty() ? MESSAGE_EDIT_DEADLINE_SUCCESS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                : MESSAGE_EDIT_DEADLINE_FAIL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToEditTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 46,
      "geshuming": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/deadlinecommands/InProgressDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.commands.deadlinecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Marks a specified deadline task from a module\u0027s deadline list as \u0027In-Progress\u0027 with a dash."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class InProgressDeadlineCommand extends DeadlineCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"inProgress\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_IN_PROGRESS_DEADLINE_SUCCESS \u003d \"Mark deadline task as \u0027In-Progress\u0027 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"for module: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_IN_PROGRESS_DEADLINE_FAIL \u003d \"Unable to mark deadline task as \u0027In-Progress\u0027 \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"for module: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \": Marks the deadline task identified by the index number as \u0027in progress\u0027 with a dash.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"TASK(must be a positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            + \"Example: deadline 2 \" + PREFIX_ACTION + \" \" + COMMAND_WORD + \" \" + PREFIX_TASK_LIST_NUMBER + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int taskListNum;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private TrackedModule moduleToMarkInProgress;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public InProgressDeadlineCommand(Index index, int taskListNum) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.taskListNum \u003d taskListNum;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToMarkInProgress \u003d model.getTrackedModuleByIndex(model, index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        moduleToMarkInProgress.markDeadlineTaskAsInProgress(taskListNum - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new CommandResult(generateSuccessMessage(moduleToMarkInProgress),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Generates a command execution success message based on whether the deadline task is marked as done from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code moduleToMarkInProgress}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String generateSuccessMessage(TrackedModule moduleToMarkInProgress) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String message \u003d MESSAGE_IN_PROGRESS_DEADLINE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return String.format(message, moduleToMarkInProgress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 57,
      "geshuming": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/AddLinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Adds a given Link to the specified TrackedModule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class AddLinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final Link webLink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public AddLinkCommand(Link webLink) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        TrackedModule moduleToAddLink \u003d this.currentDisplayed(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (moduleToAddLink.hasLinkTitle(webLink)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        moduleToAddLink.addLink(webLink);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new CommandResult(MESSAGE_LINK_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 31
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/DeleteLinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Deletes a Link with matching title from TrackedModule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class DeleteLinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String linkTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public DeleteLinkCommand(String linkTitle) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d linkTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Deletes Link object with matching title from the TrackedModule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param targetModule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param linkTitle"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void delete(TrackedModule targetModule, String linkTitle) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        boolean removed \u003d targetModule.getLink().removeIf(module -\u003e module.name.equals(linkTitle));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!removed) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new CommandException(\"Link with matching title not found. No links deleted\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        TrackedModule moduleToAccess \u003d this.currentDisplayed(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.delete(moduleToAccess, linkTitle);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new CommandResult((MESSAGE_DELETE_SUCCESS), false, true, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 41
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/EditLinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Edits a Link with matching title from TrackedModule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class EditLinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String linkTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final Optional\u003cString\u003e newTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final Optional\u003cString\u003e newLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public EditLinkCommand(String linkTitle, Optional\u003cString\u003e newTitle, Optional\u003cString\u003e newLink) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d linkTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.newTitle \u003d newTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.newLink \u003d newLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns index of Link object with matching title from the TrackedModule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param targetModule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param linkTitle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private int findIndex(TrackedModule targetModule, String linkTitle) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int limit \u003d targetModule.getLink().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (int i \u003d 0; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (targetModule.getLink().get(i).name.equals(linkTitle)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        throw new CommandException(\"Link with matching title not found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        TrackedModule moduleToAccess \u003d this.currentDisplayed(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!this.newLink.isPresent() \u0026\u0026 !this.newTitle.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new CommandException(\"No edit information given.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int editIndex \u003d this.findIndex(moduleToAccess, this.linkTitle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String title \u003d this.newTitle.isPresent() ? this.newTitle.get() : moduleToAccess.getLink().get(editIndex).name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String link \u003d this.newLink.isPresent() ? this.newLink.get() : moduleToAccess.getLink().get(editIndex).url;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Link editedLink \u003d new Link(title, link);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (this.newTitle.isPresent() \u0026\u0026 moduleToAccess.hasLinkTitle(editedLink)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        moduleToAccess.getLink().set(editIndex, editedLink);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new CommandResult((MESSAGE_EDIT_SUCCESS), false, true, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 63
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/LaunchLinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Launches a link in the module in the system\u0027s default browser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class LaunchLinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String linkTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public LaunchLinkCommand(String linkTitle) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d linkTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns Link object with matching title from the TrackedModule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param targetModule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param linkTitle"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Link find(TrackedModule targetModule, String linkTitle) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (Link link: targetModule.getLink()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (link.name.equals(linkTitle)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return link;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        throw new CommandException(\"Link with matching title not found\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        TrackedModule moduleToAccess \u003d this.currentDisplayed(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Link target \u003d find(moduleToAccess, linkTitle);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        target.launch();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new CommandResult((MESSAGE_LAUNCH_SUCCESS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 45
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/LinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Adds or launches a Link in a Module depending on input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public abstract class LinkCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"link\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds, deletes or launches a Link to a Module.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + \"Parameters: \" + \"Action \" + \"n/Link title [l/Link]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" add \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + \"n/example \" + \"l/ \" + \"http://google.com\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + COMMAND_WORD + \" go \" + \"t/\" + \"example\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_LINK_SUCCESS \u003d \"New link added to module.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_LAUNCH_SUCCESS \u003d \"Website opened in default browser.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"Link name already exists, choose another one.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_NO_DISPLAYED_MODULE_ERROR \u003d \"No displayed module to execute command. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + \"View a module first.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_TRACKED \u003d \"Links can only be added to tracked modules. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            + \"Current displayed module has not been tracked.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"Link deleted successfully.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Link edited successfully.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_MARK_SUCCESS \u003d \"Link marked successfully.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns the current TrackedModule that is being viewed, if any."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public TrackedModule currentDisplayed(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!model.getDisplayedModule().isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new CommandException(MESSAGE_NO_DISPLAYED_MODULE_ERROR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return (TrackedModule) model.getDisplayedModule()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                .filter(m -\u003e m instanceof TrackedModule)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(MESSAGE_MODULE_NOT_TRACKED));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 45
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/commands/linkcommands/MarkLinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.commands.linkcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Launches a link in the module in the system\u0027s default browser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class MarkLinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String linkTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final boolean mark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public MarkLinkCommand(String linkTitle, boolean mark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d linkTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns Link object with matching title from the TrackedModule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param targetModule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param linkTitle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Link find(TrackedModule targetModule, String linkTitle) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (Link link: targetModule.getLink()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (link.name.equals(linkTitle)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return link;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        throw new CommandException(\"Link with matching title not found\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Marks/unmarks link object. Marked object are pushed to front, unmarked are pushed to the back of list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param moduleToAccess"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void markLink(Link target, TrackedModule moduleToAccess) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        moduleToAccess.getLink().removeIf(module -\u003e module.equals(target));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (this.mark) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            target.setMarked();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            moduleToAccess.getLink().add(0, target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            target.setUnmarked();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            moduleToAccess.getLink().add(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        TrackedModule moduleToAccess \u003d this.currentDisplayed(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Link target \u003d find(moduleToAccess, linkTitle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (target.isMarked() \u0026\u0026 this.mark) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new CommandResult(\"Link is already marked\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else if (!target.isMarked() \u0026\u0026 !this.mark) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new CommandResult(\"Link is already unmarked.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        markLink(target, moduleToAccess);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new CommandResult((MESSAGE_MARK_SUCCESS), false, true, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 69
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new AddCommand(new SameModuleCodePredicate(trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 30
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 3,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final Prefix PREFIX_ACTION \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final Prefix PREFIX_LINK \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final Prefix PREFIX_NEW_NAME \u003d new Prefix(\"nn/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final Prefix PREFIX_NEW_LINK \u003d new Prefix(\"nl/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final Prefix PREFIX_TASK_LIST_NUMBER \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 14,
      "alexwxh": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new DeleteCommand(new SameModuleCodePredicate(trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "CowSaysBaa": 11
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_SEARCH_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.PreclusionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.PrerequisiteContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SemesterContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ArrayList\u003cString\u003e prefixes \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"all\\\\\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"mod\\\\\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"desc\\\\\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"title\\\\\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"prereq\\\\\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"preclu\\\\\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            add(\"sem\\\\\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e listOfLists \u003d parseList(nameKeywords);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cPredicate\u003cModule\u003e\u003e listOfPredicates \u003d parseListOfLists(listOfLists);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return new FindCommand(listOfPredicates);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Parses the given {@code ArrayList\u003cString\u003e} of argument and returns a {@code ArrayList\u003cArrayList\u003cStrings\u003e\u003e}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * representing the command prefix and associating keywords."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ArrayList\u003cArrayList\u003cString\u003e\u003e parseList(String[] arr) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e listOfLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e currentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (String word : arr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (prefixes.contains(word)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfLists.add(currentList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                currentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                currentList.add(word);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                currentList.add(word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (counter \u003d\u003d arr.length) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfLists.add(currentList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfLists.remove(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (listOfLists.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (ArrayList\u003cString\u003e list : listOfLists) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (!list.get(0).equals(\"all\\\\\") \u0026\u0026 list.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        String.format(MESSAGE_INVALID_SEARCH_FIELD));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return listOfLists;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Parses the given {@code ArrayList\u003cArrayList\u003cStrings\u003e\u003e} of argument and returns a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code ArrayList\u003cPredicate\u003cModule\u003e\u003e} representing the predicates for each filter."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws ParseException if prefix is not defined in prefixes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ArrayList\u003cPredicate\u003cModule\u003e\u003e parseListOfLists(ArrayList\u003cArrayList\u003cString\u003e\u003e listOfLists) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assert !listOfLists.isEmpty() : \"listOfList is empty.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cPredicate\u003cModule\u003e\u003e listOfPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (ArrayList\u003cString\u003e list : listOfLists) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            switch (list.get(0)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"all\\\\\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                Predicate\u003cModule\u003e showAll \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(showAll);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                return listOfPredicates;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"mod\\\\\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new ModuleCodeContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"title\\\\\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new TitleContainsKeywordsPredicate(String.join(\" \", list)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"desc\\\\\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new DescriptionContainsKeywordsPredicate(String.join(\" \", list)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"prereq\\\\\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new PrerequisiteContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"preclu\\\\\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new PreclusionContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            case \"sem\\\\\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                list.remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                ArrayList\u003cInteger\u003e listOfInt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                for (String semester : list) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        int intSem \u003d Integer.valueOf(semester);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        if (intSem \u003e 4 || intSem \u003c 1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                            throw new ParseException(\"Please input valid semester numbers: 1 - 4\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        listOfInt.add(intSem);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        throw new ParseException(\"Please input valid semester numbers: 1 - 4\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                listOfPredicates.add(new SemesterContainsKeywordsPredicate(listOfInt));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                throw new ParseException(\"parseListOfList received unknown prefix.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return listOfPredicates;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "CowSaysBaa": 136
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/LinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NEW_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NEW_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.LinkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.linkcommandparsers.AddLinkCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.linkcommandparsers.DeleteLinkCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.linkcommandparsers.EditLinkCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.linkcommandparsers.LaunchLinkCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.linkcommandparsers.MarkLinkCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parses input arguments and creates a new LinkCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class LinkCommandParser implements Parser\u003cLinkCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LinkCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * and returns a LinkCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public LinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LINK, PREFIX_NAME, PREFIX_NEW_LINK,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                PREFIX_NEW_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String action \u003d argMultimap.getPreamble().trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (action.equals(\"add\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new AddLinkCommandParser().parse(argMultimap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else if (action.equals(\"go\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new LaunchLinkCommandParser().parse(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new DeleteLinkCommandParser().parse(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else if (action.equals(\"edit\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new EditLinkCommandParser().parse(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else if (action.equals(\"mark\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new MarkLinkCommandParser().parse(argMultimap, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else if (action.equals(\"unmark\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return new MarkLinkCommandParser().parse(argMultimap, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                throw new ParseException(\"Command not recognized\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 57
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/ModuleBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.DeadlineCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.LinkCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.deadlinecommandparsers.DeadlineCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case LinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new LinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 8,
      "Kzrthikz": 4,
      "alexwxh": 5,
      "-": 56,
      "CowSaysBaa": 12
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.util.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 27
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new ViewCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 29
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/AddDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and creates a new AddDeadlineCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class AddDeadlineCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * and returns an AddDeadlineCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param argsMultimap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return AddDeadlineCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public AddDeadlineCommand parse(ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_DESCRIPTION).isPresent() \u0026\u0026 argsMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            String description \u003d argsMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            String time \u003d argsMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            String tag \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            if (argsMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                tag \u003d argsMultimap.getValue(PREFIX_TAG).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, time, tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return new AddDeadlineCommand(index, deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 41,
      "alexwxh": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/DeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_ACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and creates a new DeadlineCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeadlineCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return a DeadlineCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION, PREFIX_TASK_LIST_NUMBER,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_ACTION).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                throw new ParseException(\"Input format error. a/ACTION not found\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ACTION).get().equals(\"add\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                ArgumentMultimap newArgMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        PREFIX_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new AddDeadlineCommandParser().parse(newArgMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_ACTION).get().equals(\"edit\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                ArgumentMultimap newArgMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        PREFIX_TASK_LIST_NUMBER, PREFIX_DESCRIPTION, PREFIX_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new EditDeadlineCommandParser().parse(newArgMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_ACTION).get().equals(\"delete\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                ArgumentMultimap newArgMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        PREFIX_TASK_LIST_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new DeleteDeadlineCommandParser().parse(newArgMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_ACTION).get().equals(\"done\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                ArgumentMultimap newArgMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        PREFIX_TASK_LIST_NUMBER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new DoneDeadlineCommandParser().parse(newArgMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_ACTION).get().equals(\"inProgress\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                ArgumentMultimap newArgMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACTION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        PREFIX_TASK_LIST_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new InProgressDeadlineCommandParser().parse(newArgMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                throw new ParseException(\"Command not recognised\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, e));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 66
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/DeleteDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.DeleteDeadlineTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and creates a new DeleteDeadlineCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DeleteDeadlineCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDeadlineCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * and returns a DeleteDeadlineCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param argsMultimap"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return DeleteDeadlineCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public DeleteDeadlineTaskCommand parse(ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                int taskListNum \u003d Integer.parseInt(argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).get().trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new DeleteDeadlineTaskCommand(index, taskListNum);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeadlineTaskCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 40
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/DoneDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.DoneDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and marks the deadline object as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DoneDeadlineCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneDeadlineCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * and returns an DoneDeadlineCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param argsMultimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return DoneDeadlineCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public DoneDeadlineCommand parse(ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                int taskListNum \u003d Integer.parseInt(argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).get().trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new DoneDeadlineCommand(index, taskListNum);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneDeadlineCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 38
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/EditDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.EditDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.EditDeadlineDescCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.EditDeadlineTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and edits the deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class EditDeadlineCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDeadlineCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * and returns an EditDeadlineCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param argsMultimap"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return EditDeadlineCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public EditDeadlineCommand parse(ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            String description \u003d argsMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            int taskListNum \u003d Integer.parseInt(argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).get().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return new EditDeadlineDescCommand(index, description, taskListNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else if (argsMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            String time \u003d argsMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            int taskListNum \u003d Integer.parseInt(argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).get().trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return new EditDeadlineTimeCommand(index, time, taskListNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 45
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/deadlinecommandparsers/InProgressDeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.logic.parser.deadlinecommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_TASK_LIST_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.deadlinecommands.InProgressDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Parses input arguments and marks the deadline object as In-Progress using a \u0027-\u0027."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class InProgressDeadlineCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InProgressDeadlineCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * and returns an InProgressDeadlineCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param argsMultimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return InProgressDeadlineCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public InProgressDeadlineCommand parse(ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                int taskListNum \u003d Integer.parseInt(argsMultimap.getValue(PREFIX_TASK_LIST_NUMBER).get().trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                return new InProgressDeadlineCommand(index, taskListNum);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, InProgressDeadlineCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 38
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/linkcommandparsers/AddLinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser.linkcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.AddLinkCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser specific AddLinkCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class AddLinkCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses arguments in the given ArgumentMultimap and returns a AddLinkCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public AddLinkCommand parse(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINK).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String title \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String link \u003d argMultimap.getValue(PREFIX_LINK).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Link addedLink \u003d new Link(title.trim(), link.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new AddLinkCommand(addedLink);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 31
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/linkcommandparsers/DeleteLinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser.linkcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.DeleteLinkCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser specific to DeleteLinkCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class DeleteLinkCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses arguments in the given ArgumentMultimap and returns a DeleteLinkCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public DeleteLinkCommand parse(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String title \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new DeleteLinkCommand(title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 29
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/linkcommandparsers/EditLinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser.linkcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NEW_LINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NEW_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.EditLinkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser specific to EditLinkCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class EditLinkCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses arguments in the given ArgumentMultimap and returns a EditLinkCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public EditLinkCommand parse(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String title \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Optional\u003cString\u003e newTitle \u003d argMultimap.getValue(PREFIX_NEW_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Optional\u003cString\u003e newLink \u003d argMultimap.getValue(PREFIX_NEW_LINK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new EditLinkCommand(title, newTitle, newLink);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 35
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/linkcommandparsers/LaunchLinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser.linkcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.LaunchLinkCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser specific to LaunchLinkCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class LaunchLinkCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses arguments in the given ArgumentMultimap and returns a LaunchLinkCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public LaunchLinkCommand parse(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String title \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new LaunchLinkCommand(title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 28
    }
  },
  {
    "path": "src/main/java/seedu/module/logic/parser/linkcommandparsers/MarkLinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.logic.parser.linkcommandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static seedu.module.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.commands.linkcommands.MarkLinkCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser specific to MarkLinkCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class MarkLinkCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Parses arguments in the given ArgumentMultimap and returns a MarkLinkCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public MarkLinkCommand parse(ArgumentMultimap argMultimap, boolean mark) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String title \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new MarkLinkCommand(title, mark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new ParseException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 29
    }
  },
  {
    "path": "src/main/java/seedu/module/model/DisplayedModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A list of modules to be displayed to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "class DisplayedModuleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ObservableList\u003cModule\u003e internalObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ObservableList\u003cModule\u003e getObservableList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return internalObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Adds a module to the list. If the module is already"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * in the list, the incoming module will override the one"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void add(Module m) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        int indexIfAny \u003d this.indexOf(m);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assert indexIfAny \u003c internalObservableList.size() : \"indexIfAny should not exceed list size\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (indexIfAny \u003e\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            internalObservableList.set(indexIfAny, m);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        internalObservableList.add(m);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Clears the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        internalObservableList.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns the index of the module {@code other}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns -1 if not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private int indexOf(Module other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (Module m : internalObservableList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            if (m.isSameModule(other)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return found ? i : -1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 60
    }
  },
  {
    "path": "src/main/java/seedu/module/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_NO_MODULES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the user prefs\u0027 module book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Sets the user prefs\u0027 module book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void setModuleBookFilePath(Path moduleBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Replaces module book data with the data in {@code moduleBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void setModuleBook(ReadOnlyModuleBook moduleBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the ModuleBook."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ReadOnlyModuleBook getModuleBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if a Module with the same identity as {@code Module} exists in the module book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    boolean hasModule(TrackedModule trackedModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The module must exist in the module book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void deleteModule(TrackedModule target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code module} must not already exist in the module book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void addModule(TrackedModule trackedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ObservableList\u003cTrackedModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list within the archive list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ObservableList\u003cArchivedModule\u003e getFilteredArchivedModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Updates the filter of the filtered archived module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void updateFilteredArchivedModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the current shown list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ObservableList\u003cModule\u003e getDisplayedList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Updates the displayed list to be shown."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    void updateDisplayedList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Useful method to update and display only tracked modules."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    void showAllTrackedModules();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns a TrackedModule by the index of deadline task list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @return TrackedModule object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    TrackedModule getTrackedModuleByIndex(Model model, Index index) throws CommandException;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns the active module that is being viewed by the user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Optional\u003cModule\u003e getDisplayedModule();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the active module that will be viewed by the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @param toDisplay the module to be displayed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    void setDisplayedModule(Module toDisplay);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code target} must exist in the module book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the module book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    void setModule(TrackedModule target, TrackedModule editedModule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Finds and returns an  {@literal Optional\u003cArchivedModule\u003e} from filteredArchivedModules based on the predicate."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Optional\u003cArchivedModule\u003e findArchivedModule(SameModuleCodePredicate predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Finds and returns an {@literal Optional\u003cTrackedModule\u003e} from filteredTrackedModules based on the predicate."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Optional\u003cTrackedModule\u003e findTrackedModule(SameModuleCodePredicate predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geshuming": 21,
      "Kzrthikz": 12,
      "CowSaysBaa": 127
    }
  },
  {
    "path": "src/main/java/seedu/module/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Represents the in-memory model of the module book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ModuleBook moduleBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private FilteredList\u003cTrackedModule\u003e filteredTrackedModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private FilteredList\u003cArchivedModule\u003e filteredArchivedModules;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private DisplayedModuleList displayedList \u003d new DisplayedModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Optional\u003cModule\u003e displayedModule \u003d Optional.empty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Initializes a ModelManager with the given moduleBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModelManager(ReadOnlyModuleBook moduleBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireAllNonNull(moduleBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.fine(\"Initializing with module book: \" + moduleBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleBook \u003d new ModuleBook(moduleBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        filteredArchivedModules \u003d new FilteredList\u003c\u003e(this.moduleBook.getArchivedModuleList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        filteredTrackedModules \u003d new FilteredList\u003c\u003e(this.moduleBook.getModuleList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        showAllTrackedModules();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this(new ModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return userPrefs.getModuleBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(moduleBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        userPrefs.setModuleBookFilePath(moduleBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModuleBook(ReadOnlyModuleBook moduleBook) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleBook.resetData(moduleBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        filteredTrackedModules \u003d new FilteredList\u003c\u003e(this.moduleBook.getModuleList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        filteredArchivedModules \u003d new FilteredList\u003c\u003e(this.moduleBook.getArchivedModuleList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code target} must exist in the module book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the module book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void setModule(TrackedModule target, TrackedModule editedModule) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        moduleBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean hasModule(TrackedModule trackedModule) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(trackedModule);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook.hasModule(trackedModule);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void deleteModule(TrackedModule target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBook.removeModule(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void addModule(TrackedModule trackedModule) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBook.addModule(trackedModule);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code module} backed by the internal list of."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code versionedModuleBook}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cTrackedModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return filteredTrackedModules;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        filteredTrackedModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Finds and returns an {@literal Optional\u003cTrackedModule\u003e} from filteredArchivedModules based on the predicate."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an empty Optional if the module is not found."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Optional\u003cTrackedModule\u003e findTrackedModule(SameModuleCodePredicate predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Optional\u003cTrackedModule\u003e foundModule \u003d moduleBook.getModuleList().stream()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return foundModule;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public TrackedModule getTrackedModuleByIndex(Model model, Index index) throws CommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        List\u003cTrackedModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule moduleToReturn \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return moduleToReturn;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ArchivedModule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ArchivedModule} backed by the internal list of."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code versionedModuleBook}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cArchivedModule\u003e getFilteredArchivedModuleList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return filteredArchivedModules;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void updateFilteredArchivedModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        filteredArchivedModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Finds and returns an {@literal Optional\u003cArchivedModule\u003e} from filteredArchivedModules based on the predicate."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an empty Optional if the module is not found."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Optional\u003cArchivedModule\u003e findArchivedModule(SameModuleCodePredicate predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Optional\u003cArchivedModule\u003e foundModule \u003d moduleBook.getArchivedModuleList().stream()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return foundModule;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Displayed List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} based on command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cModule\u003e getDisplayedList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return displayedList.getObservableList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void updateDisplayedList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.displayedList.clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (Module m : filteredArchivedModules) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            displayedList.add(m);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (Module m : filteredTrackedModules) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            displayedList.add(m);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void showAllTrackedModules() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        updateFilteredArchivedModuleList(PREDICATE_SHOW_NO_MODULES);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        updateDisplayedList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Displayed Module Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cModule\u003e getDisplayedModule() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return displayedModule;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void setDisplayedModule(Module toDisplay) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.displayedModule \u003d Optional.ofNullable(toDisplay);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook.equals(other.moduleBook)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                // TODO: Figure out how to test the filtered lists"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                // \u0026\u0026 filteredTrackedModules.equals(other.filteredTrackedModules)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                // \u0026\u0026 filteredArchivedModules.equals(other.filteredArchivedModules)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u0026\u0026 displayedModule.equals(other.displayedModule);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 23,
      "geshuming": 40,
      "CowSaysBaa": 200
    }
  },
  {
    "path": "src/main/java/seedu/module/model/ModuleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Wraps all data at the module-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleBook implements ReadOnlyModuleBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ArchivedModuleList archivedModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBook(ArchivedModuleList archivedModules) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.archivedModules \u003d archivedModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Creates an ModuleBook using the modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBook(ReadOnlyModuleBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModules(List\u003cTrackedModule\u003e trackedModules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.modules.setModules(trackedModules);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the current ArchivedModuleList with another ArchivedModuleList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void setArchivedModules(ArchivedModuleList archivedModules) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.archivedModules \u003d archivedModules;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code target} must exist in the module book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the module book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void setModule(TrackedModule target, TrackedModule editedModule) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Resets the existing data of this {@code ModuleBook} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void resetData(ReadOnlyModuleBook newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        setArchivedModules(newData.getRawArchivedModuleList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the module book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean hasModule(TrackedModule trackedModule) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(trackedModule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return modules.contains(trackedModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Adds a module to the module book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The module must not already exist in the module book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void addModule(TrackedModule p) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Removes {@code key} from this {@code ModuleBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code key} must exist in the module book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void removeModule(TrackedModule key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cTrackedModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ObservableList\u003cArchivedModule\u003e getArchivedModuleList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ArchivedModuleList getRawArchivedModuleList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this.archivedModules;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof ModuleBook // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 modules.equals(((ModuleBook) other).modules));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 15,
      "Kzrthikz": 10,
      "CowSaysBaa": 112
    }
  },
  {
    "path": "src/main/java/seedu/module/model/ReadOnlyModuleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Unmodifiable view of an module book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public interface ReadOnlyModuleBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ObservableList\u003cTrackedModule\u003e getModuleList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    ObservableList\u003cArchivedModule\u003e getArchivedModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ArchivedModuleList getRawArchivedModuleList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 3,
      "CowSaysBaa": 20
    }
  },
  {
    "path": "src/main/java/seedu/module/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Path moduleBookFilePath \u003d Paths.get(\"data\", \"modulebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        setModuleBookFilePath(newUserPrefs.getModuleBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(moduleBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleBookFilePath \u003d moduleBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 moduleBookFilePath.equals(o.moduleBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return Objects.hash(guiSettings, moduleBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + moduleBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "CowSaysBaa": 14
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/ArchivedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Represents an Archived Module. An Archived Module is an Object containing data on a module"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * provided by the institution. Should be read-only."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ArchivedModule implements Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final Optional\u003cString\u003e prerequisite;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final Optional\u003cString\u003e preclusion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final SemesterDetailList semesterDetails;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModule(String moduleCode, String title, String description, String prerequisite,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                          String preclusion, SemesterDetailList semesterDetails) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.prerequisite \u003d Optional.ofNullable(prerequisite);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.preclusion \u003d Optional.ofNullable(preclusion);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semesterDetails \u003d semesterDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cString\u003e getPreclusion() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetailList getSemesterDetails() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return semesterDetails;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cString\u003e getPrerequisite() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public List\u003cInteger\u003e getListOfOfferedSemesters() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this.semesterDetails.getAsObservableList().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .filter(x -\u003e x.isOffered()).map(x -\u003e x.getSemester()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns true if both archived modules have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (!(other instanceof ArchivedModule)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule otherModule \u003d (ArchivedModule) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode()) \u0026\u0026 otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u0026\u0026 otherModule.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return Objects.hash(moduleCode, title, description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        builder.append(getModuleCode()).append(\" Title: \").append(getTitle()).append(\" Description: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 89,
      "CowSaysBaa": 8
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/ArchivedModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A list of {@code ArchivedModule}. The list is guaranteed not to contain duplicates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ArchivedModuleList implements Iterable\u003cArchivedModule\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final ObservableList\u003cArchivedModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final ObservableList\u003cArchivedModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns true if the list contains an equivalent Module as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean contains(ArchivedModule toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Adds an ArchivedModule to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void add(ArchivedModule toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ObservableList\u003cArchivedModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Iterator\u003cArchivedModule\u003e iterator() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                || (other instanceof ArchivedModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u0026\u0026 internalList.equals(((ArchivedModuleList) other).internalList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 58
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Represents a Module\u0027s deadline in the module book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Not a valid Deadline\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private boolean isInProgress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private int deadlineListNum \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public Deadline(String description, String time, String tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Marks the deadline task as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        isInProgress \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Marks the deadline task as in progress."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markAsInProgress() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        isInProgress \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return \"\" + \"\\u2713\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else if (isInProgress) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            return \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void setValue(String newValue) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d newValue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void editDescription(String newDescription) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void editTime(String newTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.time \u003d newTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return \"[\" + getStatus() + \"] \" + description + \" ,\" + time + \" PRIORITY: \" + tag;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                \u0026\u0026 description.equals(((Deadline) other).description))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                \u0026\u0026 time.equals(((Deadline) other).time); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 93
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/DeadlineList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Represents the DeadlineList of a TrackedModule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class DeadlineList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private List\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Adds the deadline object to deadline list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void addDeadline (Deadline deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.deadlineList.add(deadline);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Returns the deadline list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return deadline list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public List\u003cDeadline\u003e getDeadlineList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return deadlineList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Deletes the specified deadline task from list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void deleteDeadlineTask(int taskListNum) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.deadlineList.remove(taskListNum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markDeadlineTaskAsDone(int taskListNum) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlineList.get(taskListNum).markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markDeadlineTaskAsInProgress(int taskListNum) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlineList.get(taskListNum).markAsInProgress();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Returns the string representation of deadline list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * @return string deadline list as String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        String deadlineString \u003d \"Deadline: \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlineList.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            deadlineString +\u003d ((i + 1) + \". \" + deadlineList.get(i)) + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return deadlineString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 54
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/Link.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import org.apache.commons.validator.routines.UrlValidator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.exceptions.LinkAccessException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents a Link in a TrackedModule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Link {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Not a valid URL\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public final String url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean marked \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Link(String name, String url) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String properLink \u003d url;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!url.toLowerCase().startsWith(\"http://\") \u0026\u0026 !url.toLowerCase().startsWith(\"https://\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            properLink \u003d \"http://\" + url;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!isValidUrl(properLink)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.url \u003d properLink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Link(String name, String url, boolean marked) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String properLink \u003d url;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!url.toLowerCase().startsWith(\"http://\") \u0026\u0026 !url.toLowerCase().startsWith(\"https://\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            properLink \u003d \"http://\" + url;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!isValidUrl(properLink)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.url \u003d properLink;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.marked \u003d marked;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns True if the string given is a valid URL"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static boolean isValidUrl(String url) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String[] scheme \u003d {\"http\", \"https\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        UrlValidator urlValidator \u003d new UrlValidator(scheme);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return urlValidator.isValid(url);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Launches the url in this Link in the user\u0027s default browser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void launch() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String runningSystem \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (Desktop.isDesktopSupported()) { // Probably Windows"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                desktop.browse(URI.create(url));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } else { // Definitely Non-windows"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Runtime runtime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                if (runningSystem.contains(\"mac\")) { // Apples"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    runtime.exec(\"open \" + url);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                } else if (runningSystem.contains(\"nix\") || runningSystem.contains(\"nux\")) { // Linux flavours"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    runtime.exec(\"xdg-open \" + url);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    throw new LinkAccessException(\"Unable/unwilling to launch a browser in your OS.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new LinkAccessException(\"Couldn\u0027t open system browser: \" + e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean isMarked() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this.marked;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean setMarked() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (this.marked) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.marked \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean setUnmarked() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!this.marked) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.marked \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                || (other instanceof Link // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u0026\u0026 name.equals(((Link) other).name))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u0026\u0026 url.equals(((Link) other).url); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 123
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Represents a Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public interface Module {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    String getModuleCode();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    String getTitle();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Optional\u003cString\u003e getPrerequisite();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    Optional\u003cString\u003e getPreclusion();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    SemesterDetailList getSemesterDetails();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    List\u003cInteger\u003e getListOfOfferedSemesters();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns true if both modules share the same module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    default boolean isSameModule(Module other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return this.getModuleCode().equals(other.getModuleCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Retruns true if the module is a tracked module."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    default boolean isTracked() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return this instanceof Trackable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 25,
      "Kzrthikz": 1,
      "CowSaysBaa": 16
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/SemesterDetail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Represents semester details pertaining to a module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class SemesterDetail {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e examDate; // ISO standard datetime format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final int examDuration; // duration in minutes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final boolean offered; // whether the module is offered in this semester"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Use this constructor to indicate the semester is offered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @apiNote examDate may be null to indicate no exams for this semester."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetail(int semester, LocalDateTime examDate, int examDuration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDate \u003d Optional.ofNullable(examDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.offered \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetail(int semester) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDuration \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.offered \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean isOffered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return offered;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public int getExamDuration() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return examDuration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cLocalDateTime\u003e getExamDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    // Compares 2 objects based on the identify field {@code semester}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (o instanceof SemesterDetail) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return ((SemesterDetail) o).getSemester() \u003d\u003d this.semester;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 59
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/SemesterDetailList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Represents a list of semester details pertaining to a module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * There are a total of 4 \"semesters\", 2 semesters and 2 special terms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * See http://www.nus.edu.sg/registrar/calendar.html"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class SemesterDetailList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private List\u003cSemesterDetail\u003e semesterDetails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs a SemesterDetailList. Contains 4 elements."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Each SemesterDetail defaults to unoffered status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetailList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semesterDetails \u003d new ArrayList\u003c\u003e(4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            this.semesterDetails.add(new SemesterDetail(i));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs and sets the SemesterDetailList with new semester details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @param semesterDetails list of semester details, may be an incomplete list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetailList(List\u003cSemesterDetail\u003e semesterDetails) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (SemesterDetail s : semesterDetails) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            // Sets the corresponding semester details"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            if (this.semesterDetails.contains(s)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                this.semesterDetails.set(Index.fromOneBased(s.getSemester()).getZeroBased(), s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns the SemesterDetailList as an Observable List."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ObservableList\u003cSemesterDetail\u003e getAsObservableList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ObservableList\u003cSemesterDetail\u003e observableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        observableList.setAll(semesterDetails);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return observableList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 53
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/Trackable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Represents a Module."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public interface Trackable extends Module {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    String getDeadline();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    List\u003cLink\u003e getLink();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 8,
      "alexwxh": 3
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/TrackedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Represents a TrackedModule in the ModuleList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class TrackedModule implements Module, Trackable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ArchivedModule archivedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private DeadlineList deadlineList \u003d new DeadlineList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private List\u003cLink\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public TrackedModule(ArchivedModule archivedModule) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.archivedModule \u003d archivedModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return archivedModule.getModuleCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return archivedModule.getTitle();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return archivedModule.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cString\u003e getPrerequisite() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModule.getPrerequisite();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Optional\u003cString\u003e getPreclusion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModule.getPreclusion();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetailList getSemesterDetails() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModule.getSemesterDetails();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public List\u003cInteger\u003e getListOfOfferedSemesters() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return archivedModule.getListOfOfferedSemesters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return deadlineList.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public List\u003cDeadline\u003e getDeadlineList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return deadlineList.getDeadlineList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.deadlineList.addDeadline(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markDeadlineTaskAsDone(int taskListNum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlineList.markDeadlineTaskAsDone(taskListNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void markDeadlineTaskAsInProgress(int taskListNum) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlineList.markDeadlineTaskAsInProgress(taskListNum);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void deleteDeadlineTask(int taskListNum) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlineList.deleteDeadlineTask(taskListNum);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public List\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return links;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Adds a link to the List of links in this module."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param link link to add"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void addLink(Link link) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.links.add(link);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns true if there exists a link with the same title"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param link"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean hasLinkTitle(Link link) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (Link l: links) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if (link.name.equals(l.name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!(other instanceof TrackedModule)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule otherTrackedModule \u003d (TrackedModule) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return otherTrackedModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 otherTrackedModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 otherTrackedModule.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return Objects.hash(archivedModule, deadlineList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        builder.append(getModuleCode())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                .append(\" Title: \").append(getTitle())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                .append(\" Description: \").append(getDescription())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                .append(\" Deadline: \").append(getDeadline());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 32,
      "geshuming": 13,
      "alexwxh": 28,
      "CowSaysBaa": 66
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/UniqueModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * @see TrackedModule#isSameModule(TrackedModule)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cTrackedModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ObservableList\u003cTrackedModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final ObservableList\u003cTrackedModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if the list contains an equivalent Module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean contains(TrackedModule toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Adds a Module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The Module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void add(TrackedModule toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * The modules must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void remove(TrackedModule toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void setModules(List\u003cTrackedModule\u003e trackedModules) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireAllNonNull(trackedModules);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!modulesAreUnique(trackedModules)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        internalList.setAll(trackedModules);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void setModule(TrackedModule target, TrackedModule editedModule) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ObservableList\u003cTrackedModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Iterator\u003cTrackedModule\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private boolean modulesAreUnique(List\u003cTrackedModule\u003e trackedModules) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (int i \u003d 0; i \u003c trackedModules.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            for (int j \u003d i + 1; j \u003c trackedModules.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                if (trackedModules.get(i).isSameModule(trackedModules.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 17,
      "CowSaysBaa": 117
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 11
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/exceptions/LinkAccessException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Signals that the program is unable to open the link due to issues on the user\u0027s end"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * i.e.unidentifiable OS, browser issues"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class LinkAccessException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public LinkAccessException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 11
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 7
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s description contains the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase().trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return checker.fuzzyContains(module.getDescription().toLowerCase(), keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keyword.equals(((DescriptionContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 30
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/LevenshteinDistanceChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.apache.commons.text.similarity.LevenshteinDistance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Compares two strings and checks if they are similar enough to be considered a spelling mistake."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class LevenshteinDistanceChecker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private int tolerance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final LevenshteinDistance ld \u003d LevenshteinDistance.getDefaultInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public LevenshteinDistanceChecker(int tolerance) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.tolerance \u003d tolerance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Compares two strings and checks the first string contains substring with Levenshtein distance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * within the acceptable tolerance range when compared to the second string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param other The string being compared to."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param current The string used for comparison to other."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @return Boolean result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean fuzzyContains(String other, String current) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e partitionedList \u003d partitionString(other, current);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (String partitionedString : partitionedList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            Integer distance \u003d ld.apply(partitionedString, current);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (distance \u003c\u003d tolerance) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        Integer distance \u003d ld.apply(other, current);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return distance \u003c\u003d tolerance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Partition the first string into an ArrayList of strings, each with the same number of words as the second string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param other The string being compared to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param current The string used for comparison to other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @return ArrayList of strings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ArrayList\u003cString\u003e partitionString(String other, String current) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e partitionedString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] otherWords \u003d other.split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        int takeCount \u003d current.split(\" \").length;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assert takeCount \u003e\u003d 1 : \"partitionString received empty input string\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (int i \u003d 0; i \u003c otherWords.length; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            StringBuilder curr \u003d new StringBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    .append(otherWords[i].replaceAll(\"\\\\s*\\\\p{Punct}+\\\\s*$\", \"\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            for (int j \u003d 1; i + j \u003c otherWords.length \u0026\u0026 j \u003c takeCount; j++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                curr.append(\" \").append(otherWords[i + j].replaceAll(\"\\\\s*\\\\p{Punct}+\\\\s*$\", \"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            partitionedString.add(curr.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return partitionedString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 67
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/ModuleCodeContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode partially or fully matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleCodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        keywords.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .anyMatch(keyword -\u003e module.getModuleCode().toLowerCase().contains(keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof ModuleCodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleCodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 32
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleCode(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "CowSaysBaa": 7
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/PreclusionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode partially or fully matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class PreclusionContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public PreclusionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        keywords.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!module.getPreclusion().isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .anyMatch(keyword -\u003e module.getPreclusion().get().toLowerCase().contains(keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof PreclusionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keywords.equals(((PreclusionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 35
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/PrerequisiteContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode partially or fully matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class PrerequisiteContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public PrerequisiteContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        keywords.replaceAll(String::toLowerCase);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!module.getPrerequisite().isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .anyMatch(keyword -\u003e module.getPrerequisite().get().toLowerCase().contains(keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof PrerequisiteContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keywords.equals(((PrerequisiteContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 35
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/SameModuleCodePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode matches the moduleCode given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class SameModuleCodePredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public SameModuleCodePredicate(String moduleCode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(module.getModuleCode(), moduleCode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof SameModuleCodePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((SameModuleCodePredicate) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 30
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/SemesterContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s moduleCode partially or fully matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class SemesterContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cInteger\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public SemesterContainsKeywordsPredicate(List\u003cInteger\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                .anyMatch(keyword -\u003e module.getListOfOfferedSemesters().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        .anyMatch(x -\u003e x.equals(keyword)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof SemesterContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keywords.equals(((SemesterContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 33
    }
  },
  {
    "path": "src/main/java/seedu/module/model/module/predicate/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model.module.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Tests that a {@code Module}\u0027s title contains the sentence given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public TitleContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase().trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return checker.fuzzyContains(module.getTitle().toLowerCase(), keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 keyword.equals(((TitleContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 30
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonAdaptedArchivedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.SemesterDetailList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Jackson-friendly version of {@link ArchivedModule}. This class serves only as a reader."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "class JsonAdaptedArchivedModule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedArchivedModule.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String prerequisite;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String preclusion;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final List\u003cJsonAdaptedSemesterDetail\u003e semesterDetails;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs a {@code JsonAdaptedArchivedModule} with the given module details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public JsonAdaptedArchivedModule(@JsonProperty(\"moduleCode\") String moduleCode, @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            @JsonProperty(\"description\") String description, @JsonProperty(\"prerequisite\") String prerequisite,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            @JsonProperty(\"preclusion\") String preclusion,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            @JsonProperty(\"semesterData\") List\u003cJsonAdaptedSemesterDetail\u003e semesterDetails) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semesterDetails \u003d Optional.ofNullable(semesterDetails).orElse(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code ArchivedModule} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModule toModelType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new ArchivedModule(moduleCode, title, description, prerequisite, preclusion,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            fromListToSemesterDetailList(semesterDetails));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Converts the list of {@code JsonAdaptedSemesterDetail} to {@code SemesterDetailList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private SemesterDetailList fromListToSemesterDetailList(List\u003cJsonAdaptedSemesterDetail\u003e semesterDetails) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new SemesterDetailList(semesterDetails.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .map(semesterDetail -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    return semesterDetail.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    logger.info("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        String.format(\"ArchivedModule %s has bad semester data.\", moduleCode));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            })"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .filter(semesterDetail -\u003e semesterDetail !\u003d null)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 73
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonAdaptedDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " * Jackson-friendly version of {@Deadline Deadline}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"deadlineDescription\") String description, @JsonProperty(\"deadlineTime\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "                               String time, @JsonProperty(\"deadlineTag\") String tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.time \u003d source.getTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.tag \u003d source.getTag();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return new Deadline(description, time, tag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 38
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonAdaptedLink.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Jackson-friendly version of {@link Link}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class JsonAdaptedLink {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String linkTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final boolean marked;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructs a {@code JsonAdaptedLink} with the given parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public JsonAdaptedLink(@JsonProperty(\"linkTitle\") String linkTitle, @JsonProperty(\"url\") String url,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                           @JsonProperty(\"marked\") boolean marked) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d linkTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.marked \u003d marked;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Converts a given {@code Link} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public JsonAdaptedLink(Link source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.linkTitle \u003d source.name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.url \u003d source.url;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.marked \u003d source.isMarked();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Link} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Link."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Link toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (!Link.isValidUrl(url)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new IllegalValueException(Link.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return new Link(linkTitle, url, marked);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 51
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonAdaptedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Jackson-friendly version of {@link TrackedModule}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private final List\u003cJsonAdaptedDeadline\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private final List\u003cJsonAdaptedLink\u003e links \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                             @JsonProperty(\"deadlines\") List\u003cJsonAdaptedDeadline\u003e deadlines,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                             @JsonProperty(\"links\") List\u003cJsonAdaptedLink\u003e links) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        if (deadlines !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            this.deadlines.addAll(deadlines);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (links !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.links.addAll(links);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Converts a given {@code TrackedModule} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public JsonAdaptedModule(TrackedModule source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleCode \u003d source.getModuleCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadlines.addAll(source.getDeadlineList().stream().map(JsonAdaptedDeadline::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        links.addAll(source.getLink().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                .map(JsonAdaptedLink::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Model} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public TrackedModule toModelType(ArchivedModuleList archivedModules) throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"moduleCode\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        Optional\u003cArchivedModule\u003e archivedModule \u003d archivedModules.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            .parallelStream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            .filter(a -\u003e a.getModuleCode().equals(moduleCode))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!archivedModule.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new IllegalValueException(String.format(\"Archived Module %s not found\", moduleCode));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule result \u003d new TrackedModule(archivedModule.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        for (JsonAdaptedDeadline deadline : deadlines) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            result.getDeadlineList().add(deadline.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (JsonAdaptedLink link : links) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            result.getLink().add(link.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 14,
      "alexwxh": 12,
      "CowSaysBaa": 57
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonAdaptedSemesterDetail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.SemesterDetail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Jackson-friendly version of {@code SemesterDetail}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonAdaptedSemesterDetail {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \"yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\u0027Z\u0027\"); // format used by NUSmods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final int semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String examDate; // ISO standard datetime format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final int examDuration; // duration in minutes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemesterDetail} with the given parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public JsonAdaptedSemesterDetail(@JsonProperty(\"semester\") int semester,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        @JsonProperty(\"examDate\") String examDate,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        @JsonProperty(\"examDuration\") int examDuration) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.examDuration \u003d examDuration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Converts this Jackson-friendly semester detail object into the model\u0027s {@code SemesterDetail} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public SemesterDetail toModelType() throws DateTimeParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // null indicates that the semester has no exam"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (examDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return new SemesterDetail(semester, null, examDuration);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new SemesterDetail(semester, LocalDateTime.parse(examDate, format), examDuration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 44
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonArchivedModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A static class to read Archived Modules from a Json file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonArchivedModuleList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns an ArchivedModuleList read from the Json file corresponding to the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * {@code resourceFileName}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @param resourceFileName the String representation of the filePath of the resource"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * file. The file must be in the ClassLoader\u0027s resource folder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static ArchivedModuleList readArchivedModules(String resourceFileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        List\u003cJsonAdaptedArchivedModule\u003e jsonArchivedModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        logger.fine(\"Attempting to read archived modules.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // @@author akosicki"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Code Snippet below is used to read a resource file as a String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Reused from https://stackoverflow.com/a/18897411 with minor modifications"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        InputStream jsonFileInputStream \u003d JsonArchivedModuleList.class.getClassLoader()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .getResourceAsStream(resourceFileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        requireNonNull(jsonFileInputStream);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Scanner sc \u003d new Scanner(jsonFileInputStream);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String jsonString \u003d sc.useDelimiter(\"\\\\A\").next();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            jsonArchivedModules \u003d JsonUtil.fromJsonString(jsonString,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                new TypeReference\u003cList\u003cJsonAdaptedArchivedModule\u003e\u003e(){});"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            logger.warning(\"Failed to fetch data of archived modules. Error: \" + e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            logger.warning(\"Returning an empty ArchivedModuleList.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return archivedModules;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (JsonAdaptedArchivedModule jsonAdaptedArchivedModule : jsonArchivedModules) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            ArchivedModule module \u003d jsonAdaptedArchivedModule.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            archivedModules.add(module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModules;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 66,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonModuleBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * A class to access ModuleBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class JsonModuleBookStorage implements ModuleBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String ARCHIVED_MODULES_RESOURCE_FILE_NAME \u003d \"data/archivedModules.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public JsonModuleBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyModuleBook readModuleBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return readModuleBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Similar to {@link #readModuleBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyModuleBook readModuleBook(Path filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModuleList archivedModules \u003d JsonArchivedModuleList.readArchivedModules("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            ARCHIVED_MODULES_RESOURCE_FILE_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            Optional\u003cJsonSerializableModuleBook\u003e jsonModuleBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                filePath, JsonSerializableModuleBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (!jsonModuleBook.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            moduleBook \u003d jsonModuleBook.get().toModelType(archivedModules);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ModuleBook\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ModuleBook\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            //TODO Unique Exception"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            logger.warning(\"Data file not found. Will be starting with an empty ModuleBook\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Similar to {@link #saveModuleBook(ReadOnlyModuleBook)}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(moduleBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleBook(moduleBook), filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "CowSaysBaa": 93
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonSerializableModuleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * An Immutable ModuleBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "@JsonRootName(value \u003d \"modulebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "class JsonSerializableModuleBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULES \u003d \"Module list contains duplicate Module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleBook} with the given modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public JsonSerializableModuleBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Converts a given {@code ReadOnlyModuleBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModuleBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public JsonSerializableModuleBook(ReadOnlyModuleBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Converts this module book into the model\u0027s {@code ModuleBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBook toModelType(ArchivedModuleList archivedModules) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            TrackedModule trackedModule \u003d jsonAdaptedModule.toModelType(archivedModules);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (moduleBook.hasModule(trackedModule)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            moduleBook.addModule(trackedModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 61
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/ModuleBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Represents a storage for {@link ModuleBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public interface ModuleBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns ModuleBook data as a {@link ModuleBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Returns an empty ModuleBook if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ReadOnlyModuleBook readModuleBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * @see #readModuleBook()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ReadOnlyModuleBook readModuleBook(Path filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Saves the given {@link ReadOnlyModuleBook} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param moduleBook cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @see #saveModuleBook(ReadOnlyModuleBook)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 3,
      "CowSaysBaa": 40
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public interface Storage extends ModuleBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    ReadOnlyModuleBook readModuleBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 32
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Manages storage of ModuleBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private ModuleBookStorage moduleBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public StorageManager(ModuleBookStorage moduleBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleBookStorage \u003d moduleBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBookStorage.getModuleBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyModuleBook readModuleBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return readModuleBook(moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ReadOnlyModuleBook readModuleBook(Path filePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBookStorage.readModuleBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        saveModuleBook(moduleBook, moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBookStorage.saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 77
    }
  },
  {
    "path": "src/main/java/seedu/module/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Represents a storage for {@link seedu.module.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Saves the given {@link seedu.module.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "CowSaysBaa": 8
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "         * @see seedu.module.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "CowSaysBaa": 5
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w13-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/HomeViewPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Panel containing the home page (when there is no active module being displayed)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class HomeViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String FXML \u003d \"HomeViewPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public HomeViewPanel() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 18
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/LinkButton.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Link;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Button that will launch the contained link when clicked"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class LinkButton extends Button {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Link link;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public LinkButton(Link link) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(link.name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (link.isMarked()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.setText(\"\\u2605\" + link.name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setTooltip(new Tooltip(link.name + \"\\n\" + link.url));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setPrefHeight(25);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setPrefWidth(160);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setOnAction(event -\u003e this.link.launch());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 25
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private SearchWindow searchWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    // Independent Ui parts belonging to the mainPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private HomeViewPanel homeViewPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ModuleViewPanel moduleViewPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private MenuItem searchMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        searchWindow \u003d new SearchWindow(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        setAccelerator(searchMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getDisplayedList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        homeViewPanel \u003d new HomeViewPanel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(homeViewPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getModuleBookFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Opens the search window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void handleSearch() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!searchWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            searchWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            searchWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Displays or Removes the currently displayed module."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private void handleShowModule() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Optional\u003cModule\u003e displayedModule \u003d logic.getDisplayedModule();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Removes the current displayed module"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (moduleViewPanel !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            mainPanelPlaceholder.getChildren().remove(moduleViewPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Early return if nothing to display"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (displayedModule.isEmpty()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleViewPanel \u003d new ModuleViewPanel(displayedModule.get());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(moduleViewPanel.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @see seedu.module.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            if (commandResult.isShowModule()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                handleShowModule();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 33,
      "-": 181,
      "CowSaysBaa": 34
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/ModuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Pane trackedStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleCode.setText(module.getModuleCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        title.setText(module.getTitle());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        description.setText(module.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (module.isTracked()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            trackedStatus.getStyleClass().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            trackedStatus.getStyleClass().add(\"tag-tracked\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 8,
      "CowSaysBaa": 63
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/ModuleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e displayedList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleListView.setItems(displayedList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        protected void updateItem(Module trackedModule, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            super.updateItem(trackedModule, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (empty || trackedModule \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                setGraphic(new ModuleCard(trackedModule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 46
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/ModuleSemesterDetailCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.SemesterDetail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * An UI component that displays semester details of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ModuleSemesterDetailCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String FXML \u003d \"ModuleSemesterDetail.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM YYYY hh:mma\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label semesterLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private HBox examDetailBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label examDateLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label examDurationLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label notOfferedLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label noExamLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs the graphic representation of {@code SemesterDetail}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ModuleSemesterDetailCard(SemesterDetail semesterDetail) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        semesterLabel.setText(prettifySemesterIndex(semesterDetail.getSemester()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (!semesterDetail.isOffered()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            examDetailBox.setVisible(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            noExamLabel.setVisible(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (semesterDetail.getExamDate().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            examDetailBox.setVisible(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            notOfferedLabel.setVisible(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        examDateLabel.setText(prettifyExamDate(semesterDetail.getExamDate().get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        examDurationLabel.setText(prettifyExamDuration(semesterDetail.getExamDuration()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        noExamLabel.setVisible(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        notOfferedLabel.setVisible(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Prettifies the {@code semester} index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private String prettifySemesterIndex(int semester) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return String.format(\"Semester %d\", semester);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return String.format(\"Special Term %d\", semester - 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return \"Invalid semester\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Prettifies the {@code examDate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private String prettifyExamDate(LocalDateTime examDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (examDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            return \"Invalid Exam Date\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // TODO: Extract offset to config and use ZonedDateTime if possible"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return examDate.plusHours(8).format(dateTimeFormat);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Prettifies the {@code examDuration}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private String prettifyExamDuration(int examDuration) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        int hours \u003d examDuration / 60;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        int minutes \u003d examDuration % 60;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (hours \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            sb.append(hours);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            sb.append(\" hour\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            if (hours \u003e 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                sb.append(\"s\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        if (minutes \u003e 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            sb.append(\" and \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            sb.append(minutes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            sb.append(\" minutes\"); // shouldn\u0027t have 0/1 minute cases"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 112
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/ModuleViewPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.SemesterDetail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import seedu.module.model.module.Trackable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Panel containing the active displayed module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ModuleViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String FXML \u003d \"ModuleViewPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Accordion moduleDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private TitledPane moduleDetailsPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Text description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Text prerequisite;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Text preclusion;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ListView\u003cSemesterDetail\u003e semesterData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private FlowPane links;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ModuleViewPanel(Module module) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleCode.setText(module.getModuleCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        title.setText(module.getTitle());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        description.setText(module.getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        prerequisite.setText(module.getPrerequisite()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .orElse(\"There are no prerequisites for this module.\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        preclusion.setText(module.getPreclusion()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .orElse(\"There are no preclusions for this module.\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        semesterData.setItems(module.getSemesterDetails().getAsObservableList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        semesterData.setCellFactory(listView -\u003e new ModuleSemesterDetailCell());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Expands the accordion if the module is not yet tracked"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleDetails.setExpandedPane(moduleDetailsPane);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (module instanceof Trackable) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            moduleDetails.setExpandedPane(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Trackable trackedModule \u003d ((Trackable) module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            deadline.setText(trackedModule.getDeadline());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            trackedModule.getLink().stream().map(link -\u003e new LinkButton(link))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    .forEach(button -\u003e links.getChildren().add(button));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            links.setPrefWrapLength(500);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            links.setHgap(10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            links.setVgap(5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    class ModuleSemesterDetailCell extends ListCell\u003cSemesterDetail\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        protected void updateItem(SemesterDetail semesterDetail, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            super.updateItem(semesterDetail, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            if (empty || semesterDetail \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                setGraphic(new ModuleSemesterDetailCard(semesterDetail).getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 73,
      "Kzrthikz": 3,
      "alexwxh": 12
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/SearchWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Controller for a search page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class SearchWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SearchWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String FXML \u003d \"SearchWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Button searchButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private TextField moduleCodesBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private TextField moduleTitleBox;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private TextField descriptionBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private TextField prerequisitesBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private TextField preclusionsBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private CheckBox semOneBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private CheckBox semTwoBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private CheckBox semThreeBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private CheckBox semFourBox;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Creates a new SearchWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @param root Stage to use as the root of the searchWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public SearchWindow(Stage root) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public SearchWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Shows the search window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        logger.fine(\"Showing search page about the application.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Search for the given module."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private void search() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        mainWindow.executeCommand(createCommand());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Creates the command string from user UI input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private String createCommand() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        boolean isEmptyFields \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        StringBuilder command \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        command.append(\"find \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!moduleCodesBox.getText().isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"mod\\\\ \").append(moduleCodesBox.getText()).append(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!moduleTitleBox.getText().isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"title\\\\ \").append(moduleTitleBox.getText()).append(\" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!descriptionBox.getText().isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"desc\\\\ \").append(descriptionBox.getText()).append(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!prerequisitesBox.getText().isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"prereq\\\\ \").append(prerequisitesBox.getText()).append(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (!preclusionsBox.getText().isEmpty()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"preclu\\\\ \").append(preclusionsBox.getText()).append(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (semOneBox.isSelected() || semTwoBox.isSelected() || semThreeBox.isSelected() || semFourBox.isSelected()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            isEmptyFields \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"sem\\\\ \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (semOneBox.isSelected()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                command.append(\"1 \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (semTwoBox.isSelected()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                command.append(\"2 \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (semThreeBox.isSelected()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                command.append(\"3 \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            if (semFourBox.isSelected()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                command.append(\"4 \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        if (isEmptyFields) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            command.append(\"all\\\\\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return command.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 174
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "CowSaysBaa": 5
    }
  },
  {
    "path": "src/main/java/seedu/module/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "CowSaysBaa": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".text-bright {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".text-command {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 40%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-padding: 4px 4px 4px 4px;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/* Accordian */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".accordian {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-text-fill: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane:focused {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane \u003e .title {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-padding: 5px, 5px, 5px, 5px;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane:focused \u003e .title {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-color: derive(#1d1d1d, 40%);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane:collapsed \u003e .title \u003e .arrow-button .arrow {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-rotate: -90;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane \u003e *.content {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-box-border,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    linear-gradient(to bottom, derive(-fx-color,-02%), derive(-fx-color,65%) 12%,      derive(-fx-color,23%) 88%, derive(-fx-color,50%) 99%, -fx-box-border);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-insets: 0, 0 1 1 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-padding: 0.167em;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "geshuming"
        },
        "content": " }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".titled-pane:focused \u003e .title \u003e .arrow-button .arrow {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    -fx-padding: 5 7 5 7;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "geshuming"
        },
        "content": "#mainPanel {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".tag-archived {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: rgb(194, 192, 192);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "geshuming"
        },
        "content": ".tag-tracked {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-background-color: rgb(125, 221, 125);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 69,
      "alexwxh": 1,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/main/resources/view/HomeViewPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cHBox id\u003d\"mainPanel\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"background\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cLabel alignment\u003d\"TOP_CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"label-header\" text\u003d\"Welcome to ModuleBook\" textAlignment\u003d\"JUSTIFY\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"Summary of commands:\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"list\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - lists all tracked modules\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"view \u0026lt;MODULE_CODE\u0026gt;\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - views a module\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"back\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - returns from module view\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"add \u0026lt;MODULE_CODE\u0026gt;\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - adds a module to track it\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"delete \u0026lt;MODULE_CODE\u0026gt;\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - deletes a module from the tracked list\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cTextFlow lineSpacing\u003d\"1.0\" styleClass\u003d\"text-bright\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cTextFlow styleClass\u003d\"text-command\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\"find [\u0026lt;PREFIX\u0026gt;\\ [\u0026lt;keywords\u0026gt;...]...]\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" styleClass\u003d\"text-bright\" text\u003d\" - searches for a module, see our user guide for more details\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 111
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"900.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Module App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Search\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"searchMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSearch\" text\u003d\"Search\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003cVBox fx:id\u003d\"moduleList\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cString fx:value\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cString fx:value\u003d\"background\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003c/styleClass\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"50.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 24,
      "-": 44,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"120.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$index\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003cPane fx:id\u003d\"trackedStatus\" styleClass\u003d\"tag-archived\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 18,
      "CowSaysBaa": 25
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleSemesterDetail.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"30.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003cLabel fx:id\u003d\"semesterLabel\" styleClass\u003d\"label-bright\" text\u003d\"\\$semester\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cHBox fx:id\u003d\"examDetailBox\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cLabel styleClass\u003d\"text-bright\" text\u003d\"Exam Date: \" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cLabel fx:id\u003d\"examDateLabel\" styleClass\u003d\"text-bright\" text\u003d\"\\$examDate\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cLabel styleClass\u003d\"text-bright\" text\u003d\"Duration: \" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cLabel fx:id\u003d\"examDurationLabel\" styleClass\u003d\"text-bright\" text\u003d\"\\$examDuration\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cLabel fx:id\u003d\"notOfferedLabel\" styleClass\u003d\"text-bright\" text\u003d\"Not offered\" StackPane.alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cLabel fx:id\u003d\"noExamLabel\" styleClass\u003d\"text-bright\" text\u003d\"No Exams for this semester\" StackPane.alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 52
    }
  },
  {
    "path": "src/main/resources/view/ModuleViewPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cScrollPane id\u003d\"mainPanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hvalue\u003d\"1.0\" styleClass\u003d\"background\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "  \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003cVBox id\u003d\"mainPanel\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"label-header\" text\u003d\"\\$title\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cAccordion fx:id\u003d\"moduleDetails\" styleClass\u003d\"accordian\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "           \u003cpanes\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "             \u003cTitledPane fx:id\u003d\"moduleDetailsPane\" expanded\u003d\"false\" text\u003d\"Module Details\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Description\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cTextFlow styleClass\u003d\"text-bright\" textAlignment\u003d\"JUSTIFY\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cText fx:id\u003d\"description\" styleClass\u003d\"text-bright\" text\u003d\"\\$description\" textAlignment\u003d\"JUSTIFY\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Prerequisites\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cTextFlow styleClass\u003d\"text-bright\" textAlignment\u003d\"JUSTIFY\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cText fx:id\u003d\"prerequisite\" styleClass\u003d\"text-bright\" text\u003d\"\\$prerequisite\" textAlignment\u003d\"JUSTIFY\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Preclusions\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cTextFlow styleClass\u003d\"text-bright\" textAlignment\u003d\"JUSTIFY\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cText fx:id\u003d\"preclusion\" styleClass\u003d\"text-bright\" text\u003d\"\\$preclusion\" textAlignment\u003d\"JUSTIFY\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Semesters offered\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                           \u003cListView fx:id\u003d\"semesterData\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"125.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cString fx:value\u003d\"accordian\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                     \u003cString fx:value\u003d\"titled_pane\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                  \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "               \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "           \u003c/panes\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "               \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"label-bright\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "         \u003cVBox alignment\u003d\"TOP_LEFT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Links: \" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u003cHBox alignment\u003d\"BOTTOM_LEFT\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"links\" alignment\u003d\"BOTTOM_LEFT\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "  \u003c/content\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 76,
      "Kzrthikz": 4,
      "alexwxh": 11
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "geshuming": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SearchWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Search\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"372.0\" prefWidth\u003d\"378.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "               \u003cTitledPane collapsible\u003d\"false\" prefHeight\u003d\"498.0\" prefWidth\u003d\"547.0\" text\u003d\"Search for a module\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                     \u003cVBox prefHeight\u003d\"326.0\" prefWidth\u003d\"462.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" text\u003d\"Modlue Codes: \"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cTextField fx:id\u003d\"moduleCodesBox\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" text\u003d\"Module Title:    \"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cTextField fx:id\u003d\"moduleTitleBox\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" text\u003d\"Description:      \"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cTextField fx:id\u003d\"descriptionBox\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" text\u003d\"Prerequisites:    \"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cTextField fx:id\u003d\"prerequisitesBox\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" text\u003d\"Preclusions:      \"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cTextField fx:id\u003d\"preclusionsBox\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" prefHeight\u003d\"27.0\" prefWidth\u003d\"510.0\" text\u003d\"Semesters:        \"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003cgraphic\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"123.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                       \u003cCheckBox fx:id\u003d\"semOneBox\" mnemonicParsing\u003d\"false\" text\u003d\"Sem 1\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                       \u003cCheckBox fx:id\u003d\"semTwoBox\" mnemonicParsing\u003d\"false\" text\u003d\"Sem 2\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                       \u003cCheckBox fx:id\u003d\"semThreeBox\" mnemonicParsing\u003d\"false\" text\u003d\"Special Term 1\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                       \u003cCheckBox fx:id\u003d\"semFourBox\" mnemonicParsing\u003d\"false\" text\u003d\"Special Term 2\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                              \u003c/graphic\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                           \u003cButton fx:id\u003d\"searchButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#search\" text\u003d\"Search\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "               \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 79
    }
  },
  {
    "path": "src/test/java/seedu/module/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "CowSaysBaa": 4
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void fromJsonString_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_ARRAY_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        List\u003cSerializableTestClass\u003e serializableTestClassList \u003d JsonUtil.fromJsonString("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            FileUtil.readFromFile(SERIALIZATION_FILE), new TypeReference\u003cList\u003cSerializableTestClass\u003e\u003e(){});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(0).getName(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(0).getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(0).getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(1).getName(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(1).getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(serializableTestClassList.get(1).getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 24,
      "-": 42,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/java/seedu/module/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.DeleteCommand.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ModuleBookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setModuleBook(new ModuleBookBuilder().build());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Set up storage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                new JsonModuleBookStorage(temporaryFolder.resolve(\"moduleBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        StorageManager storage \u003d new StorageManager(moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Set up model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBookBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Setup LogicManager with JsonmoduleBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                new JsonModuleBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionModuleBook.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        StorageManager storage \u003d new StorageManager(moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" \" + archivedModule.getModuleCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        TrackedModule expectedModule \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    // TODO: Fix this test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Disabled(\"Archived List is modifiable!\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getDisplayedList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.showAllTrackedModules();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getDisplayedList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getDisplayedModule_withoutSet_returnEmptyOptional() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Optional\u003cModule\u003e expectedModule \u003d Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(expectedModule, model.getDisplayedModule());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getDisplayedModule_withSet_returnModule() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Optional\u003cModule\u003e expectedModule \u003d Optional.of(archivedModule);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setDisplayedModule(archivedModule);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(expectedModule, model.getDisplayedModule());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static class JsonModuleBookIoExceptionThrowingStub extends JsonModuleBookStorage {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        private JsonModuleBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 81,
      "-": 116,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//  * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//  */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Module validModule \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandSuccess(new AddCommand(validModule), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 String.format(AddCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Module moduleInList \u003d model.getAddressBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandFailure(new AddCommand(moduleInList), model, AddCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 45
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.AddCommand.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.AddCommand.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.AddCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ModuleBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String moduleCode \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_addValidModule_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBookBuilder().withArchivedModules("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            new ArchivedModuleListBuilder().withArchivedModule(archivedModule).build())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.addModule(trackedModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.showAllTrackedModules();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, trackedModule),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(new SameModuleCodePredicate(moduleCode));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_addLowerCaseModule_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBookBuilder().withArchivedModules("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            new ArchivedModuleListBuilder().withArchivedModule(archivedModule).build())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.addModule(trackedModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.showAllTrackedModules();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, trackedModule),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(new SameModuleCodePredicate(moduleCode.toLowerCase()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(addCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_addInvalidModule_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModuleList listOfArchivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfArchivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(listOfArchivedModules);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(new SameModuleCodePredicate(\"INVALID\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandFailure(addCommand, model, MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_addDuplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModuleList listOfArchivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfArchivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(listOfArchivedModules);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.addModule(trackedModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(new SameModuleCodePredicate(archivedModule.getModuleCode()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandFailure(addCommand, model, MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 12,
      "CowSaysBaa": 87
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/BackCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.commands.BackCommand.MESSAGE_BACK_COMMAND_NOT_EFFECTIVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.commands.BackCommand.MESSAGE_BACK_COMMAND_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class BackCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void execute_back_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setDisplayedModule(new ArchivedModuleBuilder().build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_BACK_COMMAND_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        System.out.printf(\"%s %s %s %s\\n\", new BackCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertCommandSuccess(new BackCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void execute_back_notEffective() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_BACK_COMMAND_NOT_EFFECTIVE, false, true, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertCommandSuccess(new BackCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 37
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// @Disabled(\"Migrated AddressBook to ModuleBook\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedModel.setAddressBook(new ModuleBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 33
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different showModule value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different showModule value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 9,
      "-": 50,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook expectedAddressBook \u003d new ModuleBook(actualModel.getModuleBook());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getModuleBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        Module trackedModule \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        final String[] splitName \u003d trackedModule.getTitle().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.updateFilteredModuleList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 79
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.DeleteCommand.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.TrackedModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String moduleCode \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_deleteValidModule_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.addModule(trackedModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, trackedModule),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        false, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new SameModuleCodePredicate(moduleCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_deleteLowerCaseModule_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.addModule(trackedModule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, trackedModule),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        false, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new SameModuleCodePredicate(moduleCode.toLowerCase()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_deleteInvalidModule_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.addModule(trackedModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, trackedModule),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                        false, false, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new SameModuleCodePredicate(\"INVALID\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandFailure(deleteCommand, model, MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 74
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "-": 14,
      "CowSaysBaa": 5
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private final String moduleCode \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_findModule_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModuleList listOfArchivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfArchivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(listOfArchivedModules);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cString\u003e moduleKeyword \u003d Arrays.asList(\"cs\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cPredicate\u003cModule\u003e\u003e listOfPredicates \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                Arrays.asList(new ModuleCodeContainsKeywordsPredicate(moduleKeyword));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                expectedModel.getFilteredArchivedModuleList().size()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(listOfPredicates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void execute_findModuleNoneFound_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArchivedModuleList listOfArchivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfArchivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(listOfArchivedModules);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cString\u003e moduleKeyword \u003d Arrays.asList(\"ma\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cPredicate\u003cModule\u003e\u003e listOfPredicates \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                Arrays.asList(new ModuleCodeContainsKeywordsPredicate(moduleKeyword));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                0),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(listOfPredicates);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 75
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 1,
      "-": 14,
      "CowSaysBaa": 5
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//  * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 39
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.commands.ViewCommand.MESSAGE_VIEW_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final String moduleCode \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void execute_viewArchivedModule_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // TODO: EXTRACT TO UTILS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.setDisplayedModule(archivedModule);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_VIEW_MODULE_SUCCESS, moduleCode),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            false, true, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertCommandSuccess(new ViewCommand(moduleCode), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void execute_viewTrackedModule_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // TODO: EXTRACT TO UTILS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook.addModule(trackedModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        model.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.setModuleBook(moduleBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModel.setDisplayedModule(trackedModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_VIEW_MODULE_SUCCESS, moduleCode),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            false, true, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertCommandSuccess(new ViewCommand(moduleCode), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void execute_viewArchivedModule_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ViewCommand(moduleCode).execute(new ModelManager()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 70
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"cs2103t\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private SameModuleCodePredicate addCommandParserPredicate \u003d new SameModuleCodePredicate(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parse_validArgs_returnsAddCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE, new AddCommand(addCommandParserPredicate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 26
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"cs2103t\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private SameModuleCodePredicate deleteCommandParserPredicate \u003d new SameModuleCodePredicate(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE, new DeleteCommand(deleteCommandParserPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "CowSaysBaa": 11
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * outside of the FindCommandParser code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private static final String VALID_STRING \u003d \"mod\\\\ cs\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private List\u003cString\u003e validModuleArguments \u003d Arrays.asList(\"cs\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private List\u003cPredicate\u003cModule\u003e\u003e validPredicateList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            Arrays.asList(new ModuleCodeContainsKeywordsPredicate(validModuleArguments));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseList_validArgs_returnsListOfLists() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] keywords \u003d {\"mod\\\\\", \"cs\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e correctList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e correctModule \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"mod\\\\\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"cs\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        correctList.add(correctModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(correctList, parser.parseList(keywords));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseList_invalidArgsAndValidArgs_returnsListOfLists() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] keywords \u003d {\"INVALID TEXT\", \"INVALID TEXT 2\", \"mod\\\\\", \"cs\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e correctList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e correctModule \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"mod\\\\\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"cs\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        correctList.add(correctModule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(correctList, parser.parseList(keywords));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseList_validArgsWithNonsenseFields_returnsListOfLists() throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] keywords \u003d {\"mod\\\\\", \"modINVALID\\\\\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e correctList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e correctModule \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"mod\\\\\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"modINVALID\\\\\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        correctList.add(correctModule);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(correctList, parser.parseList(keywords));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseList_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] keywords \u003d {\"INVALID INPUT\"};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseList(keywords));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseList_emptyFields_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String[] keywords \u003d {\"mod\\\\\"};"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseList(keywords));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseListOfLists_validArgs_returnsListOfLists() throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e inputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e correctModule \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"mod\\\\\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"cs\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"ma\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        inputList.add(correctModule);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cModuleCodeContainsKeywordsPredicate\u003e correctList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e moduleArguments \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"cs\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"ma\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate correctModulePredicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(moduleArguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        correctList.add(correctModulePredicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(correctList, parser.parseListOfLists(inputList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parseListOfLists_validArgsUpperCase_returnsListOfLists() throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e inputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e correctModule \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"mod\\\\\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"CS\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"MA\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        inputList.add(correctModule);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cModuleCodeContainsKeywordsPredicate\u003e correctList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e moduleArguments \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"cs\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"ma\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate correctModulePredicate \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(moduleArguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        correctList.add(correctModulePredicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(correctList, parser.parseListOfLists(inputList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseSuccess(parser, VALID_STRING, new FindCommand(validPredicateList));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 151
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/LevenshteinDistanceCheckerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.LevenshteinDistanceChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class LevenshteinDistanceCheckerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_sameString_returnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"hello\", \"hello\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_emptyString_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertFalse(checker.fuzzyContains(\"hello\", \"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_oneDifference_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"hello\", \"hallo\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_twoDifference_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"hello\", \"hailo\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_threeDifference_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"hello\", \"haiio\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_fourDifference_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertFalse(checker.fuzzyContains(\"hello\", \"haiil\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_oneAlphabetMissing_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"engineering\", \"enginering\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_twoAlphabetMissing_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"engineering\", \"enginring\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_threeAlphabetMissing_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"engineering\", \"engineeg\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_fourAlphabetsMissing_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertFalse(checker.fuzzyContains(\"engineering\", \"engiing\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_fourAlphabetsChanged_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertFalse(checker.fuzzyContains(\"engineering\", \"engiabcding\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_threeSeparateAlphabetsChanged_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(\"engineering\", \"ngnering\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void fuzzyContains_longSentenceContainsKeywordWithMistake_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String sentence \u003d \"This module introduces fundamental concepts of physics and is\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" illustrated with many practical examples. Topics covered include a) Electricity \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"and magnetism, where the basic concepts of electric and magnetic fields, forces on\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" charged particles, electric potential, electromotive force, work and energy, are\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" described. The properties of basic electrical circuits comprising resistors,\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" inductors and capacitors are discussed, along with analysis of their transient \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"and steady-state behaviour. Understanding the role of Maxwell\u0027s equations in\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" electromagnetism is emphasized; b) Waves, introducing properties of waves, \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"including geometric optics, propagation, interference and diffraction, and\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" electromagnetic waves; and c) Quantum physics, where new physics concepts \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"which led to the quantization of energy are introduced, leading to an\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" explanation of atomic transitions, atomic spectra and the physical and the\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" chemical properties of the atom. The uncertainty principle, wave-mechanics and\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \" wave particle duality concepts are covered, together with the use of wavefunctions \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"in predicting the behaviour of trapped particles. The module is targeted essentially \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                + \"at Engineering students.\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertTrue(checker.fuzzyContains(sentence.toLowerCase(), \"quantm\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void partitionString_oneWord_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String other \u003d \"a b c d e\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String current \u003d \"one\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"a\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"b\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"c\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"d\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"e\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d checker.partitionString(other, current);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void partitionString_twoWord_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String other \u003d \"a b c d e\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String current \u003d \"one two\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"a b\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"b c\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"c d\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"d e\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"e\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d checker.partitionString(other, current);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void partitionString_threeWord_returnsTrue() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String other \u003d \"a b c d e\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String current \u003d \"one two three\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"a b c\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"b c d\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"c d e\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"d e\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"e\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d checker.partitionString(other, current);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void partitionString_oneOtherAndOneWord_returnsTrue() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String other \u003d \"a\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String current \u003d \"one\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"a\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d checker.partitionString(other, current);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public void partitionString_oneOtherAndTwoWords_returnsTrue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String other \u003d \"a\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        String current \u003d \"one two\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                add(\"a\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        };"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        LevenshteinDistanceChecker checker \u003d new LevenshteinDistanceChecker(3);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d checker.partitionString(other, current);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 201
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/ModuleBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.predicate.SameModuleCodePredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.testutil.TrackedModuleBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ModuleBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final ModuleBookParser parser \u003d new ModuleBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        SameModuleCodePredicate predicate \u003d new SameModuleCodePredicate(archivedModule.getModuleCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                + \" \" + archivedModule.getModuleCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(new AddCommand(predicate), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        SameModuleCodePredicate predicate \u003d new SameModuleCodePredicate(trackedModule.getModuleCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + trackedModule.getModuleCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(new DeleteCommand(predicate), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"mod\\\\\", \"cs2030\", \"ma1521\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        List\u003cString\u003e predicateKeywords \u003d Arrays.asList(\"cs2030\", \"ma1521\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d new ModuleCodeContainsKeywordsPredicate(predicateKeywords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        ArrayList\u003cPredicate\u003cModule\u003e\u003e listOfPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        listOfPredicates.add(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertEquals(new FindCommand(listOfPredicates), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand(ViewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                + \" \" + archivedModule.getModuleCode());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(new ViewCommand(archivedModule.getModuleCode()), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_back() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(parser.parseCommand(BackCommand.COMMAND_WORD) instanceof BackCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 96,
      "CowSaysBaa": 20
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 195
    }
  },
  {
    "path": "src/test/java/seedu/module/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"cs2103t\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertParseSuccess(parser, VALID_MODULE_CODE, new ViewCommand(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 24
    }
  },
  {
    "path": "src/test/java/seedu/module/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleListBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ModuleBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(new ModuleBook(), new ModuleBook(modelManager.getModuleBook()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        userPrefs.setModuleBookFilePath(Paths.get(\"module/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        userPrefs.setModuleBookFilePath(Paths.get(\"new/module/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setModuleBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void setModuleBookFilePath_validPath_setsModuleBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Path path \u003d Paths.get(\"module/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        modelManager.setModuleBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(path, modelManager.getModuleBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void hasModule_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBookBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withArchivedModules(new ArchivedModuleListBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .withArchivedModule(new ArchivedModuleBuilder().build())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .build())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook differentModuleBook \u003d new ModuleBookBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withArchivedModules(new ArchivedModuleListBuilder().build())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        modelManager \u003d new ModelManager(moduleBook, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(moduleBook, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // TODO: Find out why this fails"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different ModuleBook -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(differentModuleBook, userPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        differentUserPrefs.setModuleBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(moduleBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 35,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/module/model/ModuleBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ModuleBookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.TrackedModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class ModuleBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ModuleBook moduleBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook \u003d new ModuleBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertEquals(Collections.emptyList(), moduleBook.getModuleList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void resetData_withValidReadOnlyModuleBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook newData \u003d new ModuleBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(newData, moduleBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleBook.hasModule(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void hasTrackedModule_trackedModuleNotInModuleBook_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(moduleBook.hasModule(new TrackedModuleBuilder().build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void hasTrackedModule_trackedModuleInModuleBook_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModule(new ArchivedModuleBuilder().build())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook.addModule(trackedModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(moduleBook.hasModule(trackedModule));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getTrackedModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e moduleBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 19,
      "geshuming": 36,
      "CowSaysBaa": 12
    }
  },
  {
    "path": "src/test/java/seedu/module/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setModuleBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/ArchivedModuleListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ArchivedModuleListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final ArchivedModuleList archivedModuleList \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private final ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void contains_nullArchivedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archivedModuleList.contains(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void contains_archivedModuleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModuleList.contains(archivedModule));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void contains_archivedModuleInList_returnsTrue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModuleList.add(archivedModule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModuleList.contains(archivedModule));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModuleList.add(archivedModule);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule editedArchivedModule \u003d new ArchivedModuleBuilder(archivedModule).withTitle(\"Different Title\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(\"The quick brown fox jumps over the lazy dog\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModuleList.contains(editedArchivedModule));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e archivedModuleList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            -\u003e archivedModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 50
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/ArchivedModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ArchivedModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.isSameModule(new ArchivedModuleBuilder(archivedModule).build()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.isSameModule(archivedModule));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.isSameModule(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.isSameModule(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModuleCode(\"CS1101S\").build()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different title -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.isSameModule(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withTitle(\"Different Title\").build()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different description -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.isSameModule(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(\"The quick brown fox jumps over the lazy dog\").build()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.equals(new ArchivedModuleBuilder(archivedModule).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(archivedModule.equals(archivedModule));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.equals(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.equals(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModuleCode(\"CS1101S\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.equals(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withTitle(\"Different Title\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.equals(new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(\"The quick brown fox jumps over the lazy dog\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 63,
      "Kzrthikz": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.TrackedModuleBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private TrackedModule trackedModule \u003d new TrackedModuleBuilder().withModule(archivedModule).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void isTracked() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertFalse(archivedModule.isTracked());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertTrue(trackedModule.isTracked());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 15,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//              secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//             firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//             Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 78
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/TrackedModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.testutil.TrackedModuleBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class TrackedModuleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModule ARCHIVED_MODULE \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().withModule(ARCHIVED_MODULE).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertTrue(trackedModule.isSameModule(new TrackedModuleBuilder(trackedModule).build()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertTrue(trackedModule.isSameModule(trackedModule));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.isSameModule(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentModuleCode \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModuleCode(\"CS1101S\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.isSameModule(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .withModule(archivedModuleDifferentModuleCode).build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different title -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentTitle \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withTitle(\"Different Title\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertTrue(trackedModule.isSameModule(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .withModule(archivedModuleDifferentTitle).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different description -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentDescription \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(\"Definitely different description\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertTrue(trackedModule.isSameModule(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                .withModule(archivedModuleDifferentDescription).build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModuleBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertTrue(trackedModule.equals(new TrackedModuleBuilder(trackedModule).build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentModuleCode \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModuleCode(\"CS1101S\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.equals(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModule(archivedModuleDifferentModuleCode).build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentTitle \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withTitle(\"Different Title\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.equals(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModule(archivedModuleDifferentTitle).build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModuleDifferentDescription \u003d new ArchivedModuleBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(\"Definitely different description\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        assertFalse(trackedModule.equals(new TrackedModuleBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withModule(archivedModuleDifferentDescription).build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 54,
      "geshuming": 27
    }
  },
  {
    "path": "src/test/java/seedu/module/model/module/UniqueModuleListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// package seedu.module.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import static seedu.module.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// import seedu.module.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertFalse(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Module editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertTrue(uniqueModuleList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.setModule(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedUniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         Module editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.setModule(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedUniqueModuleList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.setModule(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         List\u003cModule\u003e moduleList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//         assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//                 -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "CowSaysBaa": 170
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonAdaptedArchivedModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonAdaptedArchivedModuleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModule VALID_ARCHIVED_MODULE \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String VALID_MODULECODE \u003d VALID_ARCHIVED_MODULE.getModuleCode();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String VALID_TITLE \u003d VALID_ARCHIVED_MODULE.getTitle();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d VALID_ARCHIVED_MODULE.getDescription();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_validModule() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonAdaptedArchivedModule jsonArchivedModule \u003d new JsonAdaptedArchivedModule("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            VALID_MODULECODE, VALID_TITLE, VALID_DESCRIPTION, null, null, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(VALID_ARCHIVED_MODULE, jsonArchivedModule.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 27
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonAdaptedModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModule ARCHIVED_MODULE \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModuleList ARCHIVED_MODULE_LIST \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final TrackedModule TRACKED_MODULE \u003d new TrackedModule(ARCHIVED_MODULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static void beforeAll() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ARCHIVED_MODULE_LIST.add(ARCHIVED_MODULE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(ARCHIVED_MODULE.getModuleCode(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(TRACKED_MODULE, module.toModelType(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String moduleCode \u003d \"CS2999\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(moduleCode, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String expectedMessage \u003d String.format(\"Archived Module %s not found\", moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e module.toModelType(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"moduleCode\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e module.toModelType(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 49
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonArchivedModuleListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.storage.JsonArchivedModuleList.readArchivedModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "class JsonArchivedModuleListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String VALID_ARCHIVED_MODULES_FILE_PATH \u003d \"data/archivedModules.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final String INVALID_ARCHIVED_MODULES_FILE_PATH \u003d \"data/doesntexist.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void readArchivedModules_validArchivedModulesFilePath_returnArchivedModules() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList jsonArchivedModuleList \u003d readArchivedModules(VALID_ARCHIVED_MODULES_FILE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList expectedArchivedModuleList \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedArchivedModuleList.add(new ArchivedModuleBuilder().build());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(jsonArchivedModuleList, expectedArchivedModuleList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void readArchivedModules_invalidArchivedModulesFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(java.lang.NullPointerException.class, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            -\u003e readArchivedModules(INVALID_ARCHIVED_MODULES_FILE_PATH));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 31
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonModuleBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonModuleBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModuleBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModule ARCHIVED_MODULE \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModuleList ARCHIVED_MODULE_LIST \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static void beforeAll() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ARCHIVED_MODULE_LIST.add(ARCHIVED_MODULE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void readModuleBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readModuleBook(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ReadOnlyModuleBook readModuleBook(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new JsonModuleBookStorage(Paths.get(filePath)).readModuleBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void read_missingFile_returnNewModuleBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(readModuleBook(\"NonExistentFile.json\"), new ModuleBook(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void read_notJsonFormat_returnNewModuleBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(readModuleBook(\"notJsonFormatModuleBook.json\"), new ModuleBook(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void readModuleBook_invalidModuleModuleBook_returnNewModuleBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(readModuleBook(\"invalidModuleModuleBook.json\"), new ModuleBook(ARCHIVED_MODULE_LIST));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void readAndSaveModuleBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempModuleBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook original \u003d new ModuleBook(ARCHIVED_MODULE_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonModuleBookStorage jsonModuleBookStorage \u003d new JsonModuleBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        jsonModuleBookStorage.saveModuleBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ReadOnlyModuleBook readBack \u003d jsonModuleBookStorage.readModuleBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(original, new ModuleBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        TrackedModule trackedModule \u003d new TrackedModule(ARCHIVED_MODULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        original.addModule(trackedModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        jsonModuleBookStorage.saveModuleBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        readBack \u003d jsonModuleBookStorage.readModuleBook(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(original, new ModuleBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        original.removeModule(trackedModule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        jsonModuleBookStorage.saveModuleBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        readBack \u003d jsonModuleBookStorage.readModuleBook(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(original, new ModuleBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void saveModuleBook_nullModuleBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModuleBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Saves {@code moduleBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private void saveModuleBook(ReadOnlyModuleBook moduleBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            new JsonModuleBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                    .saveModuleBook(moduleBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void saveModuleBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModuleBook(new ModuleBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 110
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonSerializableModuleBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class JsonSerializableModuleBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableModuleBookTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Path TYPICAL_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModuleModuleBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleModuleBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleModuleBook.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static ArchivedModuleList archivedModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void beforeEach() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModule archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    // TODO: Finetune the typical modulebook object and test for deadlines/links"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonSerializableModuleBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                JsonSerializableModuleBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook moduleBookFromFile \u003d dataFromFile.toModelType(archivedModules);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook expectedModuleBook \u003d new ModuleBook(archivedModules);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        expectedModuleBook.addModule(new TrackedModule(new ArchivedModuleBuilder().build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(moduleBookFromFile, expectedModuleBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonSerializableModuleBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                JsonSerializableModuleBook.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e dataFromFile.toModelType(archivedModules));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonSerializableModuleBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geshuming"
        },
        "content": "                JsonSerializableModuleBook.class).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableModuleBook.MESSAGE_DUPLICATE_MODULES, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            -\u003e dataFromFile.toModelType(archivedModules));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 63
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        userPrefs.setModuleBookFilePath(Paths.get(\"modulebook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "CowSaysBaa": 6
    }
  },
  {
    "path": "src/test/java/seedu/module/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.testutil.ArchivedModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModule ARCHIVED_MODULE \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private static final ArchivedModuleList ARCHIVED_MODULE_LIST \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static void beforeAll() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ARCHIVED_MODULE_LIST.add(ARCHIVED_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d new JsonModuleBookStorage(getTempFilePath(\"mb\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        storageManager \u003d new StorageManager(moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void moduleBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         * {@link JsonModuleBookStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonModuleBookStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ModuleBook original \u003d new ModuleBook(ARCHIVED_MODULE_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        storageManager.saveModuleBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ReadOnlyModuleBook retrieved \u003d storageManager.readModuleBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertEquals(original, new ModuleBook(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public void getModuleBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        assertNotNull(storageManager.getModuleBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 26,
      "-": 51,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/ArchivedModuleBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.SemesterDetailList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A utility class to help with building ArchivedModule objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ArchivedModuleBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Lorem Ipsum\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private SemesterDetailList semesterDetails;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleCode \u003d DEFAULT_MODULE_CODE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        semesterDetails \u003d new SemesterDetailList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Initializes the ArchivedModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder(ArchivedModule moduleToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        title \u003d moduleToCopy.getTitle();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        description \u003d moduleToCopy.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the moduleCode of the {@code ArchivedModule} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the title of the {@code ArchivedModule} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the description of the {@code ArchivedModule} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the prerequisite of the {@code ArchivedModule} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleBuilder withPrerequisite(String prerequisite) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Constructs and returns the {@code ArchivedModule}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModule build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new ArchivedModule(moduleCode, title, description, prerequisite,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            preclusion, semesterDetails);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 31,
      "CowSaysBaa": 46
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/ArchivedModuleListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geshuming"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A utility class to help with building ArchivedModuleList objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * Defaults to empty list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geshuming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geshuming"
        },
        "content": "public class ArchivedModuleListBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private List\u003cArchivedModule\u003e archivedModules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleListBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Adds a {@code ArchivedModule} to the {@code ArchivedModuleList} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleListBuilder withArchivedModule(ArchivedModule archivedModule) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.archivedModules.add(archivedModule);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Builds and returns the archivedModuleList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ArchivedModuleList build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        ArchivedModuleList archivedModuleList \u003d new ArchivedModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        for (ArchivedModule m : archivedModules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            archivedModuleList.add(m);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return archivedModuleList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 39
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/ModuleBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.ModuleBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geshuming"
        },
        "content": "import seedu.module.model.module.ArchivedModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " * A utility class to help with building Modulebook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geshuming"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * The default ModuleBook comes with a list of 1 {@code ArchivedModule}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "public class ModuleBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    private ModuleBook moduleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook.setArchivedModules(new ArchivedModuleListBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withArchivedModule(new ArchivedModuleBuilder().build())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBookBuilder(ModuleBook moduleBook) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        this.moduleBook \u003d moduleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Adds a new {@code Module} to the {@code ModuleBook} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ModuleBookBuilder withTrackedModule(TrackedModule trackedModule) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        moduleBook.addModule(trackedModule);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the {@code ArchivedModuleList} of the {@code ModuleBook} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public ModuleBookBuilder withArchivedModules(ArchivedModuleList archivedModules) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        moduleBook.setArchivedModules(archivedModules);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public ModuleBook build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 15,
      "CowSaysBaa": 31
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public static final String JSON_ARRAY_STRING_REPRESENTATION \u003d String.format(\"[%n \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + JSON_STRING_REPRESENTATION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \",%n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + JSON_STRING_REPRESENTATION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \"%n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            + \"]\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geshuming": 7,
      "-": 71,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the middle index of the tracked module in the {@code model}\u0027s tracked module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the last index of the tracked module in the {@code model}\u0027s tracked module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "     * Returns the tracked module in the {@code model}\u0027s  tracked module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public static TrackedModule getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "CowSaysBaa": 11
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/TrackedModuleBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.ArchivedModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "import seedu.module.model.module.TrackedModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geshuming"
        },
        "content": " * A utility class to help with building TrackedModule objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "public class TrackedModuleBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    private ArchivedModule archivedModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    private List\u003cDeadline\u003e deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public TrackedModuleBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModule \u003d new ArchivedModuleBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        deadline \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Initializes the TrackedModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public TrackedModuleBuilder(TrackedModule moduleToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        archivedModule \u003d new ArchivedModuleBuilder().withModuleCode(moduleToCopy.getModuleCode())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withTitle(moduleToCopy.getTitle())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .withDescription(moduleToCopy.getDescription())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geshuming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        deadline \u003d moduleToCopy.getDeadlineList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geshuming"
        },
        "content": "     * Sets the archivedModule of the {@code TrackedModule} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geshuming"
        },
        "content": "    public TrackedModuleBuilder withModule(ArchivedModule archivedModule) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        this.archivedModule \u003d archivedModule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     * Sets the description of the {@code TrackedModule} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public TrackedModuleBuilder withDeadline(List\u003cDeadline\u003e deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    public TrackedModule build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geshuming"
        },
        "content": "        return new TrackedModule(archivedModule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kzrthikz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kzrthikz": 41,
      "geshuming": 12
    }
  },
  {
    "path": "src/test/java/seedu/module/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "CowSaysBaa": 2
    }
  },
  {
    "path": "src/test/java/seedu/module/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/java/seedu/module/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "package seedu.module.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import static seedu.module.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "import seedu.module.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "CowSaysBaa": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import seedu.module.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "CowSaysBaa": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003c?import seedu.module.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CowSaysBaa"
        },
        "content": "\u003cfx:root type\u003d\"seedu.module.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "CowSaysBaa": 2
    }
  }
]
